<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L496G-Discovery_2_Images_SBSFU\SBSFU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L496G-Discovery_2_Images_SBSFU\SBSFU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Tue Nov 19 17:56:50 2019
<BR><P>
<H3>Maximum Stack Usage =       2592 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SFU_BOOT_SM_DownloadNewUserFw &rArr; SFU_LOADER_DownloadNewUserFw &rArr; SFU_COM_YMODEM_Receive &rArr; SFU_COM_YMODEM_DataPktRxCpltCallback &rArr; SFU_LOADER_VerifyFwHeader &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BusFault_Handler</a><BR>
 <LI><a href="#[2a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">UsageFault_Handler</a><BR>
 <LI><a href="#[2b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">SVC_Handler</a><BR>
 <LI><a href="#[2c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">DebugMon_Handler</a><BR>
 <LI><a href="#[2d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">PendSV_Handler</a><BR>
 <LI><a href="#[41]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[97]">BSP_ErrorHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[97]">BSP_ErrorHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">ADC1_2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5e]">ADC3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[29]">BusFault_Handler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[43]">CAN1_RX0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[44]">CAN1_RX1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[45]">CAN1_SCE_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[42]">CAN1_TX_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[85]">CAN2_RX0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[86]">CAN2_RX1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[87]">CAN2_SCE_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[84]">CAN2_TX_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6f]">COMP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[80]">CRS_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[83]">DCMI_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6c]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6d]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6e]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[59]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel6_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[40]">DMA1_Channel7_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[88]">DMA2D_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[67]">DMA2_Channel1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[68]">DMA2_Channel2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[69]">DMA2_Channel3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Channel5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[73]">DMA2_Channel6_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[74]">DMA2_Channel7_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[2c]">DebugMon_Handler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[35]">EXTI0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[57]">EXTI15_10_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[36]">EXTI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[37]">EXTI2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[38]">EXTI3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[39]">EXTI4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[46]">EXTI9_5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[33]">FLASH_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5f]">FMC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7f]">FPU_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[27]">HardFault_Handler</a> from sfu_boot.o(i.HardFault_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[4f]">I2C1_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[4e]">I2C1_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[51]">I2C2_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[50]">I2C2_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[78]">I2C3_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[77]">I2C3_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[82]">I2C4_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[81]">I2C4_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7d]">LCD_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[70]">LPTIM1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[71]">LPTIM2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[75]">LPUART1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[28]">MemManage_Handler</a> from sfu_boot.o(i.MemManage_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[26]">NMI_Handler</a> from sfu_low_level_flash.o(i.NMI_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[72]">OTG_FS_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[30]">PVD_PVM_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[2d]">PendSV_Handler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[76]">QUADSPI_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[34]">RCC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7e]">RNG_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[58]">RTC_Alarm_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[32]">RTC_WKUP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[25]">Reset_Handler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[79]">SAI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7a]">SAI2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[60]">SDMMC1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[1]">SFU_BOOT_SM_CheckNewFwToDownload</a> from sfu_boot.o(i.SFU_BOOT_SM_CheckNewFwToDownload) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[0]">SFU_BOOT_SM_CheckStatusOnReset</a> from sfu_boot.o(i.SFU_BOOT_SM_CheckStatusOnReset) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[3]">SFU_BOOT_SM_CheckUserFwStatus</a> from sfu_boot.o(i.SFU_BOOT_SM_CheckUserFwStatus) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[2]">SFU_BOOT_SM_DownloadNewUserFw</a> from sfu_boot.o(i.SFU_BOOT_SM_DownloadNewUserFw) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[6]">SFU_BOOT_SM_ExecuteUserFw</a> from sfu_boot.o(i.SFU_BOOT_SM_ExecuteUserFw) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[8]">SFU_BOOT_SM_HandleCriticalFailure</a> from sfu_boot.o(i.SFU_BOOT_SM_HandleCriticalFailure) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[4]">SFU_BOOT_SM_InstallNewUserFw</a> from sfu_boot.o(i.SFU_BOOT_SM_InstallNewUserFw) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[9]">SFU_BOOT_SM_RebootStateMachine</a> from sfu_boot.o(i.SFU_BOOT_SM_RebootStateMachine) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[7]">SFU_BOOT_SM_RollbackPrevUserFw</a> from sfu_boot.o(i.SFU_BOOT_SM_RollbackPrevUserFw) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[5]">SFU_BOOT_SM_VerifyUserFwSignature</a> from sfu_boot.o(i.SFU_BOOT_SM_VerifyUserFwSignature) referenced 2 times from sfu_boot.o(.data)
 <LI><a href="#[52]">SPI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[53]">SPI2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[62]">SPI3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[2b]">SVC_Handler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7b]">SWPMI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[2e]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8a]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l496xx.o(.text)
 <LI><a href="#[31]">TAMP_STAMP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[47]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[4a]">TIM1_CC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[49]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[48]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[4b]">TIM2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[4c]">TIM3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[4d]">TIM4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[61]">TIM5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[65]">TIM6_DAC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[66]">TIM7_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5a]">TIM8_BRK_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5d]">TIM8_CC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5c]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5b]">TIM8_UP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7c]">TSC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[63]">UART4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[64]">UART5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[54]">USART1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[55]">USART2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[56]">USART3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[2a]">UsageFault_Handler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[2f]">WWDG_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l496xx.o(.text)
 <LI><a href="#[8c]">fputc</a> from sfu_com_trace.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[89]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[15]">mfxstm32l152_DeInit</a> from mfxstm32l152.o(i.mfxstm32l152_DeInit) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[20]">mfxstm32l152_Error_ClearIT</a> from mfxstm32l152.o(i.mfxstm32l152_Error_ClearIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[22]">mfxstm32l152_Error_DisableIT</a> from mfxstm32l152.o(i.mfxstm32l152_Error_DisableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1f]">mfxstm32l152_Error_EnableIT</a> from mfxstm32l152.o(i.mfxstm32l152_Error_EnableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[21]">mfxstm32l152_Error_GetITStatus</a> from mfxstm32l152.o(i.mfxstm32l152_Error_GetITStatus) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[24]">mfxstm32l152_Error_ReadMsg</a> from mfxstm32l152.o(i.mfxstm32l152_Error_ReadMsg) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[23]">mfxstm32l152_Error_ReadSrc</a> from mfxstm32l152.o(i.mfxstm32l152_Error_ReadSrc) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1c]">mfxstm32l152_IDD_ClearIT</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_ClearIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[19]">mfxstm32l152_IDD_Config</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_Config) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1e]">mfxstm32l152_IDD_DisableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_DisableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1b]">mfxstm32l152_IDD_EnableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_EnableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1d]">mfxstm32l152_IDD_GetITStatus</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_GetITStatus) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1a]">mfxstm32l152_IDD_GetValue</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_GetValue) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[18]">mfxstm32l152_IDD_Start</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_Start) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[14]">mfxstm32l152_IO_ClearIT</a> from mfxstm32l152.o(i.mfxstm32l152_IO_ClearIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[e]">mfxstm32l152_IO_Config</a> from mfxstm32l152.o(i.mfxstm32l152_IO_Config) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[12]">mfxstm32l152_IO_DisableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IO_DisableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[11]">mfxstm32l152_IO_EnableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IO_EnableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[13]">mfxstm32l152_IO_ITStatus</a> from mfxstm32l152.o(i.mfxstm32l152_IO_ITStatus) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[10]">mfxstm32l152_IO_ReadPin</a> from mfxstm32l152.o(i.mfxstm32l152_IO_ReadPin) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[d]">mfxstm32l152_IO_Start</a> from mfxstm32l152.o(i.mfxstm32l152_IO_Start) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[f]">mfxstm32l152_IO_WritePin</a> from mfxstm32l152.o(i.mfxstm32l152_IO_WritePin) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[a]">mfxstm32l152_Init</a> from mfxstm32l152.o(i.mfxstm32l152_Init) referenced 4 times from mfxstm32l152.o(.data)
 <LI><a href="#[16]">mfxstm32l152_LowPower</a> from mfxstm32l152.o(i.mfxstm32l152_LowPower) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[b]">mfxstm32l152_ReadID</a> from mfxstm32l152.o(i.mfxstm32l152_ReadID) referenced 4 times from mfxstm32l152.o(.data)
 <LI><a href="#[c]">mfxstm32l152_Reset</a> from mfxstm32l152.o(i.mfxstm32l152_Reset) referenced 4 times from mfxstm32l152.o(.data)
 <LI><a href="#[17]">mfxstm32l152_WakeUp</a> from mfxstm32l152.o(i.mfxstm32l152_WakeUp) referenced 2 times from mfxstm32l152.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[184]"></a>SE_EnterSecureMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, se_interface_common.o(.SE_IF_Code))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_VerifyFwRawHeaderTag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Finish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Append
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Finish
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Append
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_WriteBootInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_APP_GetActiveFwInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Encrypt_Finish
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Encrypt_Append
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Encrypt_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_SFU_IMG_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_SFU_IMG_Read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_LockRestrictServices
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Init
</UL>

<P><STRONG><a name="[185]"></a>SE_ExitSecureMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, se_interface_common.o(.SE_IF_Code))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_VerifyFwRawHeaderTag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Finish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Append
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Finish
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Append
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_WriteBootInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_APP_GetActiveFwInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Encrypt_Finish
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Encrypt_Append
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Encrypt_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_SFU_IMG_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_SFU_IMG_Read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_LockRestrictServices
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Init
</UL>

<P><STRONG><a name="[11d]"></a>SE_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
</UL>

<P><STRONG><a name="[129]"></a>SE_Startup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SE_Startup
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
</UL>

<P><STRONG><a name="[121]"></a>SE_INFO_ReadBootInfo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_INFO_ReadBootInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_StateExceptionHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecStatus
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckStatusOnReset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageResetSources
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageLastExecStatus
</UL>

<P><STRONG><a name="[124]"></a>SE_INFO_WriteBootInfo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_INFO_WriteBootInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageResetSources
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageLastExecStatus
</UL>

<P><STRONG><a name="[134]"></a>SE_LockRestrictServices</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_LockRestrictServices
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
</UL>

<P><STRONG><a name="[168]"></a>SE_SFU_IMG_Read</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
</UL>

<P><STRONG><a name="[169]"></a>SE_SFU_IMG_Write</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SE_SFU_IMG_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
</UL>

<P><STRONG><a name="[186]"></a>SE_Encrypt_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>

<P><STRONG><a name="[187]"></a>SE_Encrypt_Append</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, se_interface_bootloader.o(.SE_IF_Code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>

<P><STRONG><a name="[188]"></a>SE_Encrypt_Finish</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, se_interface_bootloader.o(.SE_IF_Code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>

<P><STRONG><a name="[ad]"></a>SE_Decrypt_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_Decrypt_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
</UL>

<P><STRONG><a name="[af]"></a>SE_Decrypt_Append</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SE_Decrypt_Append
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
</UL>

<P><STRONG><a name="[b3]"></a>SE_Decrypt_Finish</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SE_Decrypt_Finish
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
</UL>

<P><STRONG><a name="[173]"></a>SE_AuthenticateFW_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_AuthenticateFW_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTagScatter
</UL>

<P><STRONG><a name="[174]"></a>SE_AuthenticateFW_Append</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SE_AuthenticateFW_Append
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTagScatter
</UL>

<P><STRONG><a name="[175]"></a>SE_AuthenticateFW_Finish</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SE_AuthenticateFW_Finish
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTagScatter
</UL>

<P><STRONG><a name="[16e]"></a>SE_VerifyFwRawHeaderTag</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, se_interface_bootloader.o(.SE_IF_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_VerifyFwRawHeaderTag
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFwRawHeaderTag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_VerifyFwHeader
</UL>

<P><STRONG><a name="[8d]"></a>SE_APP_GetActiveFwInfo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, se_interface_application.o(.SE_IF_Code), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SE_APP_GetActiveFwInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_ExitSecureMode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_EnterSecureMode
</UL>

<P><STRONG><a name="[8b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[96]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFWInfo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_DataPktRxCpltCallback
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CoreInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallAtNextReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a9]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrailerInfo
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHeaderValidated
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_FirmwareToInstall
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[193]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[194]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[195]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>BSP_ErrorHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.BSP_ErrorHandler))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadBuffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[a3]"></a>BSP_IO_ConfigPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l496g_discovery_io.o(i.BSP_IO_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[98]"></a>BSP_IO_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l496g_discovery_io.o(i.BSP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_IO_Init &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[9a]"></a>BSP_IO_TogglePin</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l496g_discovery_io.o(i.BSP_IO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[9b]"></a>BSP_IO_WritePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l496g_discovery_io.o(i.BSP_IO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TogglePin
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[9c]"></a>BSP_JOY_GetState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32l496g_discovery.o(i.BSP_JOY_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_JOY_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_CheckLocalDownloadReq
</UL>

<P><STRONG><a name="[9e]"></a>BSP_JOY_Init</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, stm32l496g_discovery.o(i.BSP_JOY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_JOY_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
</UL>

<P><STRONG><a name="[a2]"></a>BSP_LED_Init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, stm32l496g_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_WritePin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
</UL>

<P><STRONG><a name="[a5]"></a>BSP_LED_Off</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[a6]"></a>BSP_LED_Toggle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Toggle &rArr; BSP_IO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[c4]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[c3]"></a>FLASH_PageErase</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
</UL>

<P><STRONG><a name="[c0]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32l4xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_CRC_Calculate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CRC_Calculate &rArr; CRC_Handle_8
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Handle_8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Handle_16
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_CRC_Calculate
</UL>

<P><STRONG><a name="[be]"></a>HAL_CRC_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_CRC_Config
</UL>

<P><STRONG><a name="[bf]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Wakeup
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_HeaderPktRxCpltCallback
</UL>

<P><STRONG><a name="[c1]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
</UL>

<P><STRONG><a name="[c5]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBGetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FLASHEx_OBGetConfig &rArr; FLASH_OB_GetPCROP
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetPCROP
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
</UL>

<P><STRONG><a name="[c7]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FLASHEx_OBProgram &rArr; FLASH_OB_WRPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
</UL>

<P><STRONG><a name="[167]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_OB_Launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FLASH_OB_Launch &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
</UL>

<P><STRONG><a name="[16c]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_OB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
</UL>

<P><STRONG><a name="[16a]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
</UL>

<P><STRONG><a name="[c9]"></a>HAL_FLASH_Program</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
</UL>

<P><STRONG><a name="[164]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspDeInit
</UL>

<P><STRONG><a name="[9f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_EnableWakeupPin
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_MspInit
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_GetState
</UL>

<P><STRONG><a name="[a7]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Wakeup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[cc]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>

<P><STRONG><a name="[f3]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>

<P><STRONG><a name="[ce]"></a>HAL_I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadBuffer
</UL>

<P><STRONG><a name="[d6]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
</UL>

<P><STRONG><a name="[cd]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[cf]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[16f]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[16d]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_ExitSecureBootExecution
</UL>

<P><STRONG><a name="[dc]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspDeInit
</UL>

<P><STRONG><a name="[a1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[da]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[df]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[171]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[172]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1312 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e7]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; SFU_LL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_UART_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; SFU_LL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_UART_Receive</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Receive
</UL>

<P><STRONG><a name="[f0]"></a>HAL_UART_Transmit</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Transmit
</UL>

<P><STRONG><a name="[27]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfu_boot.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = HardFault_Handler &rArr; SFU_BOOT_IrqExceptionHandler &rArr; SFU_EXCPT_RuntimeExceptionHandler &rArr; SFU_IMG_CheckRollbackConditions &rArr; SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_IrqExceptionHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>I2C2_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.I2C2_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C2_DeInit &rArr; I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
</UL>

<P><STRONG><a name="[f5]"></a>I2C2_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
</UL>

<P><STRONG><a name="[fd]"></a>MFX_IO_DeInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.MFX_IO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MFX_IO_DeInit &rArr; I2C2_DeInit &rArr; I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DeInit
</UL>

<P><STRONG><a name="[fe]"></a>MFX_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.MFX_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MFX_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Reset
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ReadID
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Start
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqTypeMode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqEvtMode
</UL>

<P><STRONG><a name="[ff]"></a>MFX_IO_EnableWakeupPin</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.MFX_IO_EnableWakeupPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MFX_IO_EnableWakeupPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_WakeUp
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_LowPower
</UL>

<P><STRONG><a name="[100]"></a>MFX_IO_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.MFX_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MFX_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnableIT
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_EnableIT
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_EnableIT
</UL>

<P><STRONG><a name="[101]"></a>MFX_IO_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.MFX_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MFX_IO_Init &rArr; I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ReadID
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[102]"></a>MFX_IO_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.MFX_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ReadID
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Start
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_ReadPin
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_ITStatus
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_GetITStatus
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Config
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_ReadSrc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_ReadMsg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_GetITStatus
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>

<P><STRONG><a name="[103]"></a>MFX_IO_ReadMultiple</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.MFX_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MFX_IO_ReadMultiple &rArr; I2C2_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_GetValue
</UL>

<P><STRONG><a name="[104]"></a>MFX_IO_Wakeup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.MFX_IO_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MFX_IO_Wakeup &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_WakeUp
</UL>

<P><STRONG><a name="[105]"></a>MFX_IO_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm32l496g_discovery.o(i.MFX_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_LowPower
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Start
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_ClearIT
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Start
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Config
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ClearGlobalIT
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>

<P><STRONG><a name="[28]"></a>MemManage_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfu_boot.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = MemManage_Handler &rArr; SFU_BOOT_IrqExceptionHandler &rArr; SFU_EXCPT_RuntimeExceptionHandler &rArr; SFU_IMG_CheckRollbackConditions &rArr; SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_IrqExceptionHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>NMI_Handler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sfu_low_level_flash.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>SFU_BOOT_ForceReboot</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sfu_boot.o(i.SFU_BOOT_ForceReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFU_BOOT_ForceReboot &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_IrqExceptionHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_RebootStateMachine
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>SFU_BOOT_IrqExceptionHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sfu_error.o(i.SFU_BOOT_IrqExceptionHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = SFU_BOOT_IrqExceptionHandler &rArr; SFU_EXCPT_RuntimeExceptionHandler &rArr; SFU_IMG_CheckRollbackConditions &rArr; SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ForceReboot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[128]"></a>SFU_BOOT_RunSecureBootService</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sfu_boot.o(i.SFU_BOOT_RunSecureBootService))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SFU_BOOT_RunSecureBootService &rArr; SFU_LL_SECU_CheckApplyStaticProtections &rArr; HAL_FLASHEx_OBProgram &rArr; FLASH_OB_WRPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ForceReboot
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyRuntimeProtections
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Startup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>SFU_BOOT_SetLastExecError</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sfu_error.o(i.SFU_BOOT_SetLastExecError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SFU_BOOT_SetLastExecError &rArr; SE_INFO_WriteBootInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_WriteBootInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_StateExceptionHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_IrqExceptionHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_PrepareCandidateImageForInstall
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateMetadata
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateImage
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_DownloadNewUserFw
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckStatusOnReset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageResetSources
</UL>

<P><STRONG><a name="[137]"></a>SFU_BOOT_StateExceptionHandler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sfu_error.o(i.SFU_BOOT_StateExceptionHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320<LI>Call Chain = SFU_BOOT_StateExceptionHandler &rArr; SFU_EXCPT_RuntimeExceptionHandler &rArr; SFU_IMG_CheckRollbackConditions &rArr; SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_HandleCriticalFailure
</UL>

<P><STRONG><a name="[113]"></a>SFU_COM_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_com_trace.o(i.SFU_COM_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_DeInit
</UL>

<P><STRONG><a name="[119]"></a>SFU_COM_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_com_trace.o(i.SFU_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SFU_COM_Init &rArr; SFU_LL_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; SFU_LL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
</UL>

<P><STRONG><a name="[140]"></a>SFU_COM_Serial_PutByte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sfu_com_loader.o(i.SFU_COM_Serial_PutByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SFU_COM_Serial_PutByte &rArr; SFU_LL_UART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[142]"></a>SFU_COM_Serial_PutString</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sfu_com_trace.o(i.SFU_COM_Serial_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SFU_COM_Serial_PutString &rArr; SFU_LL_UART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
</UL>

<P><STRONG><a name="[143]"></a>SFU_COM_Transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_com_loader.o(i.SFU_COM_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SFU_COM_Transmit &rArr; SFU_LL_UART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[144]"></a>SFU_COM_YMODEM_DataPktRxCpltCallback</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, sfu_loader.o(i.SFU_COM_YMODEM_DataPktRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = SFU_COM_YMODEM_DataPktRxCpltCallback &rArr; SFU_LOADER_VerifyFwHeader &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_VerifyFwHeader
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[146]"></a>SFU_COM_YMODEM_HeaderPktRxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sfu_loader.o(i.SFU_COM_YMODEM_HeaderPktRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFU_COM_YMODEM_HeaderPktRxCpltCallback &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[147]"></a>SFU_COM_YMODEM_Receive</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, sfu_com_loader.o(i.SFU_COM_YMODEM_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = SFU_COM_YMODEM_Receive &rArr; SFU_COM_YMODEM_DataPktRxCpltCallback &rArr; SFU_LOADER_VerifyFwHeader &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Flush
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Transmit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Serial_PutByte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Int
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePacket
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_HeaderPktRxCpltCallback
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_DataPktRxCpltCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_DownloadNewUserFw
</UL>

<P><STRONG><a name="[122]"></a>SFU_EXCPT_Check_Code</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_error.o(i.SFU_EXCPT_Check_Code))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageLastExecStatus
</UL>

<P><STRONG><a name="[111]"></a>SFU_EXCPT_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_error.o(i.SFU_EXCPT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_DeInit
</UL>

<P><STRONG><a name="[11b]"></a>SFU_EXCPT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_error.o(i.SFU_EXCPT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
</UL>

<P><STRONG><a name="[123]"></a>SFU_EXCPT_ResetExceptionHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sfu_error.o(i.SFU_EXCPT_ResetExceptionHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFU_EXCPT_ResetExceptionHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageLastExecStatus
</UL>

<P><STRONG><a name="[139]"></a>SFU_IMG_CheckCandidateImage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sfu_fwimg_services.o(i.SFU_IMG_CheckCandidateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = SFU_IMG_CheckCandidateImage &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyFwSignature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_InstallNewUserFw
</UL>

<P><STRONG><a name="[138]"></a>SFU_IMG_CheckCandidateMetadata</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sfu_fwimg_services.o(i.SFU_IMG_CheckCandidateMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = SFU_IMG_CheckCandidateMetadata &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_HasValidActiveFirmware
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetActiveFwVersion
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_InstallNewUserFw
</UL>

<P><STRONG><a name="[12e]"></a>SFU_IMG_CheckPendingInstallation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sfu_fwimg_services.o(i.SFU_IMG_CheckPendingInstallation))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = SFU_IMG_CheckPendingInstallation &rArr; SFU_IMG_FirmwareToInstall &rArr; SFU_IMG_GetFWInfoMAC &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_FirmwareToInstall
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckUserFwStatus
</UL>

<P><STRONG><a name="[14a]"></a>SFU_IMG_CheckRollbackConditions</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sfu_fwimg_services.o(i.SFU_IMG_CheckRollbackConditions))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = SFU_IMG_CheckRollbackConditions &rArr; SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_ValidFwInSlot1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetActiveFwVersion
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
</UL>

<P><STRONG><a name="[151]"></a>SFU_IMG_CheckSlot0FwValid</STRONG> (Thumb, 94 bytes, Stack size 240 bytes, sfu_fwimg_core.o(i.SFU_IMG_CheckSlot0FwValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SFU_IMG_CheckSlot0FwValid &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHeaderValidated
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_HasValidActiveFirmware
</UL>

<P><STRONG><a name="[14e]"></a>SFU_IMG_CheckTrailerValid</STRONG> (Thumb, 476 bytes, Stack size 608 bytes, sfu_fwimg_core.o(i.SFU_IMG_CheckTrailerValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = SFU_IMG_CheckTrailerValid &rArr; GetTrailerInfo &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFwSignatureScatter
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFwRawHeaderTag
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFWInfo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrailerInfo
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckPendingInstallation
</UL>

<P><STRONG><a name="[15f]"></a>SFU_IMG_CoreDeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_fwimg_core.o(i.SFU_IMG_CoreDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_ShutdownImageHandling
</UL>

<P><STRONG><a name="[156]"></a>SFU_IMG_CoreInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sfu_fwimg_core.o(i.SFU_IMG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SFU_IMG_CoreInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InitImageHandling
</UL>

<P><STRONG><a name="[14f]"></a>SFU_IMG_FirmwareToInstall</STRONG> (Thumb, 196 bytes, Stack size 760 bytes, sfu_fwimg_core.o(i.SFU_IMG_FirmwareToInstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = SFU_IMG_FirmwareToInstall &rArr; SFU_IMG_GetFWInfoMAC &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHeaderValidated
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckPendingInstallation
</UL>

<P><STRONG><a name="[130]"></a>SFU_IMG_GetActiveFwVersion</STRONG> (Thumb, 30 bytes, Stack size 136 bytes, sfu_fwimg_services.o(i.SFU_IMG_GetActiveFwVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SFU_IMG_GetActiveFwVersion &rArr; SFU_IMG_GetFWInfoMAC &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckRollbackConditions
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateMetadata
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_VerifyFwHeader
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckUserFwStatus
</UL>

<P><STRONG><a name="[131]"></a>SFU_IMG_GetDownloadAreaInfo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sfu_new_image.o(i.SFU_IMG_GetDownloadAreaInfo))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_DownloadNewUserFw
</UL>

<P><STRONG><a name="[157]"></a>SFU_IMG_GetFWInfoMAC</STRONG> (Thumb, 68 bytes, Stack size 144 bytes, sfu_fwimg_core.o(i.SFU_IMG_GetFWInfoMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SFU_IMG_GetFWInfoMAC &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFwRawHeaderTag
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFWInfo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_ValidFwInSlot1
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_FirmwareToInstall
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyActiveImgMetadata
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetActiveFwVersion
</UL>

<P><STRONG><a name="[12f]"></a>SFU_IMG_HasValidActiveFirmware</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sfu_fwimg_services.o(i.SFU_IMG_HasValidActiveFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckSlot0FwValid
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyActiveImgMetadata
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyActiveImg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateMetadata
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_VerifyFwHeader
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckUserFwStatus
</UL>

<P><STRONG><a name="[11c]"></a>SFU_IMG_InitImageHandling</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_fwimg_services.o(i.SFU_IMG_InitImageHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SFU_IMG_InitImageHandling &rArr; SFU_IMG_CoreInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
</UL>

<P><STRONG><a name="[133]"></a>SFU_IMG_InstallAtNextReset</STRONG> (Thumb, 80 bytes, Stack size 408 bytes, sfu_new_image.o(i.SFU_IMG_InstallAtNextReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = SFU_IMG_InstallAtNextReset &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_DownloadNewUserFw
</UL>

<P><STRONG><a name="[158]"></a>SFU_IMG_InstallNewVersion</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, sfu_fwimg_core.o(i.SFU_IMG_InstallNewVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = SFU_IMG_InstallNewVersion &rArr; SwapFirmwareImages &rArr; EraseSlotIndex &rArr; SFU_LL_FLASH_Erase_Size &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapFirmwareImages
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSlotIndex
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMagicValue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_Validation
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_TriggerImageInstallation
</UL>

<P><STRONG><a name="[14b]"></a>SFU_IMG_InvalidateCurrentFirmware</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sfu_fwimg_services.o(i.SFU_IMG_InvalidateCurrentFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SFU_IMG_InvalidateCurrentFirmware &rArr; SFU_LL_FLASH_Erase_Size &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
</UL>

<P><STRONG><a name="[136]"></a>SFU_IMG_LaunchActiveImg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sfu_fwimg_services.o(i.SFU_IMG_LaunchActiveImg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SFU_IMG_LaunchActiveImg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SB_SRAM_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
</UL>

<P><STRONG><a name="[15c]"></a>SFU_IMG_PrepareCandidateImageForInstall</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sfu_fwimg_core.o(i.SFU_IMG_PrepareCandidateImageForInstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = SFU_IMG_PrepareCandidateImageForInstall &rArr; DecryptImageInSlot1 &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFwSignatureScatter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_TriggerImageInstallation
</UL>

<P><STRONG><a name="[15d]"></a>SFU_IMG_Recover</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sfu_fwimg_core.o(i.SFU_IMG_Recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SFU_IMG_Recover &rArr; RecoverBinary &rArr; RecopyFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBinary
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMagicValue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_TriggerRecoveryProcedure
</UL>

<P><STRONG><a name="[15e]"></a>SFU_IMG_RollBack</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sfu_fwimg_core.o(i.SFU_IMG_RollBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SFU_IMG_RollBack &rArr; RollbackFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollbackFlash
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_Validation
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_TriggerRollbackProcedure
</UL>

<P><STRONG><a name="[115]"></a>SFU_IMG_ShutdownImageHandling</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_fwimg_services.o(i.SFU_IMG_ShutdownImageHandling))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CoreDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_DeInit
</UL>

<P><STRONG><a name="[13a]"></a>SFU_IMG_TriggerImageInstallation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sfu_fwimg_services.o(i.SFU_IMG_TriggerImageInstallation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = SFU_IMG_TriggerImageInstallation &rArr; SFU_IMG_PrepareCandidateImageForInstall &rArr; DecryptImageInSlot1 &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_PrepareCandidateImageForInstall
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_InstallNewUserFw
</UL>

<P><STRONG><a name="[13b]"></a>SFU_IMG_TriggerRecoveryProcedure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_fwimg_services.o(i.SFU_IMG_TriggerRecoveryProcedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SFU_IMG_TriggerRecoveryProcedure &rArr; SFU_IMG_Recover &rArr; RecoverBinary &rArr; RecopyFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_Recover
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_RollbackPrevUserFw
</UL>

<P><STRONG><a name="[14c]"></a>SFU_IMG_TriggerRollbackProcedure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_fwimg_services.o(i.SFU_IMG_TriggerRollbackProcedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SFU_IMG_TriggerRollbackProcedure &rArr; SFU_IMG_RollBack &rArr; RollbackFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_RollBack
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
</UL>

<P><STRONG><a name="[150]"></a>SFU_IMG_ValidFwInSlot1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sfu_fwimg_core.o(i.SFU_IMG_ValidFwInSlot1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyFwSignature
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckRollbackConditions
</UL>

<P><STRONG><a name="[15a]"></a>SFU_IMG_Validation</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_fwimg_services.o(i.SFU_IMG_Validation))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SFU_IMG_Validation &rArr; SFU_IMG_WriteHeaderValidated &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_WriteHeaderValidated
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_RollBack
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
</UL>

<P><STRONG><a name="[13d]"></a>SFU_IMG_VerifyActiveImg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sfu_fwimg_services.o(i.SFU_IMG_VerifyActiveImg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyFwSignature
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_HasValidActiveFirmware
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_VerifyUserFwSignature
</UL>

<P><STRONG><a name="[13c]"></a>SFU_IMG_VerifyActiveImgMetadata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sfu_fwimg_services.o(i.SFU_IMG_VerifyActiveImgMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SFU_IMG_VerifyActiveImgMetadata &rArr; SFU_IMG_GetFWInfoMAC &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_HasValidActiveFirmware
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_VerifyUserFwSignature
</UL>

<P><STRONG><a name="[14d]"></a>SFU_IMG_VerifyFwSignature</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sfu_fwimg_core.o(i.SFU_IMG_VerifyFwSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTagScatter
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_ValidFwInSlot1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyActiveImg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateImage
</UL>

<P><STRONG><a name="[160]"></a>SFU_IMG_WriteHeaderValidated</STRONG> (Thumb, 116 bytes, Stack size 248 bytes, sfu_fwimg_core.o(i.SFU_IMG_WriteHeaderValidated))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SFU_IMG_WriteHeaderValidated &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_Validation
</UL>

<P><STRONG><a name="[10c]"></a>SFU_LL_CRC_Calculate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sfu_low_level.o(i.SFU_LL_CRC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SFU_LL_CRC_Calculate &rArr; HAL_CRC_Calculate &rArr; CRC_Handle_8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePacket
</UL>

<P><STRONG><a name="[10b]"></a>SFU_LL_CRC_Config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sfu_low_level.o(i.SFU_LL_CRC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SFU_LL_CRC_Config &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePacket
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_CRC_Init
</UL>

<P><STRONG><a name="[162]"></a>SFU_LL_CRC_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sfu_low_level.o(i.SFU_LL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SFU_LL_CRC_Init &rArr; SFU_LL_CRC_Config &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_CRC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_Init
</UL>

<P><STRONG><a name="[114]"></a>SFU_LL_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_low_level.o(i.SFU_LL_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_DeInit
</UL>

<P><STRONG><a name="[b1]"></a>SFU_LL_FLASH_Erase_Size</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, sfu_low_level_flash.o(i.SFU_LL_FLASH_Erase_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SFU_LL_FLASH_Erase_Size &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_GetPage
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_GetBank
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollbackFlash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecopyFlash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSlotIndex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallAtNextReset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InvalidateCurrentFirmware
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateMetadata
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateImage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_DataPktRxCpltCallback
</UL>

<P><STRONG><a name="[166]"></a>SFU_LL_FLASH_GetBank</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, sfu_low_level_flash.o(i.SFU_LL_FLASH_GetBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SFU_LL_FLASH_GetBank
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
</UL>

<P><STRONG><a name="[165]"></a>SFU_LL_FLASH_GetPage</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, sfu_low_level_flash.o(i.SFU_LL_FLASH_GetPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SFU_LL_FLASH_GetPage
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
</UL>

<P><STRONG><a name="[ae]"></a>SFU_LL_FLASH_Read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sfu_low_level_flash.o(i.SFU_LL_FLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_SFU_IMG_Read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTagScatter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapFirmwareImages
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollbackFlash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecopyFlash
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrailerInfo
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_WriteHeaderValidated
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_ValidFwInSlot1
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_FirmwareToInstall
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckSlot0FwValid
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_DownloadNewUserFw
</UL>

<P><STRONG><a name="[ab]"></a>SFU_LL_FLASH_Write</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sfu_low_level_flash.o(i.SFU_LL_FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_SFU_IMG_Write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapFirmwareImages
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollbackFlash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecopyFlash
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMagicValue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallAtNextReset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_WriteHeaderValidated
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_DataPktRxCpltCallback
</UL>

<P><STRONG><a name="[118]"></a>SFU_LL_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_low_level.o(i.SFU_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SFU_LL_Init &rArr; SFU_LL_CRC_Init &rArr; SFU_LL_CRC_Config &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
</UL>

<P><STRONG><a name="[15b]"></a>SFU_LL_SB_SRAM_Erase</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sfu_low_level.o(i.SFU_LL_SB_SRAM_Erase))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_LaunchActiveImg
</UL>

<P><STRONG><a name="[12b]"></a>SFU_LL_SECU_CheckApplyRuntimeProtections</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sfu_low_level_security.o(i.SFU_LL_SECU_CheckApplyRuntimeProtections))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SFU_LL_SECU_CheckApplyRuntimeProtections &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
</UL>

<P><STRONG><a name="[12a]"></a>SFU_LL_SECU_CheckApplyStaticProtections</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, sfu_low_level_security.o(i.SFU_LL_SECU_CheckApplyStaticProtections))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SFU_LL_SECU_CheckApplyStaticProtections &rArr; HAL_FLASHEx_OBProgram &rArr; FLASH_OB_WRPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Lock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckFlashConfiguration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
</UL>

<P><STRONG><a name="[127]"></a>SFU_LL_SECU_ClearResetSources</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sfu_low_level_security.o(i.SFU_LL_SECU_ClearResetSources))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageResetSources
</UL>

<P><STRONG><a name="[135]"></a>SFU_LL_SECU_ExitSecureBootExecution</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sfu_low_level_security.o(i.SFU_LL_SECU_ExitSecureBootExecution))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SFU_LL_SECU_ExitSecureBootExecution
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
</UL>

<P><STRONG><a name="[126]"></a>SFU_LL_SECU_GetResetSources</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sfu_low_level_security.o(i.SFU_LL_SECU_GetResetSources))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageResetSources
</UL>

<P><STRONG><a name="[b0]"></a>SFU_LL_SECU_IWDG_Refresh</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_low_level_security.o(i.SFU_LL_SECU_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePacket
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapFirmwareImages
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollbackFlash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecopyFlash
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InvalidateCurrentFirmware
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_DownloadNewUserFw
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
</UL>

<P><STRONG><a name="[13e]"></a>SFU_LL_UART_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_low_level.o(i.SFU_LL_UART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_DeInit
</UL>

<P><STRONG><a name="[149]"></a>SFU_LL_UART_Flush</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sfu_low_level.o(i.SFU_LL_UART_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[13f]"></a>SFU_LL_UART_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sfu_low_level.o(i.SFU_LL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SFU_LL_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; SFU_LL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Init
</UL>

<P><STRONG><a name="[ed]"></a>SFU_LL_UART_MspInit</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, sfu_low_level.o(i.SFU_LL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SFU_LL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[10a]"></a>SFU_LL_UART_Receive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sfu_low_level.o(i.SFU_LL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SFU_LL_UART_Receive &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePacket
</UL>

<P><STRONG><a name="[141]"></a>SFU_LL_UART_Transmit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sfu_low_level.o(i.SFU_LL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SFU_LL_UART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Transmit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Serial_PutByte
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Serial_PutString
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[12d]"></a>SFU_LOADER_CheckLocalDownloadReq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sfu_loader.o(i.SFU_LOADER_CheckLocalDownloadReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFU_LOADER_CheckLocalDownloadReq &rArr; BSP_JOY_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckNewFwToDownload
</UL>

<P><STRONG><a name="[112]"></a>SFU_LOADER_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_loader.o(i.SFU_LOADER_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_DeInit
</UL>

<P><STRONG><a name="[132]"></a>SFU_LOADER_DownloadNewUserFw</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sfu_loader.o(i.SFU_LOADER_DownloadNewUserFw))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = SFU_LOADER_DownloadNewUserFw &rArr; SFU_COM_YMODEM_Receive &rArr; SFU_COM_YMODEM_DataPktRxCpltCallback &rArr; SFU_LOADER_VerifyFwHeader &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_DownloadNewUserFw
</UL>

<P><STRONG><a name="[11a]"></a>SFU_LOADER_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfu_loader.o(i.SFU_LOADER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
</UL>

<P><STRONG><a name="[2e]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>SystemClock_Config</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ec]"></a>UART_CheckIdleState</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ea]"></a>UART_SetConfig</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ef]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[176]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[198]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[b2]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapFirmwareImages
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollbackFlash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecopyFlash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSlotIndex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptImageInSlot1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ForceReboot
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_ResetExceptionHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_StateExceptionHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_RuntimeExceptionHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_WriteHeaderValidated
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_ValidFwInSlot1
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_Recover
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_PrepareCandidateImageForInstall
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_FirmwareToInstall
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CoreInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckSlot0FwValid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyActiveImg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckRollbackConditions
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateMetadata
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateImage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_VerifyFwHeader
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_DownloadNewUserFw
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyRuntimeProtections
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_VerifyUserFwSignature
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_RollbackPrevUserFw
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_RebootStateMachine
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_InstallNewUserFw
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_HandleCriticalFailure
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_DownloadNewUserFw
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckUserFwStatus
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckStatusOnReset
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckNewFwToDownload
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageResetSources
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageLastExecStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_Init
</UL>

<P><STRONG><a name="[199]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8c]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sfu_com_trace.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; SFU_LL_UART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[89]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ForceReboot
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[178]"></a>mfxstm32l152_ClearGlobalIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_ClearGlobalIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mfxstm32l152_ClearGlobalIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_ClearIT
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_ClearIT
</UL>

<P><STRONG><a name="[15]"></a>mfxstm32l152_DeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mfxstm32l152_DeInit &rArr; MFX_IO_DeInit &rArr; I2C2_DeInit &rArr; I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>mfxstm32l152_DisableITSource</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_DisableITSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_DisableIT
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_DisableIT
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_DisableIT
</UL>

<P><STRONG><a name="[17a]"></a>mfxstm32l152_EnableITSource</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_EnableITSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnableIT
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_EnableIT
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_EnableIT
</UL>

<P><STRONG><a name="[20]"></a>mfxstm32l152_Error_ClearIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_ClearIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mfxstm32l152_Error_ClearIT &rArr; mfxstm32l152_ClearGlobalIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ClearGlobalIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>mfxstm32l152_Error_DisableIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_Error_DisableIT &rArr; mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>mfxstm32l152_Error_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_Error_EnableIT &rArr; mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>mfxstm32l152_Error_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_Error_GetITStatus &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>mfxstm32l152_Error_ReadMsg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_ReadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_Error_ReadMsg &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>mfxstm32l152_Error_ReadSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_ReadSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_Error_ReadSrc &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>mfxstm32l152_IDD_ClearIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_ClearIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mfxstm32l152_IDD_ClearIT &rArr; mfxstm32l152_ClearGlobalIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ClearGlobalIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>mfxstm32l152_IDD_Config</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mfxstm32l152_IDD_Config &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>mfxstm32l152_IDD_DisableIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IDD_DisableIT &rArr; mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>mfxstm32l152_IDD_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IDD_EnableIT &rArr; mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>mfxstm32l152_IDD_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_IDD_GetITStatus &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>mfxstm32l152_IDD_GetValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IDD_GetValue &rArr; MFX_IO_ReadMultiple &rArr; I2C2_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>mfxstm32l152_IDD_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_IDD_Start &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>mfxstm32l152_IO_ClearIT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_ClearIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_IO_ClearIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>mfxstm32l152_IO_Config</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mfxstm32l152_IO_Config &rArr; mfxstm32l152_IO_SetIrqTypeMode &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqTypeMode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqEvtMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_InitPin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnablePinIT
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnableIT
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_DisablePinIT
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>mfxstm32l152_IO_DisableIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IO_DisableIT &rArr; mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>mfxstm32l152_IO_DisablePinIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_DisablePinIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_DisablePinIT &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[11]"></a>mfxstm32l152_IO_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IO_EnableIT &rArr; mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[17f]"></a>mfxstm32l152_IO_EnablePinIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_EnablePinIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_EnablePinIT &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[13]"></a>mfxstm32l152_IO_ITStatus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_ITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IO_ITStatus &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[17d]"></a>mfxstm32l152_IO_InitPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_InitPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_InitPin &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[10]"></a>mfxstm32l152_IO_ReadPin</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IO_ReadPin &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[180]"></a>mfxstm32l152_IO_SetIrqEvtMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_SetIrqEvtMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mfxstm32l152_IO_SetIrqEvtMode &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[17e]"></a>mfxstm32l152_IO_SetIrqTypeMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_SetIrqTypeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mfxstm32l152_IO_SetIrqTypeMode &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[d]"></a>mfxstm32l152_IO_Start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IO_Start &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>mfxstm32l152_IO_WritePin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_WritePin &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>mfxstm32l152_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mfxstm32l152_Init &rArr; MFX_IO_Init &rArr; I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_GetInstance
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mfxstm32l152.o(.data)
<LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>mfxstm32l152_LowPower</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_LowPower &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_EnableWakeupPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>mfxstm32l152_ReadID</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mfxstm32l152_ReadID &rArr; MFX_IO_Init &rArr; I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mfxstm32l152.o(.data)
<LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>mfxstm32l152_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_Reset &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mfxstm32l152.o(.data)
<LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[182]"></a>mfxstm32l152_SetIrqOutPinPolarity</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_SetIrqOutPinPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_SetIrqOutPinPolarity &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[183]"></a>mfxstm32l152_SetIrqOutPinType</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_SetIrqOutPinType))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_SetIrqOutPinType &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[17]"></a>mfxstm32l152_WakeUp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mfxstm32l152_WakeUp &rArr; MFX_IO_EnableWakeupPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Wakeup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_EnableWakeupPin
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11e]"></a>SFU_EXCPT_RuntimeExceptionHandler</STRONG> (Thumb, 1214 bytes, Stack size 8 bytes, sfu_error.o(i.SFU_EXCPT_RuntimeExceptionHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = SFU_EXCPT_RuntimeExceptionHandler &rArr; SFU_IMG_CheckRollbackConditions &rArr; SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Serial_PutString
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_TriggerRollbackProcedure
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InvalidateCurrentFirmware
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckRollbackConditions
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_StateExceptionHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_IrqExceptionHandler
</UL>

<P><STRONG><a name="[a8]"></a>CheckHeaderValidated</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sfu_fwimg_core.o(i.CheckHeaderValidated))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CheckHeaderValidated &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_FirmwareToInstall
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckSlot0FwValid
</UL>

<P><STRONG><a name="[aa]"></a>CleanMagicValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sfu_fwimg_core.o(i.CleanMagicValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CleanMagicValue &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_Recover
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
</UL>

<P><STRONG><a name="[ac]"></a>DecryptImageInSlot1</STRONG> (Thumb, 546 bytes, Stack size 1152 bytes, sfu_fwimg_core.o(i.DecryptImageInSlot1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = DecryptImageInSlot1 &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Finish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Decrypt_Append
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_PrepareCandidateImageForInstall
</UL>

<P><STRONG><a name="[b4]"></a>EraseSlotIndex</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sfu_fwimg_core.o(i.EraseSlotIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EraseSlotIndex &rArr; SFU_LL_FLASH_Erase_Size &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapFirmwareImages
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
</UL>

<P><STRONG><a name="[ba]"></a>GetTrailerInfo</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, sfu_fwimg_core.o(i.GetTrailerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetTrailerInfo &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
</UL>

<P><STRONG><a name="[106]"></a>ParseFWInfo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sfu_fwimg_core.o(i.ParseFWInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParseFWInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
</UL>

<P><STRONG><a name="[10d]"></a>RecopyFlash</STRONG> (Thumb, 262 bytes, Stack size 560 bytes, sfu_fwimg_core.o(i.RecopyFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = RecopyFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBinary
</UL>

<P><STRONG><a name="[10e]"></a>RecoverBinary</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sfu_fwimg_core.o(i.RecoverBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = RecoverBinary &rArr; RecopyFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecopyFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_Recover
</UL>

<P><STRONG><a name="[10f]"></a>RollbackFlash</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, sfu_fwimg_core.o(i.RollbackFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = RollbackFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_RollBack
</UL>

<P><STRONG><a name="[159]"></a>SwapFirmwareImages</STRONG> (Thumb, 330 bytes, Stack size 560 bytes, sfu_fwimg_core.o(i.SwapFirmwareImages))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = SwapFirmwareImages &rArr; EraseSlotIndex &rArr; SFU_LL_FLASH_Erase_Size &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSlotIndex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallNewVersion
</UL>

<P><STRONG><a name="[152]"></a>VerifyFwRawHeaderTag</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sfu_fwimg_core.o(i.VerifyFwRawHeaderTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VerifyFwRawHeaderTag &rArr; SE_VerifyFwRawHeaderTag
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_VerifyFwRawHeaderTag
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetFWInfoMAC
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
</UL>

<P><STRONG><a name="[154]"></a>VerifyFwSignatureScatter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sfu_fwimg_core.o(i.VerifyFwSignatureScatter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyFwSignatureScatter
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_PrepareCandidateImageForInstall
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckTrailerValid
</UL>

<P><STRONG><a name="[161]"></a>VerifyTagScatter</STRONG> (Thumb, 440 bytes, Stack size 2168 bytes, sfu_fwimg_core.o(i.VerifyTagScatter))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224<LI>Call Chain = VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Finish
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_AuthenticateFW_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyFwSignature
</UL>

<P><STRONG><a name="[109]"></a>ReceivePacket</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, sfu_com_loader.o(i.ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReceivePacket &rArr; SFU_LL_UART_Receive &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_UART_Receive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_CRC_Config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_CRC_Calculate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[148]"></a>Str2Int</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, sfu_com_loader.o(i.Str2Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Str2Int
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_Receive
</UL>

<P><STRONG><a name="[110]"></a>SFU_BOOT_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sfu_boot.o(i.SFU_BOOT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SFU_BOOT_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_DeInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_ShutdownImageHandling
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_DeInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_DeInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_RebootStateMachine
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
</UL>

<P><STRONG><a name="[117]"></a>SFU_BOOT_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sfu_boot.o(i.SFU_BOOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SFU_BOOT_Init &rArr; SFU_COM_Init &rArr; SFU_LL_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; SFU_LL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InitImageHandling
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
</UL>

<P><STRONG><a name="[120]"></a>SFU_BOOT_ManageLastExecStatus</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sfu_boot.o(i.SFU_BOOT_ManageLastExecStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SFU_BOOT_ManageLastExecStatus &rArr; SFU_EXCPT_ResetExceptionHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_WriteBootInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_ResetExceptionHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_EXCPT_Check_Code
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckStatusOnReset
</UL>

<P><STRONG><a name="[125]"></a>SFU_BOOT_ManageResetSources</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, sfu_boot.o(i.SFU_BOOT_ManageResetSources))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SFU_BOOT_ManageResetSources &rArr; SFU_BOOT_SetLastExecError &rArr; SE_INFO_WriteBootInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_WriteBootInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_GetResetSources
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_ClearResetSources
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckStatusOnReset
</UL>

<P><STRONG><a name="[1]"></a>SFU_BOOT_SM_CheckNewFwToDownload</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sfu_boot.o(i.SFU_BOOT_SM_CheckNewFwToDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SFU_BOOT_SM_CheckNewFwToDownload &rArr; SFU_LOADER_CheckLocalDownloadReq &rArr; BSP_JOY_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_CheckLocalDownloadReq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>SFU_BOOT_SM_CheckStatusOnReset</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, sfu_boot.o(i.SFU_BOOT_SM_CheckStatusOnReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SFU_BOOT_SM_CheckStatusOnReset &rArr; SFU_BOOT_ManageResetSources &rArr; SFU_BOOT_SetLastExecError &rArr; SE_INFO_WriteBootInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageResetSources
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ManageLastExecStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>SFU_BOOT_SM_CheckUserFwStatus</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sfu_boot.o(i.SFU_BOOT_SM_CheckUserFwStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = SFU_BOOT_SM_CheckUserFwStatus &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_HasValidActiveFirmware
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetActiveFwVersion
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckPendingInstallation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>SFU_BOOT_SM_DownloadNewUserFw</STRONG> (Thumb, 138 bytes, Stack size 168 bytes, sfu_boot.o(i.SFU_BOOT_SM_DownloadNewUserFw))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = SFU_BOOT_SM_DownloadNewUserFw &rArr; SFU_LOADER_DownloadNewUserFw &rArr; SFU_COM_YMODEM_Receive &rArr; SFU_COM_YMODEM_DataPktRxCpltCallback &rArr; SFU_LOADER_VerifyFwHeader &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_InstallAtNextReset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetDownloadAreaInfo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LOADER_DownloadNewUserFw
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>SFU_BOOT_SM_ExecuteUserFw</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sfu_boot.o(i.SFU_BOOT_SM_ExecuteUserFw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SFU_BOOT_SM_ExecuteUserFw &rArr; SFU_BOOT_SetLastExecStatus &rArr; SE_INFO_WriteBootInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ForceReboot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecError
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_LaunchActiveImg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_ExitSecureBootExecution
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_LockRestrictServices
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SetLastExecStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_DeInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>SFU_BOOT_SM_HandleCriticalFailure</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sfu_boot.o(i.SFU_BOOT_SM_HandleCriticalFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = SFU_BOOT_SM_HandleCriticalFailure &rArr; SFU_BOOT_StateExceptionHandler &rArr; SFU_EXCPT_RuntimeExceptionHandler &rArr; SFU_IMG_CheckRollbackConditions &rArr; SFU_IMG_ValidFwInSlot1 &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_StateExceptionHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>SFU_BOOT_SM_InstallNewUserFw</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sfu_boot.o(i.SFU_BOOT_SM_InstallNewUserFw))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = SFU_BOOT_SM_InstallNewUserFw &rArr; SFU_IMG_CheckCandidateMetadata &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_TriggerImageInstallation
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateMetadata
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_CheckCandidateImage
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SFU_BOOT_SM_RebootStateMachine</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sfu_boot.o(i.SFU_BOOT_SM_RebootStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFU_BOOT_SM_RebootStateMachine &rArr; SFU_BOOT_ForceReboot &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_ForceReboot
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_DeInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>SFU_BOOT_SM_RollbackPrevUserFw</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sfu_boot.o(i.SFU_BOOT_SM_RollbackPrevUserFw))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = SFU_BOOT_SM_RollbackPrevUserFw &rArr; SFU_IMG_TriggerRecoveryProcedure &rArr; SFU_IMG_Recover &rArr; RecoverBinary &rArr; RecopyFlash &rArr; SFU_LL_FLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_TriggerRecoveryProcedure
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>SFU_BOOT_SM_VerifyUserFwSignature</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sfu_boot.o(i.SFU_BOOT_SM_VerifyUserFwSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = SFU_BOOT_SM_VerifyUserFwSignature &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyActiveImgMetadata
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_VerifyActiveImg
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfu_boot.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>SFU_BOOT_SetLastExecStatus</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, sfu_boot.o(i.SFU_BOOT_SetLastExecStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SFU_BOOT_SetLastExecStatus &rArr; SE_INFO_WriteBootInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_WriteBootInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_INFO_ReadBootInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_RunSecureBootService
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_ExecuteUserFw
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_BOOT_SM_CheckStatusOnReset
</UL>

<P><STRONG><a name="[145]"></a>SFU_LOADER_VerifyFwHeader</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sfu_loader.o(i.SFU_LOADER_VerifyFwHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = SFU_LOADER_VerifyFwHeader &rArr; SFU_IMG_HasValidActiveFirmware &rArr; SFU_IMG_VerifyActiveImg &rArr; SFU_IMG_VerifyFwSignature &rArr; VerifyTagScatter &rArr; SFU_LL_FLASH_Read &rArr; SE_SFU_IMG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_VerifyFwRawHeaderTag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_HasValidActiveFirmware
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_IMG_GetActiveFwVersion
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_COM_YMODEM_DataPktRxCpltCallback
</UL>

<P><STRONG><a name="[f4]"></a>I2C2_MspDeInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l496g_discovery.o(i.I2C2_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>

<P><STRONG><a name="[f6]"></a>I2C2_MspInit</STRONG> (Thumb, 166 bytes, Stack size 176 bytes, stm32l496g_discovery.o(i.I2C2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[f9]"></a>I2C2_ReadBuffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stm32l496g_discovery.o(i.I2C2_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C2_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ReadMultiple
</UL>

<P><STRONG><a name="[fa]"></a>I2C2_ReadData</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.I2C2_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>

<P><STRONG><a name="[ca]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[cb]"></a>FLASH_Program_Fast</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[de]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[bd]"></a>CRC_Handle_16</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32l4xx_hal_crc.o(i.CRC_Handle_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Handle_16
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
</UL>

<P><STRONG><a name="[bc]"></a>CRC_Handle_8</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l4xx_hal_crc.o(i.CRC_Handle_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Handle_8
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
</UL>

<P><STRONG><a name="[c2]"></a>FLASH_MassErase</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[c6]"></a>FLASH_OB_GetPCROP</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_GetPCROP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_OB_GetPCROP
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[b5]"></a>FLASH_OB_PCROPConfig</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_PCROPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_PCROPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[b7]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_UserConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[b8]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_WRPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_WRPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[fc]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[fb]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[d3]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d7]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[d4]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d1]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>

<P><STRONG><a name="[d5]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d8]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[e0]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e1]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e5]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[16b]"></a>SFU_LL_SECU_CheckFlashConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sfu_low_level_security.o(i.SFU_LL_SECU_CheckFlashConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_SECU_CheckApplyStaticProtections
</UL>

<P><STRONG><a name="[163]"></a>SFU_LL_FLASH_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sfu_low_level_flash.o(i.SFU_LL_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SFU_LL_FLASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFU_LL_FLASH_Erase_Size
</UL>

<P><STRONG><a name="[181]"></a>mfxstm32l152_GetInstance</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_WakeUp
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[17c]"></a>mfxstm32l152_reg24_setPinValue</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, mfxstm32l152.o(i.mfxstm32l152_reg24_setPinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_WritePin
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqTypeMode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqEvtMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_InitPin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnablePinIT
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_DisablePinIT
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[177]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
