<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L496G-Discovery\Exe\STM32L496G-Discovery_Azure.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L496G-Discovery\Exe\STM32L496G-Discovery_Azure.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Tue Jan 28 13:57:11 2020
<BR><P>
<H3>Maximum Stack Usage =       5280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MainThread &rArr; platform_init &rArr; setRTCTimeDateFromNetwork &rArr; net_connect &rArr; net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[66]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[2cc]">MultiTree_Destroy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cc]">MultiTree_Destroy</a><BR>
 <LI><a href="#[2ca]">MultiTree_AddLeaf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ca]">MultiTree_AddLeaf</a><BR>
 <LI><a href="#[2cb]">JSONEncoder_EncodeTree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cb]">JSONEncoder_EncodeTree</a><BR>
 <LI><a href="#[4e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">BusFault_Handler</a><BR>
 <LI><a href="#[4c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">HardFault_Handler</a><BR>
 <LI><a href="#[4f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">UsageFault_Handler</a><BR>
 <LI><a href="#[74f]">iothub_security_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66d]">prov_dev_security_init</a><BR>
 <LI><a href="#[388]">Destroy_AGENT_DATA_TYPE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[388]">Destroy_AGENT_DATA_TYPE</a><BR>
 <LI><a href="#[3b4]">Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b4]">Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</a><BR>
 <LI><a href="#[3d8]">json_value_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d8]">json_value_free</a><BR>
 <LI><a href="#[760]">json_serialize_to_buffer_r</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[760]">json_serialize_to_buffer_r</a><BR>
 <LI><a href="#[913]">parse_object_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75e]">parse_value</a><BR>
 <LI><a href="#[90e]">parse_array_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75e]">parse_value</a><BR>
 <LI><a href="#[3d9]">json_object_dotset_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d9]">json_object_dotset_value</a><BR>
 <LI><a href="#[38e]">FindReportedProperty</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38e]">FindReportedProperty</a><BR>
 <LI><a href="#[384]">FindValue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[384]">FindValue</a><BR>
 <LI><a href="#[36a]">initializeDesiredProperties</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36a]">initializeDesiredProperties</a><BR>
 <LI><a href="#[42d]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42d]">Error_Handler</a><BR>
 <LI><a href="#[2e0]">BSP_ErrorHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e0]">BSP_ErrorHandler</a><BR>
 <LI><a href="#[731]">mbedtls_cipher_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[784]">mbedtls_gcm_update</a><BR>
 <LI><a href="#[560]">ParseValue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[538]">ParseObject</a><BR>
 <LI><a href="#[539]">ParseArray</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[560]">ParseValue</a><BR>
 <LI><a href="#[3f1]">DecodeValueFromNode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f1]">DecodeValueFromNode</a><BR>
 <LI><a href="#[69d]">com_sendto_ip_modem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69c]">com_send_ip_modem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[66]">ADC1_2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[83]">ADC3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[223]">ATCoreTaskBody</a> from at_core.o(i.ATCoreTaskBody) referenced from at_core.o(.constdata)
 <LI><a href="#[ee]">ATCustom_BG96_analyzeCmd</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_analyzeCmd) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[ef]">ATCustom_BG96_analyzeParam</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_analyzeParam) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[eb]">ATCustom_BG96_checkEndOfMsgCallback</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_checkEndOfMsgCallback) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[ed]">ATCustom_BG96_extractElement</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_extractElement) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[ec]">ATCustom_BG96_getCmd</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_getCmd) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[f3]">ATCustom_BG96_get_error</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_get_error) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[f1]">ATCustom_BG96_get_rsp</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_get_rsp) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[f2]">ATCustom_BG96_get_urc</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_get_urc) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[ea]">ATCustom_BG96_init</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_init) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[f0]">ATCustom_BG96_terminateCmd</a> from at_custom_modem_specific_bg96.o(i.ATCustom_BG96_terminateCmd) referenced from at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
 <LI><a href="#[c4]">AgentDataTypes_ToString</a> from agenttypesystem.o(i.AgentDataTypes_ToString) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[c4]">AgentDataTypes_ToString</a> from agenttypesystem.o(i.AgentDataTypes_ToString) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[4e]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[68]">CAN1_RX0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[69]">CAN1_RX1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6a]">CAN1_SCE_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[67]">CAN1_TX_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[aa]">CAN2_RX0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[ab]">CAN2_RX1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[ac]">CAN2_SCE_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a9]">CAN2_TX_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[bf]">CELLULAR_idle_event_notif</a> from cellular_service.o(i.CELLULAR_idle_event_notif) referenced from cellular_service.o(i.CS_init)
 <LI><a href="#[be]">CELLULAR_urc_notif</a> from cellular_service.o(i.CELLULAR_urc_notif) referenced from cellular_service.o(i.CS_init)
 <LI><a href="#[94]">COMP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a5]">CRS_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[229]">CST_cellular_service_task</a> from cellular_service_task.o(i.CST_cellular_service_task) referenced from cellular_service_task.o(.constdata)
 <LI><a href="#[228]">CST_fota_timer_callback</a> from cellular_service_task.o(i.CST_fota_timer_callback) referenced from cellular_service_task.o(.constdata)
 <LI><a href="#[bc]">CST_location_info_callback</a> from cellular_service_task.o(i.CST_location_info_callback) referenced from cellular_service_task.o(i.CST_init_modem_mngt)
 <LI><a href="#[ba]">CST_modem_event_callback</a> from cellular_service_task.o(i.CST_modem_event_callback) referenced from cellular_service_task.o(i.CST_cellular_service_task)
 <LI><a href="#[bb]">CST_network_reg_callback</a> from cellular_service_task.o(i.CST_network_reg_callback) referenced from cellular_service_task.o(i.CST_init_modem_mngt)
 <LI><a href="#[226]">CST_network_status_timer_callback</a> from cellular_service_task.o(i.CST_network_status_timer_callback) referenced from cellular_service_task.o(.constdata)
 <LI><a href="#[b9]">CST_notif_cb</a> from cellular_service_task.o(i.CST_notif_cb) referenced from cellular_service_task.o(i.CST_cellular_service_start)
 <LI><a href="#[225]">CST_pdn_activate_retry_timer_callback</a> from cellular_service_task.o(i.CST_pdn_activate_retry_timer_callback) referenced from cellular_service_task.o(.constdata)
 <LI><a href="#[bd]">CST_pdn_event_callback</a> from cellular_service_task.o(i.CST_pdn_event_callback) referenced from cellular_service_task.o(i.CST_modem_activate_pdn)
 <LI><a href="#[224]">CST_polling_timer_callback</a> from cellular_service_task.o(i.CST_polling_timer_callback) referenced from cellular_service_task.o(.constdata)
 <LI><a href="#[227]">CST_register_retry_timer_callback</a> from cellular_service_task.o(i.CST_register_retry_timer_callback) referenced from cellular_service_task.o(.constdata)
 <LI><a href="#[c1]">CodeFirst_InvokeAction</a> from codefirst.o(i.CodeFirst_InvokeAction) referenced from codefirst.o(i.CodeFirst_CreateDevice)
 <LI><a href="#[c0]">CodeFirst_InvokeMethod</a> from codefirst.o(i.CodeFirst_InvokeMethod) referenced from codefirst.o(i.CodeFirst_CreateDevice)
 <LI><a href="#[172]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tHumidity</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tHumidity) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[186]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[173]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tPressure</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tPressure) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[187]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[171]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTemperature</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTemperature) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[175]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[176]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[177]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[17f]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[16f]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdeviceId</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdeviceId) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[178]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[179]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[17a]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[170]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[17b]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[17c]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[17d]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[174]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[17e]">Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts</a> from azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[a8]">DCMI_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[91]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[92]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[93]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7e]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[60]">DMA1_Channel2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[61]">DMA1_Channel3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[62]">DMA1_Channel4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[63]">DMA1_Channel5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[64]">DMA1_Channel6_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[65]">DMA1_Channel7_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[ad]">DMA2D_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8c]">DMA2_Channel1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8d]">DMA2_Channel2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8e]">DMA2_Channel3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8f]">DMA2_Channel4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[90]">DMA2_Channel5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[98]">DMA2_Channel6_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[99]">DMA2_Channel7_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[fe]">DPSRegistrationStatusCallBack</a> from azurexcubesample.o(i.DPSRegistrationStatusCallBack) referenced from azurexcubesample.o(i.cloud_run)
 <LI><a href="#[51]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[13e]">DebugPrint</a> from net_mbedtls.o(i.DebugPrint) referenced from net_mbedtls.o(i.net_mbedtls_start)
 <LI><a href="#[184]">DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</a> from azurexcubesample.o(i.DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[183]">DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</a> from azurexcubesample.o(i.DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[c8]">DeviceInvokeAction</a> from iotdevice.o(i.DeviceInvokeAction) referenced from iotdevice.o(i.Device_Create)
 <LI><a href="#[c7]">DeviceInvokeMethod</a> from iotdevice.o(i.DeviceInvokeMethod) referenced from iotdevice.o(i.Device_Create)
 <LI><a href="#[149]">DeviceMethodCallback</a> from azurexcubesample.o(i.DeviceMethodCallback) referenced from azurexcubesample.o(i.setAllCallbacks)
 <LI><a href="#[14b]">DeviceTwinCallback</a> from azurexcubesample.o(i.DeviceTwinCallback) referenced from azurexcubesample.o(i.setAllCallbacks)
 <LI><a href="#[5a]">EXTI0_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7c]">EXTI15_10_IRQHandler</a> from stm32l4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5b]">EXTI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5c]">EXTI2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5d]">EXTI3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[5e]">EXTI4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6b]">EXTI9_5_IRQHandler</a> from stm32l4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[58]">FLASH_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[84]">FMC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a4]">FPU_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[185]">FromAGENT_DATA_TYPE_int</a> from azurexcubesample.o(i.FromAGENT_DATA_TYPE_int) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[4c]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[181]">HelloWRAPPER</a> from azurexcubesample.o(i.HelloWRAPPER) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[74]">I2C1_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[73]">I2C1_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[76]">I2C2_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[75]">I2C2_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[9d]">I2C3_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[9c]">I2C3_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a7]">I2C4_ER_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a6]">I2C4_EV_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[ff]">IOTHubDPSRegisterDeviceCallBack</a> from azurexcubesample.o(i.IOTHubDPSRegisterDeviceCallBack) referenced from azurexcubesample.o(i.cloud_run)
 <LI><a href="#[10e]">IoTHubClientCore_LL_ConnectionStatusCallBack</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_ConnectionStatusCallBack) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[112]">IoTHubClientCore_LL_DeviceMethodComplete</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_DeviceMethodComplete) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[10f]">IoTHubClientCore_LL_GetProductInfo</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_GetProductInfo) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[111]">IoTHubClientCore_LL_MessageCallback</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_MessageCallback) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[110]">IoTHubClientCore_LL_MessageCallbackFromInput</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_MessageCallbackFromInput) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[10d]">IoTHubClientCore_LL_ReportedStateComplete</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_ReportedStateComplete) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[10c]">IoTHubClientCore_LL_RetrievePropertyComplete</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_RetrievePropertyComplete) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[10b]">IoTHubClientCore_LL_SendComplete</a> from iothub_client_core_ll.o(i.IoTHubClientCore_LL_SendComplete) referenced from iothub_client_core_ll.o(i.initialize_iothub_client)
 <LI><a href="#[2d]">IoTHubTransportMqtt_Create</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[2e]">IoTHubTransportMqtt_Destroy</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Destroy) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[27]">IoTHubTransportMqtt_DeviceMethod_Response</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_DeviceMethod_Response) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[33]">IoTHubTransportMqtt_DoWork</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_DoWork) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[2b]">IoTHubTransportMqtt_GetHostname</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetHostname) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[35]">IoTHubTransportMqtt_GetSendStatus</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetSendStatus) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[39]">IoTHubTransportMqtt_GetTwinAsync</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetTwinAsync) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[2a]">IoTHubTransportMqtt_ProcessItem</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_ProcessItem) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[2f]">IoTHubTransportMqtt_Register</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Register) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[24]">IoTHubTransportMqtt_SendMessageDisposition</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SendMessageDisposition) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[2c]">IoTHubTransportMqtt_SetOption</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetOption) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[34]">IoTHubTransportMqtt_SetRetryPolicy</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetRetryPolicy) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[31]">IoTHubTransportMqtt_Subscribe</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[25]">IoTHubTransportMqtt_Subscribe_DeviceMethod</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceMethod) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[28]">IoTHubTransportMqtt_Subscribe_DeviceTwin</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceTwin) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[30]">IoTHubTransportMqtt_Unregister</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unregister) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[32]">IoTHubTransportMqtt_Unsubscribe</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[26]">IoTHubTransportMqtt_Unsubscribe_DeviceMethod</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceMethod) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[29]">IoTHubTransportMqtt_Unsubscribe_DeviceTwin</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceTwin) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[38]">IotHubTransportMqtt_SetCallbackContext</a> from iothubtransportmqtt.o(i.IotHubTransportMqtt_SetCallbackContext) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[36]">IotHubTransportMqtt_Subscribe_InputQueue</a> from iothubtransportmqtt.o(i.IotHubTransportMqtt_Subscribe_InputQueue) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[37]">IotHubTransportMqtt_Unsubscribe_InputQueue</a> from iothubtransportmqtt.o(i.IotHubTransportMqtt_Unsubscribe_InputQueue) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[a2]">LCD_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[95]">LPTIM1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[96]">LPTIM2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[9a]">LPUART1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[182]">LedToggleWRAPPER</a> from azurexcubesample.o(i.LedToggleWRAPPER) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[fc]">MQTT_Protocol</a> from iothubtransportmqtt.o(i.MQTT_Protocol) referenced from azurexcubesample.o(i.cloud_run)
 <LI><a href="#[fc]">MQTT_Protocol</a> from iothubtransportmqtt.o(i.MQTT_Protocol) referenced from azurexcubesample.o(i.directIoTHubRegistration)
 <LI><a href="#[188]">MainThread</a> from main.o(i.MainThread) referenced from main.o(.constdata)
 <LI><a href="#[4d]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[14a]">MessageCallback</a> from azurexcubesample.o(i.MessageCallback) referenced from azurexcubesample.o(i.setAllCallbacks)
 <LI><a href="#[4b]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[d7]">NOPCloneFunction</a> from jsondecoder.o(i.NOPCloneFunction) referenced from jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
 <LI><a href="#[b8]">NoCloneFunction</a> from agenttypesystem.o(i.NoCloneFunction) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[c3]">NoCloneFunction</a> from datamarshaller.o(i.NoCloneFunction) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[b7]">NoFreeFunction</a> from agenttypesystem.o(i.NoFreeFunction) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[c2]">NoFreeFunction</a> from datamarshaller.o(i.NoFreeFunction) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[d6]">NoFreeFunction</a> from jsondecoder.o(i.NoFreeFunction) referenced from jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
 <LI><a href="#[97]">OTG_FS_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[55]">PVD_PVM_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[52]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[fd]">Prov_Device_MQTT_Protocol</a> from prov_transport_mqtt_client.o(i.Prov_Device_MQTT_Protocol) referenced from azurexcubesample.o(i.cloud_run)
 <LI><a href="#[9b]">QUADSPI_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[59]">RCC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a3]">RNG_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7d]">RTC_Alarm_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[57]">RTC_WKUP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[cf]">RXFIFO_writeCharacter</a> from ipc_rxfifo.o(i.RXFIFO_writeCharacter) referenced from ipc_uart.o(i.IPC_open_uart)
 <LI><a href="#[180]">RebootWRAPPER</a> from azurexcubesample.o(i.RebootWRAPPER) referenced from azurexcubesample.o(.constdata)
 <LI><a href="#[4a]">Reset_Handler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[9e]">SAI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[9f]">SAI2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[85]">SDMMC1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[77]">SPI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[78]">SPI2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[87]">SPI3_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[50]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a0]">SWPMI1_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[e1]">SchemaHandlesMatch</a> from schema.o(i.SchemaHandlesMatch) referenced from schema.o(i.Schema_Destroy)
 <LI><a href="#[e4]">SchemaNamespacesMatch</a> from schema.o(i.SchemaNamespacesMatch) referenced from schema.o(i.Schema_GetSchemaByNamespace)
 <LI><a href="#[100]">SendConfirmationCallback</a> from azurexcubesample.o(i.SendConfirmationCallback) referenced from azurexcubesample.o(i.cloud_run)
 <LI><a href="#[f4]">SysCtrl_BG96_getDeviceDescriptor</a> from sysctrl_specific_bg96.o(i.SysCtrl_BG96_getDeviceDescriptor) referenced from at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
 <LI><a href="#[f6]">SysCtrl_BG96_power_off</a> from sysctrl_specific_bg96.o(i.SysCtrl_BG96_power_off) referenced from at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
 <LI><a href="#[f5]">SysCtrl_BG96_power_on</a> from sysctrl_specific_bg96.o(i.SysCtrl_BG96_power_on) referenced from at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
 <LI><a href="#[f7]">SysCtrl_BG96_reset</a> from sysctrl_specific_bg96.o(i.SysCtrl_BG96_reset) referenced from at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
 <LI><a href="#[f8]">SysCtrl_BG96_sim_select</a> from sysctrl_specific_bg96.o(i.SysCtrl_BG96_sim_select) referenced from at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
 <LI><a href="#[53]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[af]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l496xx.o(.text)
 <LI><a href="#[56]">TAMP_STAMP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6c]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6f]">TIM1_CC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6e]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[6d]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[70]">TIM2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[71]">TIM3_IRQHandler</a> from stm32l4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[72]">TIM4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[86]">TIM5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8a]">TIM6_DAC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[8b]">TIM7_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7f]">TIM8_BRK_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[82]">TIM8_CC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[81]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[80]">TIM8_UP_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[a1]">TSC_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[88]">UART4_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[89]">UART5_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[ca]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[cc]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[cb]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[ce]">UART_TxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[cd]">UART_TxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[79]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7a]">USART2_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[7b]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[4f]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[d4]">ValidateAsciiCharactersFilter</a> from iothub_message.o(i.ValidateAsciiCharactersFilter) referenced from iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
 <LI><a href="#[54]">WWDG_IRQHandler</a> from startup_stm32l496xx.o(.text) referenced from startup_stm32l496xx.o(RESET)
 <LI><a href="#[b0]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l496xx.o(.text)
 <LI><a href="#[b2]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[b3]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[b1]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[e6]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[e6]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[e7]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1de]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1e1]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1e2]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1e0]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1df]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[48]">calloc</a> from net_os.o(i.calloc) referenced 2 times from platform.o(.data)
 <LI><a href="#[222]">cellif_input</a> from net_cellular.o(i.cellif_input) referenced from net_cellular.o(.constdata)
 <LI><a href="#[7]">cellular_net_driver</a> from net_cellular.o(i.cellular_net_driver) referenced 2 times from set_credentials.o(.data)
 <LI><a href="#[f9]">cellular_notif_cb</a> from net_cellular.o(i.cellular_notif_cb) referenced from net_cellular.o(i.cellif_input)
 <LI><a href="#[189]">cloud_run</a> from azurexcubesample.o(i.cloud_run) referenced from main.o(.constdata)
 <LI><a href="#[102]">com_ip_modem_closing_cb</a> from com_sockets_ip_modem.o(i.com_ip_modem_closing_cb) referenced from com_sockets_ip_modem.o(i.com_socket_ip_modem)
 <LI><a href="#[103]">com_ip_modem_data_ready_cb</a> from com_sockets_ip_modem.o(i.com_ip_modem_data_ready_cb) referenced from com_sockets_ip_modem.o(i.com_socket_ip_modem)
 <LI><a href="#[101]">com_ip_modem_ping_rsp_cb</a> from com_sockets_ip_modem.o(i.com_ip_modem_ping_rsp_cb) referenced from com_sockets_ip_modem.o(i.com_ping_process_ip_modem)
 <LI><a href="#[104]">com_socket_datacache_cb</a> from com_sockets_ip_modem.o(i.com_socket_datacache_cb) referenced from com_sockets_ip_modem.o(i.com_start_ip_modem)
 <LI><a href="#[23]">consolelogger_log</a> from consolelogger.o(i.consolelogger_log) referenced 2 times from xlogging.o(.data)
 <LI><a href="#[22b]">dc_CtrlEventStartTask</a> from dc_control.o(i.dc_CtrlEventStartTask) referenced from dc_control.o(.constdata)
 <LI><a href="#[22a]">dc_ctrl_osTimerDebounceCallback</a> from dc_control.o(i.dc_ctrl_osTimerDebounceCallback) referenced from dc_control.o(.constdata)
 <LI><a href="#[105]">delete_event_callback</a> from iothub_client_core_ll.o(i.delete_event_callback) referenced from iothub_client_core_ll.o(i.delete_event_callback_list)
 <LI><a href="#[dd]">desiredPropertyExists</a> from schema.o(i.desiredPropertyExists) referenced from schema.o(i.Schema_AddModelDesiredProperty)
 <LI><a href="#[c6]">deviceTwinReportedStateCallback</a> from azurexcubesample.o(i.deviceTwinReportedStateCallback) referenced from azurexcubesample.o(i.DeviceTwinCallback)
 <LI><a href="#[c6]">deviceTwinReportedStateCallback</a> from azurexcubesample.o(i.deviceTwinReportedStateCallback) referenced from azurexcubesample.o(i.LedToggle)
 <LI><a href="#[c6]">deviceTwinReportedStateCallback</a> from azurexcubesample.o(i.deviceTwinReportedStateCallback) referenced from azurexcubesample.o(i.cloud_run)
 <LI><a href="#[220]">ecdsa_alloc_wrap</a> from pk_wrap.o(i.ecdsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21d]">ecdsa_can_do</a> from pk_wrap.o(i.ecdsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[221]">ecdsa_free_wrap</a> from pk_wrap.o(i.ecdsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21f]">ecdsa_sign_wrap</a> from pk_wrap.o(i.ecdsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21e]">ecdsa_verify_wrap</a> from pk_wrap.o(i.ecdsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[219]">eckey_alloc_wrap</a> from pk_wrap.o(i.eckey_alloc_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[215]">eckey_can_do</a> from pk_wrap.o(i.eckey_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[218]">eckey_check_pair</a> from pk_wrap.o(i.eckey_check_pair) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[21b]">eckey_debug</a> from pk_wrap.o(i.eckey_debug) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[21a]">eckey_free_wrap</a> from pk_wrap.o(i.eckey_free_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[214]">eckey_get_bitlen</a> from pk_wrap.o(i.eckey_get_bitlen) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[217]">eckey_sign_wrap</a> from pk_wrap.o(i.eckey_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[216]">eckey_verify_wrap</a> from pk_wrap.o(i.eckey_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[21c]">eckeydh_can_do</a> from pk_wrap.o(i.eckeydh_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[113]">ecp_mod_p256</a> from ecp_curves.o(i.ecp_mod_p256) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[115]">ecp_mod_p256k1</a> from ecp_curves.o(i.ecp_mod_p256k1) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[114]">ecp_mod_p384</a> from ecp_curves.o(i.ecp_mod_p384) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[1ad]">fCmdBuild_ATD_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_ATD_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1ae]">fCmdBuild_ATE</a> from at_modem_signalling.o(i.fCmdBuild_ATE) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1af]">fCmdBuild_ATV</a> from at_modem_signalling.o(i.fCmdBuild_ATV) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b0]">fCmdBuild_ATX</a> from at_modem_signalling.o(i.fCmdBuild_ATX) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b5]">fCmdBuild_AT_AND_D</a> from at_modem_signalling.o(i.fCmdBuild_AT_AND_D) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c7]">fCmdBuild_CEDRXS_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_CEDRXS_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a1]">fCmdBuild_CEREG</a> from at_modem_signalling.o(i.fCmdBuild_CEREG) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[198]">fCmdBuild_CFUN</a> from at_modem_signalling.o(i.fCmdBuild_CFUN) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a9]">fCmdBuild_CGACT</a> from at_modem_signalling.o(i.fCmdBuild_CGACT) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[19d]">fCmdBuild_CGATT</a> from at_modem_signalling.o(i.fCmdBuild_CGATT) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1aa]">fCmdBuild_CGDATA</a> from at_modem_signalling.o(i.fCmdBuild_CGDATA) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a8]">fCmdBuild_CGDCONT_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_CGDCONT_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1ab]">fCmdBuild_CGEREP</a> from at_modem_signalling.o(i.fCmdBuild_CGEREP) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[19f]">fCmdBuild_CGPADDR</a> from at_modem_signalling.o(i.fCmdBuild_CGPADDR) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a5]">fCmdBuild_CGREG</a> from at_modem_signalling.o(i.fCmdBuild_CGREG) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[190]">fCmdBuild_CGSN_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_CGSN_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[195]">fCmdBuild_CMEE</a> from at_modem_signalling.o(i.fCmdBuild_CMEE) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[19a]">fCmdBuild_COPS</a> from at_modem_signalling.o(i.fCmdBuild_COPS) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[196]">fCmdBuild_CPIN</a> from at_modem_signalling.o(i.fCmdBuild_CPIN) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c6]">fCmdBuild_CPSMS_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_CPSMS_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a3]">fCmdBuild_CREG</a> from at_modem_signalling.o(i.fCmdBuild_CREG) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b6]">fCmdBuild_DIRECT_CMD</a> from at_modem_signalling.o(i.fCmdBuild_DIRECT_CMD) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b1]">fCmdBuild_ESCAPE_CMD</a> from at_modem_signalling.o(i.fCmdBuild_ESCAPE_CMD) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b4]">fCmdBuild_IFC</a> from at_modem_signalling.o(i.fCmdBuild_IFC) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b2]">fCmdBuild_IPR</a> from at_modem_signalling.o(i.fCmdBuild_IPR) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[e9]">fCmdBuild_NoParams</a> from at_modem_signalling.o(i.fCmdBuild_NoParams) referenced 37 times from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[e9]">fCmdBuild_NoParams</a> from at_modem_signalling.o(i.fCmdBuild_NoParams) referenced from at_modem_common.o(i.atcm_get_CmdBuildFunc)
 <LI><a href="#[1b9]">fCmdBuild_QCFG_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_QCFG_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c8]">fCmdBuild_QENG_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_QENG_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c9]">fCmdBuild_QIACT_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QIACT_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c1]">fCmdBuild_QICFG_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_QICFG_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1cd]">fCmdBuild_QICLOSE_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QICLOSE_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1bc]">fCmdBuild_QICSGP_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_QICSGP_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1be]">fCmdBuild_QIDNSCFG_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QIDNSCFG_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1bf]">fCmdBuild_QIDNSGIP_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QIDNSGIP_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c2]">fCmdBuild_QINDCFG_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_QINDCFG_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1cb]">fCmdBuild_QIOPEN_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QIOPEN_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1d0]">fCmdBuild_QIRD_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QIRD_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1ce]">fCmdBuild_QISEND_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QISEND_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1cf]">fCmdBuild_QISEND_WRITE_DATA_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QISEND_WRITE_DATA_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1d2]">fCmdBuild_QISTATE_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QISTATE_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1d4]">fCmdBuild_QPING_BG96</a> from at_custom_modem_socket_bg96.o(i.fCmdBuild_QPING_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b8]">fCmdBuild_QPOWD_BG96</a> from at_custom_modem_signalling_bg96.o(i.fCmdBuild_QPOWD_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[194]">fRspAnalyze_CEER</a> from at_modem_signalling.o(i.fRspAnalyze_CEER) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a2]">fRspAnalyze_CEREG</a> from at_modem_signalling.o(i.fRspAnalyze_CEREG) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[199]">fRspAnalyze_CFUN_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_CFUN_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[19e]">fRspAnalyze_CGATT</a> from at_modem_signalling.o(i.fRspAnalyze_CGATT) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1ac]">fRspAnalyze_CGEV</a> from at_modem_signalling.o(i.fRspAnalyze_CGEV) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[18d]">fRspAnalyze_CGMI</a> from at_modem_signalling.o(i.fRspAnalyze_CGMI) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[18e]">fRspAnalyze_CGMM</a> from at_modem_signalling.o(i.fRspAnalyze_CGMM) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[18f]">fRspAnalyze_CGMR</a> from at_modem_signalling.o(i.fRspAnalyze_CGMR) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a0]">fRspAnalyze_CGPADDR</a> from at_modem_signalling.o(i.fRspAnalyze_CGPADDR) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a6]">fRspAnalyze_CGREG</a> from at_modem_signalling.o(i.fRspAnalyze_CGREG) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[191]">fRspAnalyze_CGSN</a> from at_modem_signalling.o(i.fRspAnalyze_CGSN) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[193]">fRspAnalyze_CIMI</a> from at_modem_signalling.o(i.fRspAnalyze_CIMI) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[19c]">fRspAnalyze_CNUM</a> from at_modem_signalling.o(i.fRspAnalyze_CNUM) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[19b]">fRspAnalyze_COPS</a> from at_modem_signalling.o(i.fRspAnalyze_COPS) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[197]">fRspAnalyze_CPIN_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_CPIN_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a4]">fRspAnalyze_CREG</a> from at_modem_signalling.o(i.fRspAnalyze_CREG) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1a7]">fRspAnalyze_CSQ</a> from at_modem_signalling.o(i.fRspAnalyze_CSQ) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[18c]">fRspAnalyze_CmsErr</a> from at_modem_signalling.o(i.fRspAnalyze_CmsErr) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b7]">fRspAnalyze_DIRECT_CMD</a> from at_modem_signalling.o(i.fRspAnalyze_DIRECT_CMD) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[18b]">fRspAnalyze_Error_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_Error_BG96) referenced 2 times from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[192]">fRspAnalyze_GSN</a> from at_modem_signalling.o(i.fRspAnalyze_GSN) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1b3]">fRspAnalyze_IPR</a> from at_modem_signalling.o(i.fRspAnalyze_IPR) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[e8]">fRspAnalyze_None</a> from at_modem_signalling.o(i.fRspAnalyze_None) referenced 43 times from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[e8]">fRspAnalyze_None</a> from at_modem_signalling.o(i.fRspAnalyze_None) referenced from at_modem_common.o(i.atcm_get_CmdAnalyzeFunc)
 <LI><a href="#[1c0]">fRspAnalyze_QCCID_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QCCID_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1ba]">fRspAnalyze_QCFG_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QCFG_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c5]">fRspAnalyze_QCSQ_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QCSQ_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1ca]">fRspAnalyze_QIACT_BG96</a> from at_custom_modem_socket_bg96.o(i.fRspAnalyze_QIACT_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c3]">fRspAnalyze_QINDCFG_BG96</a> from at_custom_modem_socket_bg96.o(i.fRspAnalyze_QINDCFG_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1bb]">fRspAnalyze_QIND_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QIND_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1c4]">fRspAnalyze_QINISTAT_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QINISTAT_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1cc]">fRspAnalyze_QIOPEN_BG96</a> from at_custom_modem_socket_bg96.o(i.fRspAnalyze_QIOPEN_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1d1]">fRspAnalyze_QIRD_BG96</a> from at_custom_modem_socket_bg96.o(i.fRspAnalyze_QIRD_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1d3]">fRspAnalyze_QISTATE_BG96</a> from at_custom_modem_socket_bg96.o(i.fRspAnalyze_QISTATE_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1bd]">fRspAnalyze_QIURC_BG96</a> from at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QIURC_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[1d5]">fRspAnalyze_QPING_BG96</a> from at_custom_modem_socket_bg96.o(i.fRspAnalyze_QPING_BG96) referenced from at_custom_modem_specific_bg96.o(.constdata)
 <LI><a href="#[e5]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[e5]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[3b]">free</a> from net_os.o(i.free) referenced 4 times from parson.o(.data)
 <LI><a href="#[1e3]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(i.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[1e4]">gcm_ctx_alloc</a> from cipher_wrap.o(i.gcm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[1e5]">gcm_ctx_free</a> from cipher_wrap.o(i.gcm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[d5]">getIoTransportProvider</a> from iothubtransportmqtt.o(i.getIoTransportProvider) referenced from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create)
 <LI><a href="#[18a]">hnet_notify</a> from cloud.o(i.hnet_notify) referenced from cloud.o(.constdata)
 <LI><a href="#[15c]">hsm_client_riot_create</a> from hsm_client_riot_stm32cube.o(i.hsm_client_riot_create) referenced from hsm_client_riot_stm32cube.o(.constdata)
 <LI><a href="#[15d]">hsm_client_riot_destroy</a> from hsm_client_riot_stm32cube.o(i.hsm_client_riot_destroy) referenced from hsm_client_riot_stm32cube.o(.constdata)
 <LI><a href="#[15f]">hsm_client_riot_get_alias_key</a> from hsm_client_riot_stm32cube.o(i.hsm_client_riot_get_alias_key) referenced from hsm_client_riot_stm32cube.o(.constdata)
 <LI><a href="#[15e]">hsm_client_riot_get_certificate</a> from hsm_client_riot_stm32cube.o(i.hsm_client_riot_get_certificate) referenced from hsm_client_riot_stm32cube.o(.constdata)
 <LI><a href="#[160]">hsm_client_riot_get_common_name</a> from hsm_client_riot_stm32cube.o(i.hsm_client_riot_get_common_name) referenced from hsm_client_riot_stm32cube.o(.constdata)
 <LI><a href="#[1da]">http_proxy_io_close</a> from http_proxy_io.o(i.http_proxy_io_close) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[1d7]">http_proxy_io_create</a> from http_proxy_io.o(i.http_proxy_io_create) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[1d8]">http_proxy_io_destroy</a> from http_proxy_io.o(i.http_proxy_io_destroy) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[1dc]">http_proxy_io_dowork</a> from http_proxy_io.o(i.http_proxy_io_dowork) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[1d9]">http_proxy_io_open</a> from http_proxy_io.o(i.http_proxy_io_open) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[1d6]">http_proxy_io_retrieve_options</a> from http_proxy_io.o(i.http_proxy_io_retrieve_options) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[1db]">http_proxy_io_send</a> from http_proxy_io.o(i.http_proxy_io_send) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[1dd]">http_proxy_io_set_option</a> from http_proxy_io.o(i.http_proxy_io_set_option) referenced from http_proxy_io.o(.constdata)
 <LI><a href="#[d3]">is_event_equal_for_match</a> from iothub_client_core_ll.o(i.is_event_equal_for_match) referenced from iothub_client_core_ll.o(i.IoTHubClientCore_LL_MessageCallbackFromInput)
 <LI><a href="#[b4]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[ae]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3a]">malloc</a> from net_os.o(i.malloc) referenced 2 times from parson.o(.data)
 <LI><a href="#[e2]">matchModelMethod</a> from schema.o(i.matchModelMethod) referenced from schema.o(i.Schema_GetModelMethodByName)
 <LI><a href="#[e3]">matchModelName</a> from schema.o(i.matchModelName) referenced from schema.o(i.Schema_GetModelModelByName)
 <LI><a href="#[106]">mbedtls_hmac_drbg_random</a> from hmac_drbg.o(i.mbedtls_hmac_drbg_random) referenced from ecdsa.o(i.ecdsa_sign_det_restartable)
 <LI><a href="#[1e9]">mbedtls_md5_ret</a> from md5.o(i.mbedtls_md5_ret) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13f]">mbedtls_net_recv</a> from net_mbedtls.o(i.mbedtls_net_recv) referenced from net_mbedtls.o(i.net_mbedtls_start)
 <LI><a href="#[140]">mbedtls_net_send</a> from net_mbedtls.o(i.mbedtls_net_send) referenced from net_mbedtls.o(i.net_mbedtls_start)
 <LI><a href="#[116]">mbedtls_rng_raw</a> from mbedtls_entropy.o(i.mbedtls_rng_raw) referenced from tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[116]">mbedtls_rng_raw</a> from mbedtls_entropy.o(i.mbedtls_rng_raw) referenced from net_mbedtls.o(i.net_mbedtls_start)
 <LI><a href="#[1f1]">mbedtls_sha1_ret</a> from sha1.o(i.mbedtls_sha1_ret) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ec]">md5_clone_wrap</a> from md_wrap.o(i.md5_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ea]">md5_ctx_alloc</a> from md_wrap.o(i.md5_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1eb]">md5_ctx_free</a> from md_wrap.o(i.md5_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e8]">md5_finish_wrap</a> from md_wrap.o(i.md5_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ed]">md5_process_wrap</a> from md_wrap.o(i.md5_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e6]">md5_starts_wrap</a> from md_wrap.o(i.md5_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1e7]">md5_update_wrap</a> from md_wrap.o(i.md5_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[49]">memset</a> from memseta.o(.text) referenced 2 times from platform_util.o(.data)
 <LI><a href="#[e0]">methodExists</a> from schema.o(i.methodExists) referenced from schema.o(i.Schema_CreateModelMethod)
 <LI><a href="#[de]">methodFindArgumentByBame</a> from schema.o(i.methodFindArgumentByBame) referenced from schema.o(i.Schema_AddModelMethodArgument)
 <LI><a href="#[13]">mfxstm32l152_DeInit</a> from mfxstm32l152.o(i.mfxstm32l152_DeInit) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1e]">mfxstm32l152_Error_ClearIT</a> from mfxstm32l152.o(i.mfxstm32l152_Error_ClearIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[20]">mfxstm32l152_Error_DisableIT</a> from mfxstm32l152.o(i.mfxstm32l152_Error_DisableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1d]">mfxstm32l152_Error_EnableIT</a> from mfxstm32l152.o(i.mfxstm32l152_Error_EnableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1f]">mfxstm32l152_Error_GetITStatus</a> from mfxstm32l152.o(i.mfxstm32l152_Error_GetITStatus) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[22]">mfxstm32l152_Error_ReadMsg</a> from mfxstm32l152.o(i.mfxstm32l152_Error_ReadMsg) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[21]">mfxstm32l152_Error_ReadSrc</a> from mfxstm32l152.o(i.mfxstm32l152_Error_ReadSrc) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1a]">mfxstm32l152_IDD_ClearIT</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_ClearIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[17]">mfxstm32l152_IDD_Config</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_Config) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1c]">mfxstm32l152_IDD_DisableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_DisableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[19]">mfxstm32l152_IDD_EnableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_EnableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[1b]">mfxstm32l152_IDD_GetITStatus</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_GetITStatus) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[18]">mfxstm32l152_IDD_GetValue</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_GetValue) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[16]">mfxstm32l152_IDD_Start</a> from mfxstm32l152.o(i.mfxstm32l152_IDD_Start) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[12]">mfxstm32l152_IO_ClearIT</a> from mfxstm32l152.o(i.mfxstm32l152_IO_ClearIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[c]">mfxstm32l152_IO_Config</a> from mfxstm32l152.o(i.mfxstm32l152_IO_Config) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[10]">mfxstm32l152_IO_DisableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IO_DisableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[f]">mfxstm32l152_IO_EnableIT</a> from mfxstm32l152.o(i.mfxstm32l152_IO_EnableIT) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[11]">mfxstm32l152_IO_ITStatus</a> from mfxstm32l152.o(i.mfxstm32l152_IO_ITStatus) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[e]">mfxstm32l152_IO_ReadPin</a> from mfxstm32l152.o(i.mfxstm32l152_IO_ReadPin) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[b]">mfxstm32l152_IO_Start</a> from mfxstm32l152.o(i.mfxstm32l152_IO_Start) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[d]">mfxstm32l152_IO_WritePin</a> from mfxstm32l152.o(i.mfxstm32l152_IO_WritePin) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[8]">mfxstm32l152_Init</a> from mfxstm32l152.o(i.mfxstm32l152_Init) referenced 4 times from mfxstm32l152.o(.data)
 <LI><a href="#[14]">mfxstm32l152_LowPower</a> from mfxstm32l152.o(i.mfxstm32l152_LowPower) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[9]">mfxstm32l152_ReadID</a> from mfxstm32l152.o(i.mfxstm32l152_ReadID) referenced 4 times from mfxstm32l152.o(.data)
 <LI><a href="#[a]">mfxstm32l152_Reset</a> from mfxstm32l152.o(i.mfxstm32l152_Reset) referenced 4 times from mfxstm32l152.o(.data)
 <LI><a href="#[15]">mfxstm32l152_WakeUp</a> from mfxstm32l152.o(i.mfxstm32l152_WakeUp) referenced 2 times from mfxstm32l152.o(.data)
 <LI><a href="#[c9]">mqtt_disconnect_cb</a> from iothubtransport_mqtt_common.o(i.mqtt_disconnect_cb) referenced from iothubtransport_mqtt_common.o(i.DisconnectFromClient)
 <LI><a href="#[d0]">mqtt_error_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_error_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[143]">mqtt_error_callback</a> from prov_transport_mqtt_common.o(i.mqtt_error_callback) referenced from prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_create)
 <LI><a href="#[d2]">mqtt_notification_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_notification_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[145]">mqtt_notification_callback</a> from prov_transport_mqtt_common.o(i.mqtt_notification_callback) referenced from prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_create)
 <LI><a href="#[d1]">mqtt_operation_complete_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_operation_complete_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[144]">mqtt_operation_complete_callback</a> from prov_transport_mqtt_common.o(i.mqtt_operation_complete_callback) referenced from prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_create)
 <LI><a href="#[146]">mqtt_transport_io</a> from prov_transport_mqtt_client.o(i.mqtt_transport_io) referenced from prov_transport_mqtt_client.o(i.prov_transport_mqtt_create)
 <LI><a href="#[b6]">msgReceivedCallback</a> from at_core.o(i.msgReceivedCallback) referenced from at_core.o(i.AT_open)
 <LI><a href="#[b5]">msgSentCallback</a> from at_core.o(i.msgSentCallback) referenced from at_core.o(i.AT_open)
 <LI><a href="#[13d]">net_calloc</a> from net_os.o(i.net_calloc) referenced from net_mbedtls.o(i.net_mbedtls_start)
 <LI><a href="#[12e]">net_cellular_accept</a> from net_cellular.o(i.net_cellular_accept) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[12c]">net_cellular_bind</a> from net_cellular.o(i.net_cellular_bind) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[138]">net_cellular_close</a> from net_cellular.o(i.net_cellular_close) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[12f]">net_cellular_connect</a> from net_cellular.o(i.net_cellular_connect) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[fa]">net_cellular_get_radio_info</a> from net_cellular.o(i.net_cellular_get_radio_info) referenced from net_cellular.o(i.cellular_net_driver)
 <LI><a href="#[137]">net_cellular_getpeername</a> from net_cellular.o(i.net_cellular_getpeername) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[136]">net_cellular_getsockname</a> from net_cellular.o(i.net_cellular_getsockname) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[135]">net_cellular_getsockopt</a> from net_cellular.o(i.net_cellular_getsockopt) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[129]">net_cellular_if_connect</a> from net_cellular.o(i.net_cellular_if_connect) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[126]">net_cellular_if_deinit</a> from net_cellular.o(i.net_cellular_if_deinit) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[12a]">net_cellular_if_disconnect</a> from net_cellular.o(i.net_cellular_if_disconnect) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[13a]">net_cellular_if_gethostbyname</a> from net_cellular.o(i.net_cellular_if_gethostbyname) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[125]">net_cellular_if_init</a> from net_cellular.o(i.net_cellular_if_init) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[127]">net_cellular_if_start</a> from net_cellular.o(i.net_cellular_if_start) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[128]">net_cellular_if_stop</a> from net_cellular.o(i.net_cellular_if_stop) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[12d]">net_cellular_listen</a> from net_cellular.o(i.net_cellular_listen) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[13b]">net_cellular_ping</a> from net_cellular.o(i.net_cellular_ping) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[131]">net_cellular_recv</a> from net_cellular.o(i.net_cellular_recv) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[133]">net_cellular_recvfrom</a> from net_cellular.o(i.net_cellular_recvfrom) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[130]">net_cellular_send</a> from net_cellular.o(i.net_cellular_send) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[132]">net_cellular_sendto</a> from net_cellular.o(i.net_cellular_sendto) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[134]">net_cellular_setsockopt</a> from net_cellular.o(i.net_cellular_setsockopt) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[139]">net_cellular_shutdown</a> from net_cellular.o(i.net_cellular_shutdown) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[12b]">net_cellular_socket</a> from net_cellular.o(i.net_cellular_socket) referenced from net_cellular.o(i.net_cellular_init_class)
 <LI><a href="#[141]">nifman_notif_cb</a> from nifman.o(i.nifman_notif_cb) referenced from nifman.o(i.nifman_start)
 <LI><a href="#[22c]">nifman_thread</a> from nifman.o(i.nifman_thread) referenced from nifman.o(.constdata)
 <LI><a href="#[122]">onBytesReceived</a> from mqtt_client.o(i.onBytesReceived) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[121]">onIoError</a> from mqtt_client.o(i.onIoError) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[123]">onOpenComplete</a> from mqtt_client.o(i.onOpenComplete) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[fb]">on_connection_closed</a> from mqtt_client.o(i.on_connection_closed) referenced from mqtt_client.o(i.close_connection)
 <LI><a href="#[117]">on_io_recv</a> from tlsio_mbedtls.o(i.on_io_recv) referenced from tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[118]">on_io_send</a> from tlsio_mbedtls.o(i.on_io_send) referenced from tlsio_mbedtls.o(i.mbedtls_init)
 <LI><a href="#[d8]">on_transport_error</a> from prov_device_ll_client.o(i.on_transport_error) referenced from prov_device_ll_client.o(i.Prov_Device_LL_Create)
 <LI><a href="#[dc]">on_transport_registration_data</a> from prov_device_ll_client.o(i.on_transport_registration_data) referenced from prov_device_ll_client.o(i.Prov_Device_LL_Register_Device)
 <LI><a href="#[db]">on_transport_status</a> from prov_device_ll_client.o(i.on_transport_status) referenced from prov_device_ll_client.o(i.Prov_Device_LL_Register_Device)
 <LI><a href="#[109]">on_underlying_io_bytes_received</a> from http_proxy_io.o(i.on_underlying_io_bytes_received) referenced from http_proxy_io.o(i.http_proxy_io_open)
 <LI><a href="#[152]">on_underlying_io_bytes_received</a> from tlsio_mbedtls.o(i.on_underlying_io_bytes_received) referenced from tlsio_mbedtls.o(i.tlsio_mbedtls_open)
 <LI><a href="#[107]">on_underlying_io_close_complete</a> from http_proxy_io.o(i.on_underlying_io_close_complete) referenced from http_proxy_io.o(i.http_proxy_io_close)
 <LI><a href="#[150]">on_underlying_io_close_complete_during_close</a> from tlsio_mbedtls.o(i.on_underlying_io_close_complete_during_close) referenced from tlsio_mbedtls.o(i.tlsio_mbedtls_close)
 <LI><a href="#[108]">on_underlying_io_error</a> from http_proxy_io.o(i.on_underlying_io_error) referenced from http_proxy_io.o(i.http_proxy_io_open)
 <LI><a href="#[151]">on_underlying_io_error</a> from tlsio_mbedtls.o(i.on_underlying_io_error) referenced from tlsio_mbedtls.o(i.tlsio_mbedtls_open)
 <LI><a href="#[10a]">on_underlying_io_open_complete</a> from http_proxy_io.o(i.on_underlying_io_open_complete) referenced from http_proxy_io.o(i.http_proxy_io_open)
 <LI><a href="#[153]">on_underlying_io_open_complete</a> from tlsio_mbedtls.o(i.on_underlying_io_open_complete) referenced from tlsio_mbedtls.o(i.tlsio_mbedtls_open)
 <LI><a href="#[da]">prov_transport_challenge_callback</a> from prov_device_ll_client.o(i.prov_transport_challenge_callback) referenced from prov_device_ll_client.o(i.Prov_Device_LL_Register_Device)
 <LI><a href="#[3f]">prov_transport_mqtt_close</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_close) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[3c]">prov_transport_mqtt_create</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_create) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[3d]">prov_transport_mqtt_destroy</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_destroy) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[42]">prov_transport_mqtt_dowork</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_dowork) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[41]">prov_transport_mqtt_get_operation_status</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_get_operation_status) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[3e]">prov_transport_mqtt_open</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_open) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[40]">prov_transport_mqtt_register_device</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_register_device) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[47]">prov_transport_mqtt_set_option</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_option) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[46]">prov_transport_mqtt_set_proxy</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_proxy) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[43]">prov_transport_mqtt_set_trace</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_trace) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[45]">prov_transport_mqtt_set_trusted_cert</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_trusted_cert) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[44]">prov_transport_mqtt_x509_cert</a> from prov_transport_mqtt_client.o(i.prov_transport_mqtt_x509_cert) referenced 2 times from prov_transport_mqtt_client.o(.data)
 <LI><a href="#[d9]">prov_transport_process_json_reply</a> from prov_device_ll_client.o(i.prov_transport_process_json_reply) referenced from prov_device_ll_client.o(i.Prov_Device_LL_DoWork)
 <LI><a href="#[157]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[147]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[158]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[124]">recvCompleteCallback</a> from mqtt_client.o(i.recvCompleteCallback) referenced from mqtt_client.o(i.mqtt_client_init)
 <LI><a href="#[df]">reportedPropertyExists</a> from schema.o(i.reportedPropertyExists) referenced from schema.o(i.Schema_AddModelReportedProperty)
 <LI><a href="#[df]">reportedPropertyExists</a> from schema.o(i.reportedPropertyExists) referenced from schema.o(i.Schema_ModelReportedPropertyByPathExists)
 <LI><a href="#[c5]">reportedPropertyExistsByPath</a> from datapublisher.o(i.reportedPropertyExistsByPath) referenced from datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty)
 <LI><a href="#[211]">rsa_alloc_wrap</a> from pk_wrap.o(i.rsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20b]">rsa_can_do</a> from pk_wrap.o(i.rsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[210]">rsa_check_pair_wrap</a> from pk_wrap.o(i.rsa_check_pair_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[213]">rsa_debug</a> from pk_wrap.o(i.rsa_debug) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20e]">rsa_decrypt_wrap</a> from pk_wrap.o(i.rsa_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20f]">rsa_encrypt_wrap</a> from pk_wrap.o(i.rsa_encrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[212]">rsa_free_wrap</a> from pk_wrap.o(i.rsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20a]">rsa_get_bitlen</a> from pk_wrap.o(i.rsa_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20d]">rsa_sign_wrap</a> from pk_wrap.o(i.rsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[20c]">rsa_verify_wrap</a> from pk_wrap.o(i.rsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[148]">sendComplete</a> from mqtt_client.o(i.sendComplete) referenced from mqtt_client.o(i.sendPacketItem)
 <LI><a href="#[1f4]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f2]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f3]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f0]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f5]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ee]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ef]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1fc]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1fa]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1fb]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f8]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1fd]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f6]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1f7]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[1f9]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1fe]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1ff]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[206]">sha384_clone_wrap</a> from md_wrap.o(i.sha384_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[204]">sha384_ctx_alloc</a> from md_wrap.o(i.sha384_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[205]">sha384_ctx_free</a> from md_wrap.o(i.sha384_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[202]">sha384_finish_wrap</a> from md_wrap.o(i.sha384_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[207]">sha384_process_wrap</a> from md_wrap.o(i.sha384_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[200]">sha384_starts_wrap</a> from md_wrap.o(i.sha384_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[201]">sha384_update_wrap</a> from md_wrap.o(i.sha384_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[203]">sha384_wrap</a> from md_wrap.o(i.sha384_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[208]">sha512_starts_wrap</a> from md_wrap.o(i.sha512_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[209]">sha512_wrap</a> from md_wrap.o(i.sha512_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14e]">socketio_CloneOption</a> from socketio_mbed.o(i.socketio_CloneOption) referenced from socketio_mbed.o(i.socketio_retrieveoptions)
 <LI><a href="#[14d]">socketio_DestroyOption</a> from socketio_mbed.o(i.socketio_DestroyOption) referenced from socketio_mbed.o(i.socketio_retrieveoptions)
 <LI><a href="#[165]">socketio_close</a> from socketio_mbed.o(i.socketio_close) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[162]">socketio_create</a> from socketio_mbed.o(i.socketio_create) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[163]">socketio_destroy</a> from socketio_mbed.o(i.socketio_destroy) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[167]">socketio_dowork</a> from socketio_mbed.o(i.socketio_dowork) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[164]">socketio_open</a> from socketio_mbed.o(i.socketio_open) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[161]">socketio_retrieveoptions</a> from socketio_mbed.o(i.socketio_retrieveoptions) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[166]">socketio_send</a> from socketio_mbed.o(i.socketio_send) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[14c]">socketio_setoption</a> from socketio_mbed.o(i.socketio_setoption) referenced from socketio_mbed.o(.constdata)
 <LI><a href="#[14c]">socketio_setoption</a> from socketio_mbed.o(i.socketio_setoption) referenced from socketio_mbed.o(i.socketio_retrieveoptions)
 <LI><a href="#[11b]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[11e]">ssl_calc_finished_tls_sha384</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[11a]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[11d]">ssl_calc_verify_tls_sha384</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[11f]">ssl_update_checksum_sha256</a> from ssl_tls.o(i.ssl_update_checksum_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[120]">ssl_update_checksum_sha384</a> from ssl_tls.o(i.ssl_update_checksum_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[14f]">ssl_update_checksum_start</a> from ssl_tls.o(i.ssl_update_checksum_start) referenced from ssl_tls.o(i.ssl_handshake_init)
 <LI><a href="#[119]">tls_prf_sha256</a> from ssl_tls.o(i.tls_prf_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[11c]">tls_prf_sha384</a> from ssl_tls.o(i.tls_prf_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[156]">tlsio_mbedtls_CloneOption</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_CloneOption) referenced from tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
 <LI><a href="#[155]">tlsio_mbedtls_DestroyOption</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_DestroyOption) referenced from tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
 <LI><a href="#[16c]">tlsio_mbedtls_close</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_close) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[169]">tlsio_mbedtls_create</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_create) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[16a]">tlsio_mbedtls_destroy</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_destroy) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[16e]">tlsio_mbedtls_dowork</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_dowork) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[16b]">tlsio_mbedtls_open</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_open) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[168]">tlsio_mbedtls_retrieveoptions</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[16d]">tlsio_mbedtls_send</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_send) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[154]">tlsio_mbedtls_setoption</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_setoption) referenced from tlsio_mbedtls.o(.constdata)
 <LI><a href="#[154]">tlsio_mbedtls_setoption</a> from tlsio_mbedtls.o(i.tlsio_mbedtls_setoption) referenced from tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
 <LI><a href="#[142]">unchecked_on_send_complete</a> from http_proxy_io.o(i.unchecked_on_send_complete) referenced from http_proxy_io.o(i.on_underlying_io_open_complete)
 <LI><a href="#[13c]">vPortFree</a> from heap_4.o(i.vPortFree) referenced from net_mbedtls.o(i.net_mbedtls_start)
 <LI><a href="#[15b]">xio_CloneOption</a> from xio.o(i.xio_CloneOption) referenced from xio.o(i.xio_retrieveoptions)
 <LI><a href="#[15a]">xio_DestroyOption</a> from xio.o(i.xio_DestroyOption) referenced from xio.o(i.xio_retrieveoptions)
 <LI><a href="#[159]">xio_setoption</a> from xio.o(i.xio_setoption) referenced from xio.o(i.xio_retrieveoptions)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(.text)
</UL>
<P><STRONG><a name="[9ba]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[25f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9bb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9bc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9bd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9be]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9bf]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[50]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[9b3]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9b2]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[52]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[99e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[4a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[230]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9c0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b4]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[43a]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_RngLocalPort
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_start_ip_modem
</UL>

<P><STRONG><a name="[425]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_generate
</UL>

<P><STRONG><a name="[234]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[238]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[239]"></a>asctime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asctime_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[23a]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctime &rArr; asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
</UL>

<P><STRONG><a name="[9c1]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[9c2]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_DeriveEccKey
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_certificate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_alias_key
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDPSconnectionInfo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_GSN
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_COPS
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CIMI
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGSN
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGPADDR
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGMR
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGMM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGMI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_DIRECT_CMD
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_retrieve_SID_parameters
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_rsp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_build_cmd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_put_IP_address_infos
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QPING_BG96
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QISTATE_BG96
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIRD_data_BG96
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIRD_BG96
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QISEND_WRITE_DATA_BG96
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIND_BG96
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCSQ_BG96
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCFG_BG96
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCCID_BG96
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOctetString
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_KDF_FIXED
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Init
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Update
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update_ret
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_CmeError
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_IP_address_infos
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_net
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init_modem
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_device_info
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_dev_IP_address
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_dns_request
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_define_pdn
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_sendto
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receivefrom
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_ping
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_configure_remote
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data2buffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_command
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_define_pdn
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_read
</UL>

<P><STRONG><a name="[2fd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_id_public
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_alias_key_pair
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_DIRECT_CMD
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_validate_ping_request
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigIntToBigVal
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toJacobian
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toAffine
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_adjustP
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Final
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_gmtime_r
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcore_task_start
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_ping
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_urc_notif
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_ctrl_event_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_start
</UL>

<P><STRONG><a name="[3c5]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERTbsToCert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
</UL>

<P><STRONG><a name="[9c3]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[9c4]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Init
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9c5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERInitContext
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_certificate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_alias_key
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SID_context
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIRD_BG96
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base32_encode_impl
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Final
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Final
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_core
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_recvfrom
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_calloc
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CmeErr
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_persistent_context
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_device_info
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_configure_remote
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_convert_IPString_to_sockaddr
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_init
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_DeriveEccKey
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_id_public
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_alias_key_pair
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_auth_client
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGPADDR
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_validate_ping_request
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SOCKET_context
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SID_context
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_rsp
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QPING_BG96
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QISTATE_BG96
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIND_BG96
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCSQ_BG96
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCFG_BG96
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg_object
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Final
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Final
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AT_transaction
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_gethostbyname
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_accept
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_set_config
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_check_tlsdata
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_CmeError
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init_modem
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_dns_request
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_define_pdn
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_sendto
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_send
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receivefrom
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receive
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_ping
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_current_command
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_define_pdn
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_cellular_init
</UL>

<P><STRONG><a name="[9c7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.data)
</UL>
<P><STRONG><a name="[62c]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDeviceRegistrationMethod
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDPSconnectionInfo
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIND_BG96
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCSQ_BG96
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCFG_BG96
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_CmeError
</UL>

<P><STRONG><a name="[5bc]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strndup
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
</UL>

<P><STRONG><a name="[39f]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotremove_internal
</UL>

<P><STRONG><a name="[27a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDPSconnectionInfo
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ESCAPE_CMD
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_DIRECT_CMD
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_searchCmdInLUT
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_rsp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_build_cmd
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_ip_address_type
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_checkEndOfMsgCallback
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_getn_value
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register_message
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_operation_status_message
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_username
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_value
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddUTF8String
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddUTCTime
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_start
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init_modem
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_dev_IP_address
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_define_pdn
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_sendto
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receivefrom
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_configure_remote
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_command
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gethostbyname_ip_modem
</UL>

<P><STRONG><a name="[2bd]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_SetOption
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_CloneOption
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetOption
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_event_equal_for_match
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_DestroyOption
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_CloneOption
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIOPEN_BG96
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportedPropertyExistsByPath
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_GetPrimitiveType
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_remove_internal
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_status_type
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportedPropertyExists
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;methodFindArgumentByBame
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;methodExists
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchModelName
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchModelMethod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desiredPropertyExists
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchemaNamespacesMatch
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>

<P><STRONG><a name="[640]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_searchCmdInLUT
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_persistent_context
</UL>

<P><STRONG><a name="[687]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process_ip_modem
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gethostbyname_ip_modem
</UL>

<P><STRONG><a name="[437]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_getn_value
</UL>

<P><STRONG><a name="[720]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
</UL>

<P><STRONG><a name="[23e]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_convert_IPString_to_sockaddr
</UL>

<P><STRONG><a name="[240]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[260]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[242]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseHttpResponse
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[245]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[246]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
</UL>

<P><STRONG><a name="[248]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[249]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[252]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[253]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c7]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[3a4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[59b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
</UL>

<P><STRONG><a name="[4b5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9c8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[617]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[232]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9c9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9ca]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[235]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[241]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[23f]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[b1]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[243]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[25d]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[247]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[9cb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[9cc]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[24c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[612]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9cd]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9ce]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[25c]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[262]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[25e]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>

<P><STRONG><a name="[264]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[9cf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9d0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>ADC_ConversionStop</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[269]"></a>ADC_Disable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l4xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[26a]"></a>ADC_Enable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32l4xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[2c2]"></a>AGENT_DATA_TYPES_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, agenttypesystem.o(i.AGENT_DATA_TYPES_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_EDM_BOOLEAN_from_int
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[ee]"></a>ATCustom_BG96_analyzeCmd</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_analyzeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ATCustom_BG96_analyzeCmd &rArr; atcm_check_text_line_cmd &rArr; fRspAnalyze_CGPADDR &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_validate_ping_request
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_set_modem_data_mode
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_searchCmdInLUT
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QISTATE_BG96
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIRD_data_BG96
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_event_received
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_Error_BG96
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[ef]"></a>ATCustom_BG96_analyzeParam</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_analyzeParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ATCustom_BG96_analyzeParam &rArr; atcm_get_CmdAnalyzeFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_CmdAnalyzeFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[eb]"></a>ATCustom_BG96_checkEndOfMsgCallback</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_checkEndOfMsgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ATCustom_BG96_checkEndOfMsgCallback &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[ed]"></a>ATCustom_BG96_extractElement</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_extractElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ATCustom_BG96_extractElement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[ec]"></a>ATCustom_BG96_getCmd</STRONG> (Thumb, 1792 bytes, Stack size 40 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_getCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ATCustom_BG96_getCmd &rArr; atcm_modem_reset &rArr; atcm_reset_persistent_context &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_unsubscribe_net_event
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_subscribe_net_event
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_set_connected
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_reserve_modem_cid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_is_connected
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_select_hw_simslot
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_retrieve_SID_parameters
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_CMD_context
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_WAIT_EVENT
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_TEMPO
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_SKIP_CMD
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_NO_MORE_CMD
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_CMD_TIMEOUT
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_AT_CMD_ANSWER_OPTIONAL
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_AT_CMD
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_reset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_build_cmd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_release_modem_cid
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[f3]"></a>ATCustom_BG96_get_error</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ATCustom_BG96_get_error &rArr; atcm_modem_get_error &rArr; DATAPACK_writeStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[f1]"></a>ATCustom_BG96_get_rsp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_get_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ATCustom_BG96_get_rsp &rArr; atcm_modem_get_rsp &rArr; DATAPACK_writeStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SOCKET_context
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SID_context
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_reset
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_rsp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_user_friendly_mode_and_bands_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[f2]"></a>ATCustom_BG96_get_urc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_get_urc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATCustom_BG96_get_urc &rArr; atcm_modem_get_urc &rArr; DATAPACK_writeStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_urc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[ea]"></a>ATCustom_BG96_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ATCustom_BG96_init &rArr; atcm_modem_init &rArr; atcm_reset_persistent_context &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[f0]"></a>ATCustom_BG96_terminateCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at_custom_modem_specific_bg96.o(i.ATCustom_BG96_terminateCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATCustom_BG96_terminateCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs)
</UL>
<P><STRONG><a name="[271]"></a>ATParser_abort_request</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_parser.o(i.ATParser_abort_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ATParser_abort_request &rArr; reset_parser_context &rArr; reset_current_command
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_parser_context
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>

<P><STRONG><a name="[299]"></a>ATParser_get_ATcmd</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, at_parser.o(i.ATParser_get_ATcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ATParser_get_ATcmd &rArr; build_command &rArr; write_data2buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_getCmd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_current_command
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_buffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AT_transaction
</UL>

<P><STRONG><a name="[29e]"></a>ATParser_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_parser.o(i.ATParser_get_error))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>

<P><STRONG><a name="[2a0]"></a>ATParser_get_rsp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at_parser.o(i.ATParser_get_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATParser_get_rsp &rArr; reset_parser_context &rArr; reset_current_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_get_rsp
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_parser_context
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>

<P><STRONG><a name="[272]"></a>ATParser_get_urc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_parser.o(i.ATParser_get_urc))
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_get_urc
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
</UL>

<P><STRONG><a name="[2a3]"></a>ATParser_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at_parser.o(i.ATParser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATParser_init &rArr; reset_parser_context &rArr; reset_current_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_checkEndOfMsgCallback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_parser_context
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_open
</UL>

<P><STRONG><a name="[2a6]"></a>ATParser_initParsers</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_parser.o(i.ATParser_initParsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATParser_initParsers &rArr; atcc_initParsers
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_initParsers
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_open
</UL>

<P><STRONG><a name="[26d]"></a>ATParser_parse_rsp</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, at_parser.o(i.ATParser_parse_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ATParser_parse_rsp &rArr; atcc_analyzeParam &rArr; atcc_extractElement
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_terminateCmd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_analyzeParam
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_analyzeCmd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_current_command
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
</UL>

<P><STRONG><a name="[2ac]"></a>ATParser_process_request</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at_parser.o(i.ATParser_process_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATParser_process_request &rArr; reset_parser_context &rArr; reset_current_command
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_parser_context
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>

<P><STRONG><a name="[2ad]"></a>AT_init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, at_core.o(i.AT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT_init &rArr; ERROR_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init
</UL>

<P><STRONG><a name="[2ae]"></a>AT_open</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, at_core.o(i.AT_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AT_open &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_open
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_initParsers
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init
</UL>

<P><STRONG><a name="[2b2]"></a>AT_reset_context</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, at_core.o(i.AT_reset_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AT_reset_context
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_select
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reset
</UL>

<P><STRONG><a name="[2b5]"></a>AT_sendcmd</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, at_core.o(i.AT_sendcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AT_transaction
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_process_request
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_rsp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_error
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_abort_request
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_subscribe_net_event
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_subscribe_modem_event
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_sim_select
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_set_default_pdn
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reset
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_pdn_event
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_net
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_on
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_off
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init_modem
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_signal_quality
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_net_status
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_device_info
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_dev_IP_address
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_attach_status
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_dns_request
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_define_pdn
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_attach_PS_domain
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_activate_pdn
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_sendto
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_send
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receivefrom
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receive
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_connect
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_close
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_ping
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_SW_reset
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_HW_reset
</UL>

<P><STRONG><a name="[2b7]"></a>ATutil_convertHexaStringToInt32</STRONG> (Thumb, 166 bytes, Stack size 28 bytes, at_util.o(i.ATutil_convertHexaStringToInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_ipow
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertHexaStringToInt64
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCFG_BG96
</UL>

<P><STRONG><a name="[2b9]"></a>ATutil_convertHexaStringToInt64</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, at_util.o(i.ATutil_convertHexaStringToInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATutil_convertHexaStringToInt64 &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertHexaStringToInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCFG_BG96
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
</UL>

<P><STRONG><a name="[27b]"></a>ATutil_convertStringToInt</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, at_util.o(i.ATutil_convertStringToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertHexaStringToInt32
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_ipow
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CSQ
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CREG
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_COPS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGREG
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGPADDR
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGATT
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CEREG
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QPING_BG96
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QISTATE_BG96
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIRD_BG96
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIOPEN_BG96
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QINISTAT_BG96
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIND_BG96
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCFG_BG96
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_checkEndOfMsgCallback
</UL>

<P><STRONG><a name="[62b]"></a>ATutil_convertStringToUpperCase</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_util.o(i.ATutil_convertStringToUpperCase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATutil_convertStringToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_CmeError
</UL>

<P><STRONG><a name="[2b8]"></a>ATutil_ipow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_util.o(i.ATutil_ipow))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertHexaStringToInt32
</UL>

<P><STRONG><a name="[c4]"></a>AgentDataTypes_ToString</STRONG> (Thumb, 4290 bytes, Stack size 88 bytes, agenttypesystem.o(i.AgentDataTypes_ToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexDigitToChar
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64char
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>
<BR>[Address Reference Count : 2]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
<LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[2d1]"></a>Azure_Base64_Decode</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, azure_base64.o(i.Azure_Base64_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Azure_Base64_Decode &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
</UL>

<P><STRONG><a name="[2d7]"></a>Azure_Base64_Encode</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, azure_base64.o(i.Azure_Base64_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Azure_Base64_Encode &rArr; Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_size
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_content
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[2db]"></a>Azure_Base64_Encode_Bytes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, azure_base64.o(i.Azure_Base64_Encode_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Azure_Base64_Encode_Bytes &rArr; Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
</UL>

<P><STRONG><a name="[2dd]"></a>BSP_COM_Init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, stm32l496g_discovery.o(i.BSP_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_COM_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e0]"></a>BSP_ErrorHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.BSP_ErrorHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadBuffer
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
</UL>

<P><STRONG><a name="[2e9]"></a>BSP_IO_ConfigPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l496g_discovery_io.o(i.BSP_IO_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[2e1]"></a>BSP_IO_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l496g_discovery_io.o(i.BSP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_IO_Init &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[2e3]"></a>BSP_IO_TogglePin</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l496g_discovery_io.o(i.BSP_IO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[2e4]"></a>BSP_IO_WritePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l496g_discovery_io.o(i.BSP_IO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TogglePin
</UL>

<P><STRONG><a name="[2e5]"></a>BSP_JOY_Init</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, stm32l496g_discovery.o(i.BSP_JOY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_JOY_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e8]"></a>BSP_LED_Init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, stm32l496g_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_WritePin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2eb]"></a>BSP_LED_Off</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
</UL>

<P><STRONG><a name="[2ec]"></a>BSP_LED_On</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
</UL>

<P><STRONG><a name="[2ed]"></a>BSP_LED_Toggle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Toggle &rArr; BSP_IO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[2ef]"></a>BUFFER_clone</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BUFFER_clone &rArr; BUFFER_safemalloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[2d8]"></a>BUFFER_content</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_content))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode
</UL>

<P><STRONG><a name="[2f2]"></a>BUFFER_create</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, buffer.o(i.BUFFER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_storage_key
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_endorsement_key
</UL>

<P><STRONG><a name="[2d4]"></a>BUFFER_delete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BUFFER_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_close
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePacketData
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[2f3]"></a>BUFFER_enlarge</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_enlarge))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
</UL>

<P><STRONG><a name="[4fe]"></a>BUFFER_length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_length))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_transport_registration_data
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[2d2]"></a>BUFFER_new</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BUFFER_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[2d3]"></a>BUFFER_pre_build</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_pre_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
</UL>

<P><STRONG><a name="[2f4]"></a>BUFFER_prepend</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_prepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BUFFER_prepend &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
</UL>

<P><STRONG><a name="[2d9]"></a>BUFFER_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_size))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode
</UL>

<P><STRONG><a name="[2d5]"></a>BUFFER_u_char</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_u_char))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_transport_registration_data
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[2f5]"></a>Base32_Encode_Bytes</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, base32.o(i.Base32_Encode_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Base32_Encode_Bytes &rArr; base32_encode_impl &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base32_encode_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_value
</UL>

<P><STRONG><a name="[2f7]"></a>Base64Encode</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, riotbase64.o(i.Base64Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Base64Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64char
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
</UL>

<P><STRONG><a name="[2fc]"></a>BigIntToBigVal</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, riotecc.o(i.BigIntToBigVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BigIntToBigVal &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_DSASignDigest
</UL>

<P><STRONG><a name="[596]"></a>BigValToBigInt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, riotecc.o(i.BigValToBigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BigValToBigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_ExportEccPub
</UL>

<P><STRONG><a name="[4e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[2fe]"></a>Button_WaitForMultiPush</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.Button_WaitForMultiPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Button_WaitForMultiPush &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[2ff]"></a>Button_WaitForPush</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.Button_WaitForPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Button_WaitForPush &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[300]"></a>CDS_ping</STRONG> (Thumb, 126 bytes, Stack size 240 bytes, cellular_service.o(i.CDS_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = CDS_ping &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_ping
</UL>

<P><STRONG><a name="[8f9]"></a>CDS_socket_bind</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cellular_service.o(i.CDS_socket_bind))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_bind
</UL>

<P><STRONG><a name="[302]"></a>CDS_socket_close</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cellular_service.o(i.CDS_socket_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CDS_socket_close &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writePtr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_close
</UL>

<P><STRONG><a name="[305]"></a>CDS_socket_connect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cellular_service.o(i.CDS_socket_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CDS_socket_connect &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writePtr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_configure_remote
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_connect
</UL>

<P><STRONG><a name="[307]"></a>CDS_socket_create</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cellular_service.o(i.CDS_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CDS_socket_create &rArr; socket_create
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_create
</UL>

<P><STRONG><a name="[309]"></a>CDS_socket_receive</STRONG> (Thumb, 140 bytes, Stack size 120 bytes, cellular_service.o(i.CDS_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CDS_socket_receive &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receive
</UL>

<P><STRONG><a name="[30a]"></a>CDS_socket_receivefrom</STRONG> (Thumb, 180 bytes, Stack size 200 bytes, cellular_service.o(i.CDS_socket_receivefrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = CDS_socket_receivefrom &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receivefrom
</UL>

<P><STRONG><a name="[30b]"></a>CDS_socket_send</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, cellular_service.o(i.CDS_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CDS_socket_send &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_send
</UL>

<P><STRONG><a name="[30c]"></a>CDS_socket_sendto</STRONG> (Thumb, 142 bytes, Stack size 120 bytes, cellular_service.o(i.CDS_socket_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CDS_socket_sendto &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_sendto
</UL>

<P><STRONG><a name="[8fa]"></a>CDS_socket_set_callbacks</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cellular_service.o(i.CDS_socket_set_callbacks))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_set_callbacks
</UL>

<P><STRONG><a name="[310]"></a>CLOUD_Error_Handler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cloud.o(i.CLOUD_Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOUD_Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[36c]"></a>CODEFIRST_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, codefirst.o(i.CODEFIRST_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
</UL>

<P><STRONG><a name="[312]"></a>CONSTBUFFER_Create</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, constbuffer.o(i.CONSTBUFFER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CONSTBUFFER_Create &rArr; CONSTBUFFER_Create_Internal &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
</UL>

<P><STRONG><a name="[314]"></a>CONSTBUFFER_DecRef</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, constbuffer.o(i.CONSTBUFFER_DecRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CONSTBUFFER_DecRef &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
</UL>

<P><STRONG><a name="[315]"></a>CONSTBUFFER_GetContent</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, constbuffer.o(i.CONSTBUFFER_GetContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CONSTBUFFER_GetContent
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
</UL>

<P><STRONG><a name="[31d]"></a>CST_cellular_service_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cellular_service_task.o(i.CST_cellular_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CST_cellular_service_init &rArr; CS_init &rArr; AT_open &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_cellular_service_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_init
</UL>

<P><STRONG><a name="[321]"></a>CST_cellular_service_start</STRONG> (Thumb, 290 bytes, Stack size 104 bytes, cellular_service_task.o(i.CST_cellular_service_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CST_cellular_service_start &rArr; atcore_task_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_register_gen_event_cb
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcore_task_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_start
</UL>

<P><STRONG><a name="[338]"></a>CST_get_dev_IP_address</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_get_dev_IP_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CST_get_dev_IP_address &rArr; CS_get_dev_IP_address &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_dev_IP_address
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_thread
</UL>

<P><STRONG><a name="[8f8]"></a>CST_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_sendto
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_send
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receivefrom
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receive
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_connect
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_bind
</UL>

<P><STRONG><a name="[349]"></a>CST_radio_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cellular_service_task.o(i.CST_radio_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CST_radio_on &rArr; CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_mngt_radio_on
</UL>

<P><STRONG><a name="[34d]"></a>CS_activate_pdn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cellular_service.o(i.CS_activate_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_activate_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_activate_pdn
</UL>

<P><STRONG><a name="[34e]"></a>CS_attach_PS_domain</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cellular_service.o(i.CS_attach_PS_domain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CS_attach_PS_domain &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_attach_PS_domain
</UL>

<P><STRONG><a name="[34f]"></a>CS_define_pdn</STRONG> (Thumb, 108 bytes, Stack size 152 bytes, cellular_service.o(i.CS_define_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CS_define_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writePtr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_define_pdn
</UL>

<P><STRONG><a name="[350]"></a>CS_dns_request</STRONG> (Thumb, 104 bytes, Stack size 152 bytes, cellular_service.o(i.CS_dns_request), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writePtr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_dns_request
</UL>

<P><STRONG><a name="[351]"></a>CS_get_attach_status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cellular_service.o(i.CS_get_attach_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_get_attach_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_attach_status
</UL>

<P><STRONG><a name="[339]"></a>CS_get_dev_IP_address</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, cellular_service.o(i.CS_get_dev_IP_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CS_get_dev_IP_address &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_dev_IP_address
</UL>

<P><STRONG><a name="[352]"></a>CS_get_device_info</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cellular_service.o(i.CS_get_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_get_device_info &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writePtr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_analyze_error_report
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_device_info
</UL>

<P><STRONG><a name="[353]"></a>CS_get_net_status</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cellular_service.o(i.CS_get_net_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_get_net_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_net_status
</UL>

<P><STRONG><a name="[354]"></a>CS_get_signal_quality</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cellular_service.o(i.CS_get_signal_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_get_signal_quality &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writePtr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_get_signal_quality
</UL>

<P><STRONG><a name="[31e]"></a>CS_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cellular_service.o(i.CS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CS_init &rArr; AT_open &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_open
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_reset_context
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_getDeviceDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_init
</UL>

<P><STRONG><a name="[357]"></a>CS_init_modem</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, cellular_service.o(i.CS_init_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CS_init_modem &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_analyze_error_report
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_init_modem
</UL>

<P><STRONG><a name="[335]"></a>CS_power_off</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cellular_service.o(i.CS_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CS_power_off &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_power_off
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_waiting_for_network_status_state
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
</UL>

<P><STRONG><a name="[359]"></a>CS_power_on</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cellular_service.o(i.CS_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CS_power_on &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_power_on
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_power_on
</UL>

<P><STRONG><a name="[35b]"></a>CS_register_net</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cellular_service.o(i.CS_register_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_register_net &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_net
</UL>

<P><STRONG><a name="[35c]"></a>CS_register_pdn_event</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cellular_service.o(i.CS_register_pdn_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_register_pdn_event &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_pdn_event
</UL>

<P><STRONG><a name="[35d]"></a>CS_reset</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cellular_service.o(i.CS_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CS_reset &rArr; perform_SW_reset &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_reset_context
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_SW_reset
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_HW_reset
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_reset_context
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_reset
</UL>

<P><STRONG><a name="[360]"></a>CS_set_default_pdn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cellular_service.o(i.CS_set_default_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_set_default_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_set_default_pdn
</UL>

<P><STRONG><a name="[361]"></a>CS_sim_select</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cellular_service.o(i.CS_sim_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CS_sim_select &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_sim_select
</UL>

<P><STRONG><a name="[362]"></a>CS_subscribe_modem_event</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cellular_service.o(i.CS_subscribe_modem_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CS_subscribe_modem_event &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_modem_event
</UL>

<P><STRONG><a name="[363]"></a>CS_subscribe_net_event</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cellular_service.o(i.CS_subscribe_net_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CS_subscribe_net_event &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_net_event
</UL>

<P><STRONG><a name="[364]"></a>CaptureAndFlashPem</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iot_flash_config.o(i.CaptureAndFlashPem))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CaptureAndFlashPem &rArr; enterPemString &rArr; getInputString &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
</UL>

<P><STRONG><a name="[368]"></a>CodeFirst_CreateDevice</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, codefirst.o(i.CodeFirst_CreateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CodeFirst_CreateDevice &rArr; Device_Create &rArr; DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddDeviceRef
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
</UL>

<P><STRONG><a name="[36f]"></a>CodeFirst_Deinit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, codefirst.o(i.CodeFirst_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CodeFirst_Deinit &rArr; DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_deinit
</UL>

<P><STRONG><a name="[371]"></a>CodeFirst_ExecuteCommand</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = CodeFirst_ExecuteCommand &rArr; Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
</UL>

<P><STRONG><a name="[374]"></a>CodeFirst_ExecuteMethod</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CodeFirst_ExecuteMethod &rArr; Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
</UL>

<P><STRONG><a name="[376]"></a>CodeFirst_GetPrimitiveType</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, codefirst.o(i.CodeFirst_GetPrimitiveType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CodeFirst_GetPrimitiveType &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[c1]"></a>CodeFirst_InvokeAction</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, codefirst.o(i.CodeFirst_InvokeAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CodeFirst_InvokeAction &rArr; FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXECUTE_COMMAND_RESULTStrings
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> codefirst.o(i.CodeFirst_CreateDevice)
</UL>
<P><STRONG><a name="[c0]"></a>CodeFirst_InvokeMethod</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, codefirst.o(i.CodeFirst_InvokeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CodeFirst_InvokeMethod &rArr; FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> codefirst.o(i.CodeFirst_CreateDevice)
</UL>
<P><STRONG><a name="[37b]"></a>CodeFirst_RegisterSchema</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_RegisterSchema))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CodeFirst_RegisterSchema &rArr; buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaByNamespace
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[381]"></a>CodeFirst_SendAsync</STRONG> (Thumb, 586 bytes, Stack size 144 bytes, codefirst.o(i.CodeFirst_SendAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = CodeFirst_SendAsync &rArr; Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[38b]"></a>CodeFirst_SendAsyncReported</STRONG> (Thumb, 612 bytes, Stack size 144 bytes, codefirst.o(i.CodeFirst_SendAsyncReported))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[392]"></a>CommandDecoder_Create</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, commanddecoder.o(i.CommandDecoder_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CommandDecoder_Create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[393]"></a>CommandDecoder_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commanddecoder.o(i.CommandDecoder_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommandDecoder_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
</UL>

<P><STRONG><a name="[394]"></a>CommandDecoder_ExecuteCommand</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, commanddecoder.o(i.CommandDecoder_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
</UL>

<P><STRONG><a name="[397]"></a>CommandDecoder_ExecuteMethod</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, commanddecoder.o(i.CommandDecoder_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
</UL>

<P><STRONG><a name="[399]"></a>CreateAgentDataType_From_String</STRONG> (Thumb, 2772 bytes, Stack size 112 bytes, agenttypesystem.o(i.CreateAgentDataType_From_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CreateAgentDataType_From_String &rArr; __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf3d2d
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalMinusSign
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory2CapitalHexDigits
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAndReadNDigitsInt
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan4base64char
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tm_yday_and_tm_wday
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[3b4]"></a>Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</STRONG> (Thumb, 1242 bytes, Stack size 48 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[3b3]"></a>Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts
</UL>

<P><STRONG><a name="[3af]"></a>Create_AGENT_DATA_TYPE_from_FLOAT</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_FLOAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTemperature
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tPressure
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tHumidity
</UL>

<P><STRONG><a name="[3b7]"></a>Create_AGENT_DATA_TYPE_from_Members</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_Members))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Create_AGENT_DATA_TYPE_from_Members &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[3b1]"></a>Create_AGENT_DATA_TYPE_from_SINT32</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_SINT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval
</UL>

<P><STRONG><a name="[3b2]"></a>Create_AGENT_DATA_TYPE_from_charz</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_charz))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdeviceId
</UL>

<P><STRONG><a name="[39e]"></a>Create_AGENT_DATA_TYPE_from_date</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Create_AGENT_DATA_TYPE_from_date
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[3b0]"></a>Create_EDM_BOOLEAN_from_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_EDM_BOOLEAN_from_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_EDM_BOOLEAN_from_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGENT_DATA_TYPES_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn
</UL>

<P><STRONG><a name="[30e]"></a>DATAPACK_readMsgType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_datapack.o(i.DATAPACK_readMsgType))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readPtr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_urc_notif
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_analyze_error_report
</UL>

<P><STRONG><a name="[3b8]"></a>DATAPACK_readPtr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at_datapack.o(i.DATAPACK_readPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DATAPACK_readPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readSize
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readMsgType
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_retrieve_SID_parameters
</UL>

<P><STRONG><a name="[3b9]"></a>DATAPACK_readSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_datapack.o(i.DATAPACK_readSize))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readPtr
</UL>

<P><STRONG><a name="[301]"></a>DATAPACK_readStruct</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at_datapack.o(i.DATAPACK_readStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATAPACK_readStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readSize
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readMsgType
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_retrieve_SID_parameters
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_net
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_net_status
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_dev_IP_address
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_attach_status
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_dns_request
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receivefrom
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receive
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_ping
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_urc_notif
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_analyze_error_report
</UL>

<P><STRONG><a name="[303]"></a>DATAPACK_writePtr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_datapack.o(i.DATAPACK_writePtr))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_signal_quality
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_device_info
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_dns_request
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_define_pdn
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_connect
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_close
</UL>

<P><STRONG><a name="[291]"></a>DATAPACK_writeStruct</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, at_datapack.o(i.DATAPACK_writeStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DATAPACK_writeStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_urc
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_rsp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_error
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_rsp
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_subscribe_net_event
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_subscribe_modem_event
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_sim_select
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_set_default_pdn
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reset
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_pdn_event
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_net
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_on
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_off
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init_modem
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_net_status
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_dev_IP_address
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_attach_status
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_attach_PS_domain
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_activate_pdn
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_sendto
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_send
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receivefrom
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receive
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_ping
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_SW_reset
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_HW_reset
</UL>

<P><STRONG><a name="[3ce]"></a>DATA_MARSHALLER_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, datamarshaller.o(i.DATA_MARSHALLER_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
</UL>

<P><STRONG><a name="[3dc]"></a>DATA_PUBLISHER_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, datapublisher.o(i.DATA_PUBLISHER_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
</UL>

<P><STRONG><a name="[3ba]"></a>DERAddBitString</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, riotderenc.o(i.DERAddBitString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DERAddBitString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntEncodedNumBytes
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeInt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREccPub
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[5fc]"></a>DERAddBoolean</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, riotderenc.o(i.DERAddBoolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DERAddBoolean
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
</UL>

<P><STRONG><a name="[3bd]"></a>DERAddInteger</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, riotderenc.o(i.DERAddInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DERAddInteger &rArr; DERAddIntegerFromArray
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[3be]"></a>DERAddIntegerFromArray</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, riotderenc.o(i.DERAddIntegerFromArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DERAddIntegerFromArray
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddShortExplicitInteger
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddInteger
</UL>

<P><STRONG><a name="[5f1]"></a>DERAddOID</STRONG> (Thumb, 208 bytes, Stack size 36 bytes, riotderenc.o(i.DERAddOID))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DERAddOID
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREccPub
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddX501Name
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[3bf]"></a>DERAddOctetString</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, riotderenc.o(i.DERAddOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DERAddOctetString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntEncodedNumBytes
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeInt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[3c0]"></a>DERAddShortExplicitInteger</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, riotderenc.o(i.DERAddShortExplicitInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DERAddShortExplicitInteger &rArr; DERAddIntegerFromArray
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
</UL>

<P><STRONG><a name="[3c1]"></a>DERAddUTCTime</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, riotderenc.o(i.DERAddUTCTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DERAddUTCTime
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
</UL>

<P><STRONG><a name="[3c2]"></a>DERAddUTF8String</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, riotderenc.o(i.DERAddUTF8String))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DERAddUTF8String
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddX501Name
</UL>

<P><STRONG><a name="[5f5]"></a>DERGetNestingDepth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, riotderenc.o(i.DERGetNestingDepth))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREccPub
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
</UL>

<P><STRONG><a name="[3c3]"></a>DERInitContext</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, riotderenc.o(i.DERInitContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DERInitContext
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_id_public
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_alias_key_pair
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
</UL>

<P><STRONG><a name="[3c4]"></a>DERPopNesting</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, riotderenc.o(i.DERPopNesting))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DERPopNesting &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntEncodedNumBytes
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeInt
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREccPub
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddX501Name
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[5f7]"></a>DERStartEnvelopingBitString</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, riotderenc.o(i.DERStartEnvelopingBitString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DERStartEnvelopingBitString
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
</UL>

<P><STRONG><a name="[5f2]"></a>DERStartEnvelopingOctetString</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, riotderenc.o(i.DERStartEnvelopingOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DERStartEnvelopingOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[5ef]"></a>DERStartExplicit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, riotderenc.o(i.DERStartExplicit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DERStartExplicit
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[5f0]"></a>DERStartSequenceOrSet</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, riotderenc.o(i.DERStartSequenceOrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DERStartSequenceOrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREccPub
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddX501Name
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
</UL>

<P><STRONG><a name="[3c6]"></a>DERTbsToCert</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, riotderenc.o(i.DERTbsToCert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DERTbsToCert &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
</UL>

<P><STRONG><a name="[3c7]"></a>DERtoPEM</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, riotderenc.o(i.DERtoPEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DERtoPEM &rArr; Base64Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64Encode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_id_public
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_alias_key_pair
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
</UL>

<P><STRONG><a name="[409]"></a>DEVICE_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotdevice.o(i.DEVICE_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeMethod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeAction
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
</UL>

<P><STRONG><a name="[3c8]"></a>DICE_SHA256_Final</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, dicesha256.o(i.DICE_SHA256_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DICE_SHA256_Final &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Transform
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256_2
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256
</UL>

<P><STRONG><a name="[3ca]"></a>DICE_SHA256_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dicesha256.o(i.DICE_SHA256_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DICE_SHA256_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256_2
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256
</UL>

<P><STRONG><a name="[3cb]"></a>DICE_SHA256_Update</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dicesha256.o(i.DICE_SHA256_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DICE_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Transform
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256_2
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256
</UL>

<P><STRONG><a name="[4bd]"></a>DList_InitializeListHead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InitializeListHead))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[4cd]"></a>DList_InsertTailList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InsertTailList))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendReportedState
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DoWork
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetTwinAsync
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
</UL>

<P><STRONG><a name="[523]"></a>DList_IsListEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_IsListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>

<P><STRONG><a name="[41b]"></a>DList_RemoveEntryList</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveEntryList))
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DoWork
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_ReportedStateComplete
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPendingGetTwinRequests
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[4c7]"></a>DList_RemoveHeadList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveHeadList))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendComplete
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>

<P><STRONG><a name="[3cd]"></a>DataMarshaller_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, datamarshaller.o(i.DataMarshaller_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DataMarshaller_Create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_MARSHALLER_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
</UL>

<P><STRONG><a name="[3cf]"></a>DataMarshaller_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datamarshaller.o(i.DataMarshaller_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DataMarshaller_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
</UL>

<P><STRONG><a name="[3d0]"></a>DataMarshaller_SendData</STRONG> (Thumb, 552 bytes, Stack size 72 bytes, datamarshaller.o(i.DataMarshaller_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_MARSHALLER_RESULTStrings
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
</UL>

<P><STRONG><a name="[3d2]"></a>DataMarshaller_SendData_ReportedProperties</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, datamarshaller.o(i.DataMarshaller_SendData_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DataMarshaller_SendData_ReportedProperties &rArr; AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[3db]"></a>DataPublisher_CancelTransaction</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_CancelTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DataPublisher_CancelTransaction &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
</UL>

<P><STRONG><a name="[3dd]"></a>DataPublisher_CommitTransaction_ReportedProperties</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, datapublisher.o(i.DataPublisher_CommitTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[3de]"></a>DataPublisher_Create</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[3df]"></a>DataPublisher_CreateTransaction_ReportedProperties</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_CreateTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DataPublisher_CreateTransaction_ReportedProperties &rArr; VECTOR_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[3e0]"></a>DataPublisher_Destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datapublisher.o(i.DataPublisher_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DataPublisher_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[3e1]"></a>DataPublisher_DestroyTransaction_ReportedProperties</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_DestroyTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DataPublisher_DestroyTransaction_ReportedProperties &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[3e3]"></a>DataPublisher_EndTransaction</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_EndTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
</UL>

<P><STRONG><a name="[3e4]"></a>DataPublisher_PublishTransacted</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, datapublisher.o(i.DataPublisher_PublishTransacted))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
</UL>

<P><STRONG><a name="[3e6]"></a>DataPublisher_PublishTransacted_ReportedProperty</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DataPublisher_PublishTransacted_ReportedProperty &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
</UL>

<P><STRONG><a name="[3e9]"></a>DataPublisher_StartTransaction</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_StartTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DataPublisher_StartTransaction &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_PUBLISHER_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
</UL>

<P><STRONG><a name="[51]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[388]"></a>Destroy_AGENT_DATA_TYPE</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, agenttypesystem.o(i.Destroy_AGENT_DATA_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
</UL>

<P><STRONG><a name="[389]"></a>Device_CancelTransaction</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, iotdevice.o(i.Device_CancelTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Device_CancelTransaction &rArr; DataPublisher_CancelTransaction &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[391]"></a>Device_CommitTransaction_ReportedProperties</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, iotdevice.o(i.Device_CommitTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[36b]"></a>Device_Create</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, iotdevice.o(i.Device_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Device_Create &rArr; DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[38c]"></a>Device_CreateTransaction_ReportedProperties</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, iotdevice.o(i.Device_CreateTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Device_CreateTransaction_ReportedProperties &rArr; DataPublisher_CreateTransaction_ReportedProperties &rArr; VECTOR_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[36e]"></a>Device_Destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iotdevice.o(i.Device_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Device_Destroy &rArr; DataPublisher_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
</UL>

<P><STRONG><a name="[390]"></a>Device_DestroyTransaction_ReportedProperties</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, iotdevice.o(i.Device_DestroyTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Device_DestroyTransaction_ReportedProperties &rArr; DataPublisher_DestroyTransaction_ReportedProperties &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[38a]"></a>Device_EndTransaction</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, iotdevice.o(i.Device_EndTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[373]"></a>Device_ExecuteCommand</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, iotdevice.o(i.Device_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
</UL>

<P><STRONG><a name="[375]"></a>Device_ExecuteMethod</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, iotdevice.o(i.Device_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
</UL>

<P><STRONG><a name="[387]"></a>Device_PublishTransacted</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, iotdevice.o(i.Device_PublishTransacted))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Device_PublishTransacted &rArr; DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
</UL>

<P><STRONG><a name="[38f]"></a>Device_PublishTransacted_ReportedProperty</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, iotdevice.o(i.Device_PublishTransacted_ReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Device_PublishTransacted_ReportedProperty &rArr; DataPublisher_PublishTransacted_ReportedProperty &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
</UL>

<P><STRONG><a name="[382]"></a>Device_StartTransaction</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, iotdevice.o(i.Device_StartTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Device_StartTransaction &rArr; DataPublisher_StartTransaction &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[410]"></a>DiceSHA256</STRONG> (Thumb, 38 bytes, Stack size 128 bytes, dicesha256.o(i.DiceSHA256))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DiceSHA256 &rArr; DICE_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Update
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_x509_init
</UL>

<P><STRONG><a name="[411]"></a>DiceSHA256_2</STRONG> (Thumb, 56 bytes, Stack size 136 bytes, dicesha256.o(i.DiceSHA256_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DiceSHA256_2 &rArr; DICE_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Update
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_x509_init
</UL>

<P><STRONG><a name="[41d]"></a>ECDH_derive</STRONG> (Thumb, 110 bytes, Stack size 104 bytes, riotecc.o(i.ECDH_derive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = ECDH_derive &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_zero
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_cmp
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_KDF_SHA256
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_KDF_FIXED
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_DeriveDsaKeyPair
</UL>

<P><STRONG><a name="[423]"></a>ECDH_generate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, riotecc.o(i.ECDH_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_zero
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_cmp
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[270]"></a>ERROR_Handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, error_handler.o(i.ERROR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ERROR_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AT_transaction
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_index
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcore_task_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_open
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_cellular_service_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_ctrl_event_start
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_waiting_for_network_status_state
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_powered_on_state
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_event_callback
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_fota_timer_callback
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_start
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_init
</UL>

<P><STRONG><a name="[42b]"></a>ERROR_Handler_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, error_handler.o(i.ERROR_Handler_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERROR_Handler_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
</UL>

<P><STRONG><a name="[37a]"></a>EXECUTE_COMMAND_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, codefirst.o(i.EXECUTE_COMMAND_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
</UL>

<P><STRONG><a name="[7c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[42d]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Error_Handler &rArr;  Error_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_start
</UL>

<P><STRONG><a name="[44d]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[44c]"></a>FLASH_PageErase</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[42e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[366]"></a>FLASH_update</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, flash_l4.o(i.FLASH_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIoTDeviceConfig
</UL>

<P><STRONG><a name="[43f]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, stm32l4xx_hal_adc_ex.o(i.HAL_ADCEx_MultiModeConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[441]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 1000 bytes, Stack size 40 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[677]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[445]"></a>HAL_ADC_Init</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[446]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[447]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[449]"></a>HAL_ADC_Start</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[44a]"></a>HAL_ADC_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[48c]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Blink
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForPush
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForMultiPush
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Wakeup
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
</UL>

<P><STRONG><a name="[433]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[435]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[436]"></a>HAL_FLASH_Program</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
</UL>

<P><STRONG><a name="[432]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[4a3]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspDeInit
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
</UL>

<P><STRONG><a name="[450]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[42c]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[2de]"></a>HAL_GPIO_Init</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_EnableWakeupPin
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_sim_select
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_off
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Wakeup
</UL>

<P><STRONG><a name="[268]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForPush
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AT_transaction
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
</UL>

<P><STRONG><a name="[451]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>

<P><STRONG><a name="[49f]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>

<P><STRONG><a name="[453]"></a>HAL_I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[455]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
</UL>

<P><STRONG><a name="[457]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadBuffer
</UL>

<P><STRONG><a name="[45b]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
</UL>

<P><STRONG><a name="[452]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[454]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[487]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[45e]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[460]"></a>HAL_InitTick</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32l4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[461]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[493]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspDeInit
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
</UL>

<P><STRONG><a name="[45f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[556]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[566]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
</UL>

<P><STRONG><a name="[549]"></a>HAL_PWREx_EnableVddIO2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableVddIO2))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[584]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[467]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>

<P><STRONG><a name="[46a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[462]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[463]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[5e0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[46b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[46c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1312 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[46e]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32l4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rng_raw
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_start_ip_modem
</UL>

<P><STRONG><a name="[46f]"></a>HAL_RNG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[470]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[471]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[473]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[474]"></a>HAL_RTC_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_Init &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[475]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[478]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[47a]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
</UL>

<P><STRONG><a name="[47b]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[484]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[483]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[486]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[464]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[47c]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[465]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[47f]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[47e]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[480]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[481]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[482]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[485]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[48d]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[488]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board_interrupts.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[48a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; IPC_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2df]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
</UL>

<P><STRONG><a name="[48f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[494]"></a>HAL_UART_Receive</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[4ab]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartTransmit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_writeCharacter
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_send_uart
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_reset_uart
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_receive_uart
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_open_uart
</UL>

<P><STRONG><a name="[496]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board_interrupts.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; IPC_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[498]"></a>HAL_UART_Transmit</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartTransmit
</UL>

<P><STRONG><a name="[4b0]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_send_uart
</UL>

<P><STRONG><a name="[48e]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board_interrupts.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; IPC_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[49a]"></a>HMACSHA256_ComputeHash</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hmacsha256.o(i.HMACSHA256_ComputeHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
</UL>

<P><STRONG><a name="[4c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[49c]"></a>Hello</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, azurexcubesample.o(i.Hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Hello &rArr; MethodReturn_Create &rArr; is_json_present_and_unparsable &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
</UL>

<P><STRONG><a name="[49e]"></a>I2C2_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.I2C2_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C2_DeInit &rArr; I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
</UL>

<P><STRONG><a name="[4a1]"></a>I2C2_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
</UL>

<P><STRONG><a name="[4fd]"></a>IOTHUBMESSAGE_CONTENT_TYPEStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_message.o(i.IOTHUBMESSAGE_CONTENT_TYPEStrings))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
</UL>

<P><STRONG><a name="[5d2]"></a>IOTHUB_CLIENT_CONFIRMATION_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_client_core_ll.o(i.IOTHUB_CLIENT_CONFIRMATION_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
</UL>

<P><STRONG><a name="[4d3]"></a>IOTHUB_CLIENT_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_client_core_ll.o(i.IOTHUB_CLIENT_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetRetryPolicy
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetDeviceMethodCallback
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
</UL>

<P><STRONG><a name="[489]"></a>IPC_UART_ErrorCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc_uart.o(i.IPC_UART_ErrorCallback))
<BR><BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[497]"></a>IPC_UART_RxCpltCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ipc_uart.o(i.IPC_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPC_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[499]"></a>IPC_UART_TxCpltCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ipc_uart.o(i.IPC_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPC_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[62e]"></a>IPC_get_other_channel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc_common.o(i.IPC_get_other_channel))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_action_result
</UL>

<P><STRONG><a name="[9d1]"></a>IPC_get_other_channel_uart</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ipc_uart.o(i.IPC_get_other_channel_uart), UNUSED)

<P><STRONG><a name="[5d6]"></a>IPC_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc_common.o(i.IPC_init))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_getDeviceDescriptor
</UL>

<P><STRONG><a name="[9d2]"></a>IPC_init_uart</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipc_uart.o(i.IPC_init_uart), UNUSED)

<P><STRONG><a name="[2b1]"></a>IPC_open</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ipc_common.o(i.IPC_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IPC_open &rArr; IPC_open_uart &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_open_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_open
</UL>

<P><STRONG><a name="[4a9]"></a>IPC_open_uart</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ipc_uart.o(i.IPC_open_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IPC_open_uart &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_open
</UL>

<P><STRONG><a name="[26c]"></a>IPC_receive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc_common.o(i.IPC_receive))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
</UL>

<P><STRONG><a name="[4ac]"></a>IPC_receive_uart</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipc_uart.o(i.IPC_receive_uart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_read
</UL>

<P><STRONG><a name="[2b3]"></a>IPC_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc_common.o(i.IPC_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_reset_context
</UL>

<P><STRONG><a name="[4ae]"></a>IPC_reset_uart</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc_uart.o(i.IPC_reset_uart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_init
</UL>

<P><STRONG><a name="[2b4]"></a>IPC_select</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc_common.o(i.IPC_select))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_action_result
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_reset_context
</UL>

<P><STRONG><a name="[9d3]"></a>IPC_select_uart</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipc_uart.o(i.IPC_select_uart), UNUSED)

<P><STRONG><a name="[92d]"></a>IPC_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc_common.o(i.IPC_send))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AT_transaction
</UL>

<P><STRONG><a name="[4af]"></a>IPC_send_uart</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ipc_uart.o(i.IPC_send_uart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[4c0]"></a>IoTHubClientCore_LL_CreateFromConnectionString</STRONG> (Thumb, 1902 bytes, Stack size 112 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_CreateFromConnectionString))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = IoTHubClientCore_LL_CreateFromConnectionString &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[4c5]"></a>IoTHubClientCore_LL_CreateFromDeviceAuth</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_CreateFromDeviceAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = IoTHubClientCore_LL_CreateFromDeviceAuth &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromDeviceAuth
</UL>

<P><STRONG><a name="[4c6]"></a>IoTHubClientCore_LL_Destroy</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubClientCore_LL_Destroy &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_event_callback_list
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
</UL>

<P><STRONG><a name="[4cc]"></a>IoTHubClientCore_LL_DoWork</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IoTHubClientCore_LL_DoWork &rArr; DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
</UL>

<P><STRONG><a name="[4d2]"></a>IoTHubClientCore_LL_SendEventAsync</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SendEventAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IoTHubClientCore_LL_SendEventAsync &rArr; IoTHubClient_Diagnostic_AddIfNecessary &rArr; IoTHubMessage_SetDiagnosticPropertyData &rArr; CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_RESULTStrings
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[4d7]"></a>IoTHubClientCore_LL_SendReportedState</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SendReportedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IoTHubClientCore_LL_SendReportedState &rArr; dev_twin_data_create &rArr; CONSTBUFFER_Create &rArr; CONSTBUFFER_Create_Internal &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
</UL>

<P><STRONG><a name="[4d9]"></a>IoTHubClientCore_LL_SetDeviceMethodCallback</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SetDeviceMethodCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubClientCore_LL_SetDeviceMethodCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceMethodCallback
</UL>

<P><STRONG><a name="[4da]"></a>IoTHubClientCore_LL_SetDeviceTwinCallback</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SetDeviceTwinCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClientCore_LL_SetDeviceTwinCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceTwinCallback
</UL>

<P><STRONG><a name="[4db]"></a>IoTHubClientCore_LL_SetMessageCallback</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SetMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClientCore_LL_SetMessageCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetMessageCallback
</UL>

<P><STRONG><a name="[4dc]"></a>IoTHubClientCore_LL_SetOption</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = IoTHubClientCore_LL_SetOption &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_SasToken_Expiry
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
</UL>

<P><STRONG><a name="[4df]"></a>IoTHubClientCore_LL_SetRetryPolicy</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClientCore_LL_SetRetryPolicy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[4e0]"></a>IoTHubClient_Auth_Create</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IoTHubClient_Auth_Create &rArr; initialize_auth_client &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_auth_client
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[4e2]"></a>IoTHubClient_Auth_CreateFromDeviceAuth</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_CreateFromDeviceAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IoTHubClient_Auth_CreateFromDeviceAuth &rArr; initialize_auth_client &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_get_type
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_auth_client
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[4ca]"></a>IoTHubClient_Auth_Destroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IoTHubClient_Auth_Destroy &rArr; iothub_device_auth_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[43d]"></a>IoTHubClient_Auth_Get_Credential_Type</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_Credential_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_Auth_Get_Credential_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
</UL>

<P><STRONG><a name="[4e6]"></a>IoTHubClient_Auth_Get_DeviceKey</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_DeviceKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_Auth_Get_DeviceKey
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
</UL>

<P><STRONG><a name="[4e7]"></a>IoTHubClient_Auth_Get_SasToken</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_SasToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = IoTHubClient_Auth_Get_SasToken &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[4b4]"></a>IoTHubClient_Auth_Get_SasToken_Expiry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_SasToken_Expiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubClient_Auth_Get_SasToken_Expiry
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[4eb]"></a>IoTHubClient_Auth_Is_SasToken_Valid</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Is_SasToken_Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IoTHubClient_Auth_Is_SasToken_Valid &rArr; SASToken_Validate &rArr; get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[4de]"></a>IoTHubClient_Auth_Set_SasToken_Expiry</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Set_SasToken_Expiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_Auth_Set_SasToken_Expiry
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetOption
</UL>

<P><STRONG><a name="[530]"></a>IoTHubClient_Auth_Set_x509_Type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Set_x509_Type))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>

<P><STRONG><a name="[43e]"></a>IoTHubClient_Auth_Set_xio_Certificate</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Set_xio_Certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
</UL>

<P><STRONG><a name="[4d6]"></a>IoTHubClient_Diagnostic_AddIfNecessary</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iothub_client_diagnostic.o(i.IoTHubClient_Diagnostic_AddIfNecessary))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IoTHubClient_Diagnostic_AddIfNecessary &rArr; IoTHubMessage_SetDiagnosticPropertyData &rArr; CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
</UL>

<P><STRONG><a name="[4f0]"></a>IoTHubClient_LL_CreateFromConnectionString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_CreateFromConnectionString))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = IoTHubClient_LL_CreateFromConnectionString &rArr; IoTHubClientCore_LL_CreateFromConnectionString &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directIoTHubRegistration
</UL>

<P><STRONG><a name="[4f1]"></a>IoTHubClient_LL_CreateFromDeviceAuth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_CreateFromDeviceAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = IoTHubClient_LL_CreateFromDeviceAuth &rArr; IoTHubClientCore_LL_CreateFromDeviceAuth &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerIoTHubFromDPS
</UL>

<P><STRONG><a name="[4f2]"></a>IoTHubClient_LL_Destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubClient_LL_Destroy &rArr; IoTHubClientCore_LL_Destroy &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[4f3]"></a>IoTHubClient_LL_DoWork</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IoTHubClient_LL_DoWork &rArr; IoTHubClientCore_LL_DoWork &rArr; DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DoWork
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[4f4]"></a>IoTHubClient_LL_SendEventAsync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendEventAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IoTHubClient_LL_SendEventAsync &rArr; IoTHubClientCore_LL_SendEventAsync &rArr; IoTHubClient_Diagnostic_AddIfNecessary &rArr; IoTHubMessage_SetDiagnosticPropertyData &rArr; CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[40f]"></a>IoTHubClient_LL_SendReportedState</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendReportedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IoTHubClient_LL_SendReportedState &rArr; IoTHubClientCore_LL_SendReportedState &rArr; dev_twin_data_create &rArr; CONSTBUFFER_Create &rArr; CONSTBUFFER_Create_Internal &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendReportedState
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
</UL>

<P><STRONG><a name="[4f5]"></a>IoTHubClient_LL_SetDeviceMethodCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetDeviceMethodCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubClient_LL_SetDeviceMethodCallback &rArr; IoTHubClientCore_LL_SetDeviceMethodCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetDeviceMethodCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAllCallbacks
</UL>

<P><STRONG><a name="[4f6]"></a>IoTHubClient_LL_SetDeviceTwinCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetDeviceTwinCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_LL_SetDeviceTwinCallback &rArr; IoTHubClientCore_LL_SetDeviceTwinCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetDeviceTwinCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAllCallbacks
</UL>

<P><STRONG><a name="[4f7]"></a>IoTHubClient_LL_SetMessageCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClient_LL_SetMessageCallback &rArr; IoTHubClientCore_LL_SetMessageCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAllCallbacks
</UL>

<P><STRONG><a name="[4f8]"></a>IoTHubClient_LL_SetOption</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = IoTHubClient_LL_SetOption &rArr; IoTHubClientCore_LL_SetOption &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerIoTHubFromDPS
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directIoTHubRegistration
</UL>

<P><STRONG><a name="[4d5]"></a>IoTHubMessage_Clone</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IoTHubMessage_Clone &rArr; Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
</UL>

<P><STRONG><a name="[4fa]"></a>IoTHubMessage_CreateFromByteArray</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_CreateFromByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IoTHubMessage_CreateFromByteArray &rArr; BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[41c]"></a>IoTHubMessage_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendComplete
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[4fc]"></a>IoTHubMessage_GetByteArray</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_GetByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IoTHubMessage_GetByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUBMESSAGE_CONTENT_TYPEStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[4ff]"></a>IoTHubMessage_GetContentEncodingSystemProperty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetContentEncodingSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetContentEncodingSystemProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[593]"></a>IoTHubMessage_GetContentType</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetContentType))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[500]"></a>IoTHubMessage_GetContentTypeSystemProperty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetContentTypeSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetContentTypeSystemProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[501]"></a>IoTHubMessage_GetCorrelationId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetCorrelationId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetCorrelationId
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[502]"></a>IoTHubMessage_GetDiagnosticPropertyData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetDiagnosticPropertyData
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[4cf]"></a>IoTHubMessage_GetInputName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetInputName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetInputName
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_MessageCallbackFromInput
</UL>

<P><STRONG><a name="[503]"></a>IoTHubMessage_GetMessageId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetMessageId
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[504]"></a>IoTHubMessage_GetOutputName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetOutputName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetOutputName
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[505]"></a>IoTHubMessage_GetString</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetString))
<BR><BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[506]"></a>IoTHubMessage_Properties</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_Properties))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_Properties
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[507]"></a>IoTHubMessage_SetConnectionDeviceId</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_SetConnectionDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubMessage_SetConnectionDeviceId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[508]"></a>IoTHubMessage_SetConnectionModuleId</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_SetConnectionModuleId))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubMessage_SetConnectionModuleId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[509]"></a>IoTHubMessage_SetContentEncodingSystemProperty</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_SetContentEncodingSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubMessage_SetContentEncodingSystemProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[50a]"></a>IoTHubMessage_SetContentTypeSystemProperty</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_SetContentTypeSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubMessage_SetContentTypeSystemProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[50b]"></a>IoTHubMessage_SetCorrelationId</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_SetCorrelationId))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubMessage_SetCorrelationId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[4ef]"></a>IoTHubMessage_SetDiagnosticPropertyData</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, iothub_message.o(i.IoTHubMessage_SetDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IoTHubMessage_SetDiagnosticPropertyData &rArr; CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDiagnosticPropertyData
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
</UL>

<P><STRONG><a name="[50c]"></a>IoTHubMessage_SetInputName</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, iothub_message.o(i.IoTHubMessage_SetInputName))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubMessage_SetInputName &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
</UL>

<P><STRONG><a name="[50d]"></a>IoTHubMessage_SetMessageId</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_SetMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubMessage_SetMessageId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
</UL>

<P><STRONG><a name="[50e]"></a>IoTHubTransport_MQTT_Common_Create</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = IoTHubTransport_MQTT_Common_Create &rArr; InitializeTransportHandleData &rArr; buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHub_Transport_ValidateCallbacks
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Create
</UL>

<P><STRONG><a name="[50f]"></a>IoTHubTransport_MQTT_Common_Destroy</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = IoTHubTransport_MQTT_Common_Destroy &rArr; DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Destroy
</UL>

<P><STRONG><a name="[510]"></a>IoTHubTransport_MQTT_Common_DeviceMethod_Response</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_DeviceMethod_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = IoTHubTransport_MQTT_Common_DeviceMethod_Response &rArr; publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_DeviceMethod_Response
</UL>

<P><STRONG><a name="[511]"></a>IoTHubTransport_MQTT_Common_DoWork</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = IoTHubTransport_MQTT_Common_DoWork &rArr; InitializeConnection &rArr; SendMqttConnectMsg &rArr; GetTransportProviderIfNecessary &rArr; IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPendingGetTwinRequests
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_twin_get_message
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_DoWork
</UL>

<P><STRONG><a name="[512]"></a>IoTHubTransport_MQTT_Common_GetHostname</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_GetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubTransport_MQTT_Common_GetHostname &rArr; STRING_clone &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_GetHostname
</UL>

<P><STRONG><a name="[513]"></a>IoTHubTransport_MQTT_Common_GetSendStatus</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_GetSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_GetSendStatus
</UL>

<P><STRONG><a name="[514]"></a>IoTHubTransport_MQTT_Common_GetTwinAsync</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_GetTwinAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IoTHubTransport_MQTT_Common_GetTwinAsync &rArr; create_device_twin_get_message &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_twin_get_message
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_GetTwinAsync
</UL>

<P><STRONG><a name="[515]"></a>IoTHubTransport_MQTT_Common_ProcessItem</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_ProcessItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = IoTHubTransport_MQTT_Common_ProcessItem &rArr; publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_ProcessItem
</UL>

<P><STRONG><a name="[516]"></a>IoTHubTransport_MQTT_Common_Register</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IoTHubTransport_MQTT_Common_Register &rArr; IoTHubClient_Auth_Get_DeviceKey
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_DeviceKey
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Register
</UL>

<P><STRONG><a name="[517]"></a>IoTHubTransport_MQTT_Common_SendMessageDisposition</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SendMessageDisposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubTransport_MQTT_Common_SendMessageDisposition &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SendMessageDisposition
</UL>

<P><STRONG><a name="[518]"></a>IoTHubTransport_MQTT_Common_SetOption</STRONG> (Thumb, 626 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = IoTHubTransport_MQTT_Common_SetOption &rArr; GetTransportProviderIfNecessary &rArr; IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_x509_Type
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_set_trace
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SetOption
</UL>

<P><STRONG><a name="[519]"></a>IoTHubTransport_MQTT_Common_SetRetryPolicy</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubTransport_MQTT_Common_SetRetryPolicy &rArr; retry_control_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SetRetryPolicy
</UL>

<P><STRONG><a name="[51a]"></a>IoTHubTransport_MQTT_Common_Subscribe</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeStateToSubscribeIfAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe
</UL>

<P><STRONG><a name="[51b]"></a>IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod &rArr; STRING_construct &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeStateToSubscribeIfAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe_DeviceMethod
</UL>

<P><STRONG><a name="[51c]"></a>IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin &rArr; STRING_construct &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeStateToSubscribeIfAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe_DeviceTwin
</UL>

<P><STRONG><a name="[533]"></a>IoTHubTransport_MQTT_Common_Subscribe_InputQueue</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe_InputQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe_InputQueue &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeStateToSubscribeIfAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotHubTransportMqtt_Subscribe_InputQueue
</UL>

<P><STRONG><a name="[51d]"></a>IoTHubTransport_MQTT_Common_Unregister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unregister))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unregister
</UL>

<P><STRONG><a name="[51e]"></a>IoTHubTransport_MQTT_Common_Unsubscribe</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe
</UL>

<P><STRONG><a name="[51f]"></a>IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe_DeviceMethod
</UL>

<P><STRONG><a name="[520]"></a>IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin &rArr; STRING_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe_DeviceTwin
</UL>

<P><STRONG><a name="[535]"></a>IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotHubTransportMqtt_Unsubscribe_InputQueue
</UL>

<P><STRONG><a name="[536]"></a>IoTHubTransport_MQTT_SetCallbackContext</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_SetCallbackContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubTransport_MQTT_SetCallbackContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IotHubTransportMqtt_SetCallbackContext
</UL>

<P><STRONG><a name="[521]"></a>IoTHub_Transport_ValidateCallbacks</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iothub_transport_ll_private.o(i.IoTHub_Transport_ValidateCallbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHub_Transport_ValidateCallbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
</UL>

<P><STRONG><a name="[395]"></a>JSONDecoder_JSON_To_MultiTree</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = JSONDecoder_JSON_To_MultiTree &rArr; ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
</UL>

<P><STRONG><a name="[2cb]"></a>JSONEncoder_EncodeTree</STRONG> (Thumb, 804 bytes, Stack size 88 bytes, jsonencoder.o(i.JSONEncoder_EncodeTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = JSONEncoder_EncodeTree &rArr;  JSONEncoder_EncodeTree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ENCODER_RESULTStrings
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[53a]"></a>JSON_ENCODER_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jsonencoder.o(i.JSON_ENCODER_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[9d4]"></a>JSON_ENCODER_TOSTRING_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jsonencoder.o(i.JSON_ENCODER_TOSTRING_RESULTStrings), UNUSED)

<P><STRONG><a name="[53b]"></a>LedToggle</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, azurexcubesample.o(i.LedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LedToggle &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggleWRAPPER
</UL>

<P><STRONG><a name="[53d]"></a>Led_Blink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.Led_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Led_Blink &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[53c]"></a>Led_SetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.Led_SetState))
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Blink
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>

<P><STRONG><a name="[54f]"></a>MAP_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, map.o(i.MAP_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
</UL>

<P><STRONG><a name="[53e]"></a>MFX_IO_DeInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.MFX_IO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MFX_IO_DeInit &rArr; I2C2_DeInit &rArr; I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DeInit
</UL>

<P><STRONG><a name="[53f]"></a>MFX_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.MFX_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MFX_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ReadID
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Start
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqTypeMode
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqEvtMode
</UL>

<P><STRONG><a name="[540]"></a>MFX_IO_EnableWakeupPin</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.MFX_IO_EnableWakeupPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MFX_IO_EnableWakeupPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_WakeUp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_LowPower
</UL>

<P><STRONG><a name="[541]"></a>MFX_IO_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.MFX_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MFX_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnableIT
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_EnableIT
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_EnableIT
</UL>

<P><STRONG><a name="[542]"></a>MFX_IO_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.MFX_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MFX_IO_Init &rArr; I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ReadID
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[543]"></a>MFX_IO_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l496g_discovery.o(i.MFX_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ReadID
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Start
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_ReadPin
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_ITStatus
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Start
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_GetITStatus
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Config
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_ReadSrc
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_ReadMsg
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_GetITStatus
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>

<P><STRONG><a name="[544]"></a>MFX_IO_ReadMultiple</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.MFX_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MFX_IO_ReadMultiple &rArr; I2C2_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_GetValue
</UL>

<P><STRONG><a name="[545]"></a>MFX_IO_Wakeup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l496g_discovery.o(i.MFX_IO_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MFX_IO_Wakeup &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_WakeUp
</UL>

<P><STRONG><a name="[546]"></a>MFX_IO_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm32l496g_discovery.o(i.MFX_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Reset
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_LowPower
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Start
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_ClearIT
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Start
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_Config
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ClearGlobalIT
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>

<P><STRONG><a name="[8bb]"></a>MQTT_CLIENT_EVENT_ERRORStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.MQTT_CLIENT_EVENT_ERRORStrings))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
</UL>

<P><STRONG><a name="[fc]"></a>MQTT_Protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.MQTT_Protocol))
<BR>[Address Reference Count : 2]<UL><LI> azurexcubesample.o(i.cloud_run)
<LI> azurexcubesample.o(i.directIoTHubRegistration)
</UL>
<P><STRONG><a name="[55a]"></a>MULTITREE_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, multitree.o(i.MULTITREE_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
</UL>

<P><STRONG><a name="[54a]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54b]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54e]"></a>Map_AddOrUpdate</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, map.o(i.Map_AddOrUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP_RESULTStrings
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[4f9]"></a>Map_Clone</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, map.o(i.Map_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[4fb]"></a>Map_Create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, map.o(i.Map_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Map_Create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[404]"></a>Map_Destroy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, map.o(i.Map_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>

<P><STRONG><a name="[554]"></a>Map_GetInternals</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, map.o(i.Map_GetInternals))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Map_GetInternals
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAP_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[4d]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[49d]"></a>MethodReturn_Create</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, methodreturn.o(i.MethodReturn_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MethodReturn_Create &rArr; is_json_present_and_unparsable &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_json_present_and_unparsable
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hello
</UL>

<P><STRONG><a name="[40b]"></a>MethodReturn_Destroy</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, methodreturn.o(i.MethodReturn_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MethodReturn_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
</UL>

<P><STRONG><a name="[40a]"></a>MethodReturn_GetReturn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, methodreturn.o(i.MethodReturn_GetReturn))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
</UL>

<P><STRONG><a name="[558]"></a>MultiTree_AddChild</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_AddChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MultiTree_AddChild &rArr; createLeaf &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[2ca]"></a>MultiTree_AddLeaf</STRONG> (Thumb, 462 bytes, Stack size 168 bytes, multitree.o(i.MultiTree_AddLeaf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[2c9]"></a>MultiTree_Create</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MultiTree_Create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[2cc]"></a>MultiTree_Destroy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, multitree.o(i.MultiTree_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = MultiTree_Destroy &rArr;  MultiTree_Destroy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[40d]"></a>MultiTree_GetChild</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_GetChild
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[3eb]"></a>MultiTree_GetChildByName</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, multitree.o(i.MultiTree_GetChildByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MultiTree_GetChildByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[40c]"></a>MultiTree_GetChildCount</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetChildCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_GetChildCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[40e]"></a>MultiTree_GetName</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MultiTree_GetName &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[3f9]"></a>MultiTree_GetValue</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[55c]"></a>MultiTree_SetValue</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, multitree.o(i.MultiTree_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTITREE_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[4b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[55d]"></a>OptionHandler_AddOption</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, optionhandler.o(i.OptionHandler_AddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
</UL>

<P><STRONG><a name="[55e]"></a>OptionHandler_Create</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, optionhandler.o(i.OptionHandler_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OptionHandler_Create &rArr; CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_retrieveoptions
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
</UL>

<P><STRONG><a name="[55f]"></a>OptionHandler_Destroy</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, optionhandler.o(i.OptionHandler_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_DestroyOption
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
</UL>

<P><STRONG><a name="[43c]"></a>OptionHandler_FeedOptions</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, optionhandler.o(i.OptionHandler_FeedOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
</UL>

<P><STRONG><a name="[3cc]"></a>PROV_DEVICE_REG_STATUSStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, azurexcubesample.o(i.PROV_DEVICE_REG_STATUSStrings))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPSRegistrationStatusCallBack
</UL>

<P><STRONG><a name="[565]"></a>Periph_Config</STRONG> (Thumb, 76 bytes, Stack size 152 bytes, stm32l4xx_hal_msp.o(i.Periph_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Periph_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[575]"></a>Prov_Device_LL_Create</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, prov_device_ll_client.o(i.Prov_Device_LL_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Prov_Device_LL_Create &rArr; prov_auth_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_instance
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_type
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[579]"></a>Prov_Device_LL_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prov_device_ll_client.o(i.Prov_Device_LL_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Prov_Device_LL_Destroy &rArr; destroy_instance &rArr; cleanup_prov_info &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[57a]"></a>Prov_Device_LL_DoWork</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, prov_device_ll_client.o(i.Prov_Device_LL_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Prov_Device_LL_DoWork &rArr; cleanup_prov_info &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_prov_info
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[66e]"></a>Prov_Device_LL_GetVersionString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_device_ll_client.o(i.Prov_Device_LL_GetVersionString))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[57c]"></a>Prov_Device_LL_Register_Device</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, prov_device_ll_client.o(i.Prov_Device_LL_Register_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = Prov_Device_LL_Register_Device &rArr; prov_auth_get_registration_id &rArr; load_registration_id &rArr; SHA256Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_storage_key
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_registration_id
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_endorsement_key
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_certificate
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_alias_key
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[582]"></a>Prov_Device_LL_SetOption</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, prov_device_ll_client.o(i.Prov_Device_LL_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Prov_Device_LL_SetOption &rArr; prov_auth_set_registration_id &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_set_registration_id
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[fd]"></a>Prov_Device_MQTT_Protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.Prov_Device_MQTT_Protocol))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.cloud_run)
</UL>
<P><STRONG><a name="[569]"></a>QOS_VALUEStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_client.o(i.QOS_VALUEStrings))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[585]"></a>RIOT_DSASignDigest</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, riotecc.o(i.RIOT_DSASignDigest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268<LI>Call Chain = RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigIntToBigVal
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Sign
</UL>

<P><STRONG><a name="[586]"></a>RIOT_DeriveDsaKeyPair</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, riotecc.o(i.RIOT_DeriveDsaKeyPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148<LI>Call Chain = RIOT_DeriveDsaKeyPair &rArr; ECDH_derive &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_derive
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_DeriveEccKey
</UL>

<P><STRONG><a name="[587]"></a>RIOT_HMAC_SHA256_Final</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, riothmac.o(i.RIOT_HMAC_SHA256_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RIOT_HMAC_SHA256_Final &rArr; RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_KDF_SHA256
</UL>

<P><STRONG><a name="[58b]"></a>RIOT_HMAC_SHA256_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, riothmac.o(i.RIOT_HMAC_SHA256_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RIOT_HMAC_SHA256_Init &rArr; RIOT_SHA256_Block_ctx &rArr; RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Block_ctx
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_KDF_SHA256
</UL>

<P><STRONG><a name="[58d]"></a>RIOT_HMAC_SHA256_Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, riothmac.o(i.RIOT_HMAC_SHA256_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RIOT_HMAC_SHA256_Update &rArr; RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_KDF_SHA256
</UL>

<P><STRONG><a name="[41e]"></a>RIOT_KDF_FIXED</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, riotkdf.o(i.RIOT_KDF_FIXED))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RIOT_KDF_FIXED &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_derive
</UL>

<P><STRONG><a name="[41f]"></a>RIOT_KDF_SHA256</STRONG> (Thumb, 62 bytes, Stack size 200 bytes, riotkdf.o(i.RIOT_KDF_SHA256))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RIOT_KDF_SHA256 &rArr; RIOT_HMAC_SHA256_Init &rArr; RIOT_SHA256_Block_ctx &rArr; RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Update
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_derive
</UL>

<P><STRONG><a name="[58c]"></a>RIOT_SHA256_Block_ctx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, riotsha256.o(i.RIOT_SHA256_Block_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RIOT_SHA256_Block_ctx &rArr; RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Init
</UL>

<P><STRONG><a name="[588]"></a>RIOT_SHA256_Final</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, riotsha256.o(i.RIOT_SHA256_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RIOT_SHA256_Final &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Transform
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash2
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Final
</UL>

<P><STRONG><a name="[589]"></a>RIOT_SHA256_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, riotsha256.o(i.RIOT_SHA256_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RIOT_SHA256_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash2
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Block_ctx
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Final
</UL>

<P><STRONG><a name="[58a]"></a>RIOT_SHA256_Update</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, riotsha256.o(i.RIOT_SHA256_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Transform
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash2
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Block_ctx
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Update
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_HMAC_SHA256_Final
</UL>

<P><STRONG><a name="[472]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[479]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[476]"></a>RTC_EnterInitMode</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[477]"></a>RTC_ExitInitMode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32l4xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[590]"></a>RXFIFO_getFreeBytes</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ipc_rxfifo.o(i.RXFIFO_getFreeBytes))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_incrementHead
</UL>

<P><STRONG><a name="[4aa]"></a>RXFIFO_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipc_rxfifo.o(i.RXFIFO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RXFIFO_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_reset_uart
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_open_uart
</UL>

<P><STRONG><a name="[4ad]"></a>RXFIFO_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ipc_rxfifo.o(i.RXFIFO_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_incrementTail
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_receive_uart
</UL>

<P><STRONG><a name="[cf]"></a>RXFIFO_writeCharacter</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ipc_rxfifo.o(i.RXFIFO_writeCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RXFIFO_writeCharacter &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_incrementHead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc_uart.o(i.IPC_open_uart)
</UL>
<P><STRONG><a name="[592]"></a>Reboot</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, azurexcubesample.o(i.Reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Reboot &rArr; MethodReturn_Create &rArr; is_json_present_and_unparsable &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootWRAPPER
</UL>

<P><STRONG><a name="[594]"></a>RiotCrypt_DeriveEccKey</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, riotcrypt.o(i.RiotCrypt_DeriveEccKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220<LI>Call Chain = RiotCrypt_DeriveEccKey &rArr; RIOT_DeriveDsaKeyPair &rArr; ECDH_derive &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_DeriveDsaKeyPair
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[595]"></a>RiotCrypt_ExportEccPub</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, riotcrypt.o(i.RiotCrypt_ExportEccPub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RiotCrypt_ExportEccPub &rArr; BigValToBigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigValToBigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREccPub
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
</UL>

<P><STRONG><a name="[597]"></a>RiotCrypt_Hash</STRONG> (Thumb, 48 bytes, Stack size 128 bytes, riotcrypt.o(i.RiotCrypt_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RiotCrypt_Hash &rArr; RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Sign
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[598]"></a>RiotCrypt_Hash2</STRONG> (Thumb, 66 bytes, Stack size 136 bytes, riotcrypt.o(i.RiotCrypt_Hash2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RiotCrypt_Hash2 &rArr; RIOT_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[599]"></a>RiotCrypt_Sign</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, riotcrypt.o(i.RiotCrypt_Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316<LI>Call Chain = RiotCrypt_Sign &rArr; RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_DSASignDigest
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
</UL>

<P><STRONG><a name="[4ea]"></a>SASToken_CreateString</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, sastoken.o(i.SASToken_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
</UL>

<P><STRONG><a name="[4ec]"></a>SASToken_Validate</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, sastoken.o(i.SASToken_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SASToken_Validate &rArr; get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
</UL>

<P><STRONG><a name="[2bc]"></a>SCHEMA_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, schema.o(i.SCHEMA_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyCount
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyByIndex
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyType
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyName
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentCount
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentByIndex
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentName
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentType
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentName
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddDeviceRef
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>

<P><STRONG><a name="[59f]"></a>SHA1Input</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, azure_sha1.o(i.SHA1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SHA1Input &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[5e9]"></a>SHA1Reset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, azure_sha1.o(i.SHA1Reset))
<BR><BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[5a1]"></a>SHA1Result</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, azure_sha1.o(i.SHA1Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SHA1Result &rArr; SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[5a2]"></a>SHA224Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha224.o(i.SHA224Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SHA224Input &rArr; SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[5a4]"></a>SHA224Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Reset))
<BR><BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[5a6]"></a>SHA224Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA224Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[5a3]"></a>SHA256Input</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sha224.o(i.SHA256Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_registration_id
</UL>

<P><STRONG><a name="[5ab]"></a>SHA256Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Reset))
<BR><BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_registration_id
</UL>

<P><STRONG><a name="[5ac]"></a>SHA256Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA256Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_registration_id
</UL>

<P><STRONG><a name="[5ad]"></a>SHA384Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384Input &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[5af]"></a>SHA384Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[5b1]"></a>SHA384Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = SHA384Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[5ae]"></a>SHA512Input</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sha384-512.o(i.SHA512Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
</UL>

<P><STRONG><a name="[5b6]"></a>SHA512Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA512Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[5b7]"></a>SHA512Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[4c1]"></a>STRING_TOKENIZER_create</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = STRING_TOKENIZER_create &rArr; STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[5b8]"></a>STRING_TOKENIZER_create_from_char</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create_from_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
</UL>

<P><STRONG><a name="[4c3]"></a>STRING_TOKENIZER_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, string_tokenizer.o(i.STRING_TOKENIZER_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_TOKENIZER_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
</UL>

<P><STRONG><a name="[4c2]"></a>STRING_TOKENIZER_get_next_token</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, string_tokenizer.o(i.STRING_TOKENIZER_get_next_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
</UL>

<P><STRONG><a name="[386]"></a>STRING_c_str</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strings.o(i.STRING_c_str))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_event_equal_for_match
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_GetProductInfo
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_InputQueue
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertyToTopicString
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
</UL>

<P><STRONG><a name="[3b5]"></a>STRING_clone</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, strings.o(i.STRING_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STRING_clone &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[2c3]"></a>STRING_concat</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, strings.o(i.STRING_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STRING_concat &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[2c5]"></a>STRING_concat_with_STRING</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, strings.o(i.STRING_concat_with_STRING))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[4b9]"></a>STRING_construct</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, strings.o(i.STRING_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STRING_construct &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_platform_info
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_DecodeString
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToNotifyStateIfNeeded
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[3a7]"></a>STRING_construct_n</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, strings.o(i.STRING_construct_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STRING_construct_n &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[4ba]"></a>STRING_construct_sprintf</STRONG> (Thumb, 208 bytes, Stack size 560 bytes, strings.o(i.STRING_construct_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_InputQueue
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildConfigForUsername
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[5bb]"></a>STRING_copy</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, strings.o(i.STRING_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_copy &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[5b9]"></a>STRING_copy_n</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, strings.o(i.STRING_copy_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STRING_copy_n &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
</UL>

<P><STRONG><a name="[385]"></a>STRING_delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, strings.o(i.STRING_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetOption
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_event
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_DecodeString
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertyToTopicString
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[3d1]"></a>STRING_length</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, strings.o(i.STRING_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STRING_length
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>

<P><STRONG><a name="[2dc]"></a>STRING_new</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, strings.o(i.STRING_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode_Bytes
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>

<P><STRONG><a name="[2fa]"></a>STRING_new_with_memory</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, strings.o(i.STRING_new_with_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_url_data
</UL>

<P><STRONG><a name="[56c]"></a>STRING_sprintf</STRONG> (Thumb, 232 bytes, Stack size 568 bytes, strings.o(i.STRING_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertyToTopicString
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[36d]"></a>Schema_AddDeviceRef</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, schema.o(i.Schema_AddDeviceRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_AddDeviceRef
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[5be]"></a>Schema_AddModelActionArgument</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, schema.o(i.Schema_AddModelActionArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_AddModelActionArgument &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5bf]"></a>Schema_AddModelDesiredProperty</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, schema.o(i.Schema_AddModelDesiredProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5c0]"></a>Schema_AddModelMethodArgument</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, schema.o(i.Schema_AddModelMethodArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Schema_AddModelMethodArgument &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5c1]"></a>Schema_AddModelModel</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, schema.o(i.Schema_AddModelModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Schema_AddModelModel &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5c2]"></a>Schema_AddModelProperty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, schema.o(i.Schema_AddModelProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_AddModelProperty &rArr; AddModelProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5c3]"></a>Schema_AddModelReportedProperty</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, schema.o(i.Schema_AddModelReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Schema_AddModelReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5c4]"></a>Schema_AddStructTypeProperty</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, schema.o(i.Schema_AddStructTypeProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_AddStructTypeProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
</UL>

<P><STRONG><a name="[37d]"></a>Schema_Create</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, schema.o(i.Schema_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Schema_Create &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[5c5]"></a>Schema_CreateModelAction</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, schema.o(i.Schema_CreateModelAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_CreateModelAction &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5c6]"></a>Schema_CreateModelMethod</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, schema.o(i.Schema_CreateModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Schema_CreateModelMethod &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5c7]"></a>Schema_CreateModelType</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, schema.o(i.Schema_CreateModelType))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Schema_CreateModelType &rArr; VECTOR_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>

<P><STRONG><a name="[5c8]"></a>Schema_CreateStructType</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, schema.o(i.Schema_CreateStructType))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_CreateStructType &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
</UL>

<P><STRONG><a name="[380]"></a>Schema_Destroy</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, schema.o(i.Schema_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Schema_Destroy &rArr; DestroyModel &rArr; DestroyMethods &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[3ef]"></a>Schema_GetActionArgumentName</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetActionArgumentName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetActionArgumentName
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[3f0]"></a>Schema_GetActionArgumentType</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetActionArgumentType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetActionArgumentType
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[3f6]"></a>Schema_GetMethodArgumentName</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetMethodArgumentName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetMethodArgumentName
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[3f7]"></a>Schema_GetMethodArgumentType</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, schema.o(i.Schema_GetMethodArgumentType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Schema_GetMethodArgumentType
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[3ee]"></a>Schema_GetModelActionArgumentByIndex</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelActionArgumentByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelActionArgumentByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[3ed]"></a>Schema_GetModelActionArgumentCount</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelActionArgumentCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelActionArgumentCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[3ec]"></a>Schema_GetModelActionByName</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelActionByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelActionByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[5ca]"></a>Schema_GetModelByName</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[5cb]"></a>Schema_GetModelDesiredPropertyByIndex</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, schema.o(i.Schema_GetModelDesiredPropertyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Schema_GetModelDesiredPropertyByIndex &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[5cc]"></a>Schema_GetModelDesiredPropertyCount</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelDesiredPropertyCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Schema_GetModelDesiredPropertyCount &rArr; VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[5cd]"></a>Schema_GetModelDesiredProperty_offset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelDesiredProperty_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelDesiredProperty_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[5ce]"></a>Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[3f5]"></a>Schema_GetModelMethodArgumentByIndex</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelMethodArgumentByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Schema_GetModelMethodArgumentByIndex &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[3f4]"></a>Schema_GetModelMethodArgumentCount</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelMethodArgumentCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelMethodArgumentCount &rArr; VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[3f3]"></a>Schema_GetModelMethodByName</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, schema.o(i.Schema_GetModelMethodByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Schema_GetModelMethodByName &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[5cf]"></a>Schema_GetModelModelByIndex_Offset</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelModelByIndex_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Schema_GetModelModelByIndex_Offset &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[5bd]"></a>Schema_GetModelModelByName</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, schema.o(i.Schema_GetModelModelByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Schema_GetModelModelByName &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
</UL>

<P><STRONG><a name="[5d0]"></a>Schema_GetModelModelCount</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelModelCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetModelModelCount &rArr; VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[5d1]"></a>Schema_GetModelModelyByIndex</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, schema.o(i.Schema_GetModelModelyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Schema_GetModelModelyByIndex &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[377]"></a>Schema_GetModelName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelName))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
</UL>

<P><STRONG><a name="[3ff]"></a>Schema_GetPropertyName</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetPropertyName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetPropertyName
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[400]"></a>Schema_GetPropertyType</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, schema.o(i.Schema_GetPropertyType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetPropertyType
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[37c]"></a>Schema_GetSchemaByNamespace</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, schema.o(i.Schema_GetSchemaByNamespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Schema_GetSchemaByNamespace &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[3f8]"></a>Schema_GetSchemaForModelType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, schema.o(i.Schema_GetSchemaForModelType))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
</UL>

<P><STRONG><a name="[3fc]"></a>Schema_GetStructTypeByName</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, schema.o(i.Schema_GetStructTypeByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Schema_GetStructTypeByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[3fe]"></a>Schema_GetStructTypePropertyByIndex</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, schema.o(i.Schema_GetStructTypePropertyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetStructTypePropertyByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[3fd]"></a>Schema_GetStructTypePropertyCount</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, schema.o(i.Schema_GetStructTypePropertyCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetStructTypePropertyCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[3e5]"></a>Schema_ModelPropertyByPathExists</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, schema.o(i.Schema_ModelPropertyByPathExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Schema_ModelPropertyByPathExists &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
</UL>

<P><STRONG><a name="[3e7]"></a>Schema_ModelReportedPropertyByPathExists</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, schema.o(i.Schema_ModelReportedPropertyByPathExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Schema_ModelReportedPropertyByPathExists &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
</UL>

<P><STRONG><a name="[537]"></a>SkipWhiteSpaces</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, jsondecoder.o(i.SkipWhiteSpaces))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[f4]"></a>SysCtrl_BG96_getDeviceDescriptor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sysctrl_specific_bg96.o(i.SysCtrl_BG96_getDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SysCtrl_BG96_getDeviceDescriptor &rArr; SysCtrl_BG96_setup &rArr; traceIF_uartPrint &rArr; traceIF_uartTransmit &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_init
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
</UL>
<P><STRONG><a name="[f6]"></a>SysCtrl_BG96_power_off</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sysctrl_specific_bg96.o(i.SysCtrl_BG96_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysCtrl_BG96_power_off &rArr; SysCtrl_delay &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
</UL>
<P><STRONG><a name="[f5]"></a>SysCtrl_BG96_power_on</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sysctrl_specific_bg96.o(i.SysCtrl_BG96_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SysCtrl_BG96_power_on &rArr; traceIF_uartPrint &rArr; traceIF_uartTransmit &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartPrint
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_itmPrint
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crs_strlen
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_delay
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
</UL>
<P><STRONG><a name="[f7]"></a>SysCtrl_BG96_reset</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sysctrl_specific_bg96.o(i.SysCtrl_BG96_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysCtrl_BG96_reset &rArr; traceIF_uartPrint &rArr; traceIF_uartTransmit &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartPrint
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_itmPrint
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crs_strlen
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_delay
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
</UL>
<P><STRONG><a name="[f8]"></a>SysCtrl_BG96_sim_select</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, sysctrl_specific_bg96.o(i.SysCtrl_BG96_sim_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SysCtrl_BG96_sim_select &rArr; traceIF_uartPrint &rArr; traceIF_uartTransmit &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartPrint
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_itmPrint
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crs_strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs)
</UL>
<P><STRONG><a name="[5d8]"></a>SysCtrl_delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysctrl.o(i.SysCtrl_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysCtrl_delay &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_off
</UL>

<P><STRONG><a name="[355]"></a>SysCtrl_getDeviceDescriptor</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sysctrl.o(i.SysCtrl_getDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtrl_getDeviceDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcma_init_sysctrl_func_ptrs
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init
</UL>

<P><STRONG><a name="[358]"></a>SysCtrl_power_off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.SysCtrl_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtrl_power_off
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_off
</UL>

<P><STRONG><a name="[35a]"></a>SysCtrl_power_on</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.SysCtrl_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtrl_power_on
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_on
</UL>

<P><STRONG><a name="[91b]"></a>SysCtrl_reset_device</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.SysCtrl_reset_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtrl_reset_device
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_HW_reset
</UL>

<P><STRONG><a name="[641]"></a>SysCtrl_sim_select</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(i.SysCtrl_sim_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtrl_sim_select
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_select_hw_simslot
</UL>

<P><STRONG><a name="[53]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[47d]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[417]"></a>ThreadAPI_Sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, threadapi_stm32cube.o(i.ThreadAPI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>

<P><STRONG><a name="[5de]"></a>TimingSystemGetSystemTime</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, stm32cubertcinterface.o(i.TimingSystemGetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[491]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[492]"></a>UART_CheckIdleState</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[490]"></a>UART_SetConfig</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[495]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5e1]"></a>URL_Decode</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, urlencode.o(i.URL_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = URL_Decode &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDecodedString
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDecodedStringSize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_DecodeString
</UL>

<P><STRONG><a name="[5e4]"></a>URL_DecodeString</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, urlencode.o(i.URL_DecodeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = URL_DecodeString &rArr; URL_Decode &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[5e5]"></a>URL_Encode</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, urlencode.o(i.URL_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = URL_Encode &rArr; encode_url_data &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_url_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
</UL>

<P><STRONG><a name="[5d3]"></a>URL_EncodeString</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, urlencode.o(i.URL_EncodeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = URL_EncodeString &rArr; encode_url_data &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_url_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertyToTopicString
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
</UL>

<P><STRONG><a name="[79]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; IPC_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; IPC_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[73d]"></a>USHABlockSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usha.o(i.USHABlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[73e]"></a>USHAHashSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usha.o(i.USHAHashSize))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[5e7]"></a>USHAInput</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usha.o(i.USHAInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>

<P><STRONG><a name="[5e8]"></a>USHAReset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usha.o(i.USHAReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USHAReset &rArr; SHA512Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Reset
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[5ea]"></a>USHAResult</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usha.o(i.USHAResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[4f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx.o(RESET)
</UL>
<P><STRONG><a name="[408]"></a>VECTOR_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, vector.o(i.VECTOR_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VECTOR_clear &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[3ae]"></a>VECTOR_create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, vector.o(i.VECTOR_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VECTOR_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
</UL>

<P><STRONG><a name="[3e2]"></a>VECTOR_destroy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vector.o(i.VECTOR_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
</UL>

<P><STRONG><a name="[3d6]"></a>VECTOR_element</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, vector.o(i.VECTOR_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
</UL>

<P><STRONG><a name="[5c9]"></a>VECTOR_erase</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, vector.o(i.VECTOR_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VECTOR_erase &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>

<P><STRONG><a name="[3e8]"></a>VECTOR_find_if</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, vector.o(i.VECTOR_find_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaByNamespace
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
</UL>

<P><STRONG><a name="[2c1]"></a>VECTOR_push_back</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, vector.o(i.VECTOR_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
</UL>

<P><STRONG><a name="[3d5]"></a>VECTOR_size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, vector.o(i.VECTOR_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VECTOR_size
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
</UL>

<P><STRONG><a name="[5f4]"></a>X509GetAliasCertTBS</STRONG> (Thumb, 324 bytes, Stack size 104 bytes, riotx509bldr.o(i.X509GetAliasCertTBS))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = X509GetAliasCertTBS &rArr; X509AddX501Name &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddX501Name
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddExtensions
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddUTCTime
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddShortExplicitInteger
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_ExportEccPub
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[5f6]"></a>X509GetDERCsr</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, riotx509bldr.o(i.X509GetDERCsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = X509GetDERCsr &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERTbsToCert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartEnvelopingBitString
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigValToBigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
</UL>

<P><STRONG><a name="[5f8]"></a>X509GetDERCsrTbs</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, riotx509bldr.o(i.X509GetDERCsrTbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = X509GetDERCsrTbs &rArr; X509AddX501Name &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddX501Name
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartExplicit
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddInteger
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_ExportEccPub
</UL>
<BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
</UL>

<P><STRONG><a name="[5f9]"></a>X509GetDEREcc</STRONG> (Thumb, 164 bytes, Stack size 96 bytes, riotx509bldr.o(i.X509GetDEREcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = X509GetDEREcc &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartExplicit
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOctetString
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddInteger
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigValToBigInt
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_ExportEccPub
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_alias_key_pair
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
</UL>

<P><STRONG><a name="[5fa]"></a>X509GetDEREccPub</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, riotx509bldr.o(i.X509GetDEREccPub))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = X509GetDEREccPub &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_ExportEccPub
</UL>
<BR>[Called By]<UL><LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_id_public
</UL>

<P><STRONG><a name="[5fb]"></a>X509GetDeviceCertTBS</STRONG> (Thumb, 522 bytes, Stack size 96 bytes, riotx509bldr.o(i.X509GetDeviceCertTBS))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = X509GetDeviceCertTBS &rArr; X509AddX501Name &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509AddX501Name
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartExplicit
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartEnvelopingOctetString
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddUTCTime
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddShortExplicitInteger
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddInteger
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBoolean
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_ExportEccPub
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
</UL>

<P><STRONG><a name="[5fd]"></a>X509MakeAliasCert</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, riotx509bldr.o(i.X509MakeAliasCert))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = X509MakeAliasCert &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERTbsToCert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartEnvelopingBitString
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigValToBigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[5fe]"></a>X509MakeDeviceCert</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, riotx509bldr.o(i.X509MakeDeviceCert))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = X509MakeDeviceCert &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERTbsToCert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartEnvelopingBitString
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigValToBigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
</UL>

<P><STRONG><a name="[5ff]"></a>X509MakeRootCert</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, riotx509bldr.o(i.X509MakeRootCert))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = X509MakeRootCert &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERTbsToCert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartEnvelopingBitString
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERGetNestingDepth
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddIntegerFromArray
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigValToBigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
</UL>

<P><STRONG><a name="[600]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9d5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[311]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_set_credentials
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_net_driver
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_network_credentials
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_start
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_connect
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hnet_notify
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIoTDeviceConfig
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_get_mac_address
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceTwinReportedStateCallback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hello
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_x509_init
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDPSconnectionInfo
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAllCallbacks
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerIoTHubFromDPS
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDeviceRegistrationMethod
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directIoTHubRegistration
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHubDPSRegisterDeviceCallBack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPSRegistrationStatusCallBack
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init_locks
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_socket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_shutdown
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_setsockopt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_recv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_ping
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_init_class
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_stop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_start
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_disconnect
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_deinit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_connect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_close
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_set_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_notif_cb
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPrint
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_sock_send
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_sock_recv
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_check_tlsdata
</UL>

<P><STRONG><a name="[9d6]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9d7]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[602]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9d8]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[675]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_x509_init
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[9d9]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[9da]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[603]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9db]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[297]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_IPR
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_IFC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ESCAPE_CMD
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CREG
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CPIN
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_COPS
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CMEE
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGREG
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGPADDR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGEREP
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDATA
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGATT
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGACT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CFUN
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CEREG
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_AT_AND_D
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ATX
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ATV
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ATE
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QPING_BG96
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QISTATE_BG96
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QISEND_BG96
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIRD_BG96
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIOPEN_BG96
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIDNSGIP_BG96
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIDNSCFG_BG96
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QICLOSE_BG96
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIACT_BG96
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDCONT
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QPOWD_BG96
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QINDCFG_BG96
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QICSGP_BG96
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QENG_BG96
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QCFG_BG96
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CPSMS_BG96
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CEDRXS_BG96
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ATD_BG96
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_sim_select
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register_message
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_operation_status_message
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_username
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_translate_ip_address
</UL>

<P><STRONG><a name="[9dc]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9dd]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[604]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9de]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[9df]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[9e0]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[6a9]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
</UL>

<P><STRONG><a name="[605]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9e1]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[9e2]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[9e3]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[5ba]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>

<P><STRONG><a name="[613]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseHttpResponse
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[9e4]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[606]"></a>__hardfp_difftime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, difftime.o(i.__hardfp_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
</UL>

<P><STRONG><a name="[607]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_add_diagnostic_info
</UL>

<P><STRONG><a name="[608]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
</UL>

<P><STRONG><a name="[3a3]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[3a5]"></a>__hardfp_strtof</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[611]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[60b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[609]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[60f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[60c]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[610]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9e5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9e6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9e7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[60a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[263]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[736]"></a>app_needs_device_keypair</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azurexcubesample.o(i.app_needs_device_keypair))
<BR><BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTLSKeys
</UL>

<P><STRONG><a name="[924]"></a>app_needs_iot_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azurexcubesample.o(i.app_needs_iot_config))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[921]"></a>app_needs_root_ca</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azurexcubesample.o(i.app_needs_root_ca))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[2a9]"></a>atcc_analyzeCmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_modem_api.o(i.atcc_analyzeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcc_analyzeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_parse_rsp
</UL>

<P><STRONG><a name="[2aa]"></a>atcc_analyzeParam</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at_modem_api.o(i.atcc_analyzeParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atcc_analyzeParam &rArr; atcc_extractElement
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_parse_rsp
</UL>

<P><STRONG><a name="[2a4]"></a>atcc_checkEndOfMsgCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_modem_api.o(i.atcc_checkEndOfMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_init
</UL>

<P><STRONG><a name="[2a8]"></a>atcc_extractElement</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_modem_api.o(i.atcc_extractElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcc_extractElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CSQ
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CREG
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_COPS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGREG
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGPADDR
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGATT
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CEREG
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QPING_BG96
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QISTATE_BG96
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIRD_BG96
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIOPEN_BG96
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QINISTAT_BG96
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIND_BG96
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCSQ_BG96
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCFG_BG96
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QCCID_BG96
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN_BG96
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CFUN_BG96
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_CmeError
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_analyzeParam
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_parse_rsp
</UL>

<P><STRONG><a name="[29b]"></a>atcc_getCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_api.o(i.atcc_getCmd))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_ATcmd
</UL>

<P><STRONG><a name="[29f]"></a>atcc_get_error</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_api.o(i.atcc_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_error
</UL>

<P><STRONG><a name="[2a1]"></a>atcc_get_rsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_api.o(i.atcc_get_rsp))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_rsp
</UL>

<P><STRONG><a name="[2a2]"></a>atcc_get_urc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_api.o(i.atcc_get_urc))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_urc
</UL>

<P><STRONG><a name="[2a5]"></a>atcc_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_api.o(i.atcc_init))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_init
</UL>

<P><STRONG><a name="[2a7]"></a>atcc_initParsers</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_modem_api.o(i.atcc_initParsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atcc_initParsers
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcma_init_at_func_ptrs
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_initParsers
</UL>

<P><STRONG><a name="[2ab]"></a>atcc_terminateCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_api.o(i.atcc_terminateCmd))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_parse_rsp
</UL>

<P><STRONG><a name="[274]"></a>atcm_check_text_line_cmd</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, at_modem_common.o(i.atcm_check_text_line_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = atcm_check_text_line_cmd &rArr; fRspAnalyze_CGPADDR &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_IPR
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_GSN
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CIMI
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGSN
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGPADDR
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGMR
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGMM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGMI
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>

<P><STRONG><a name="[63f]"></a>atcm_convert_index_to_PDN_conf</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_convert_index_to_PDN_conf))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_persistent_context
</UL>

<P><STRONG><a name="[279]"></a>atcm_get_CmdAnalyzeFunc</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, at_modem_common.o(i.atcm_get_CmdAnalyzeFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = atcm_get_CmdAnalyzeFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeParam
</UL>

<P><STRONG><a name="[635]"></a>atcm_get_CmdBuildFunc</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, at_modem_common.o(i.atcm_get_CmdBuildFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = atcm_get_CmdBuildFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_build_cmd
</UL>

<P><STRONG><a name="[634]"></a>atcm_get_CmdStr</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, at_modem_common.o(i.atcm_get_CmdStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = atcm_get_CmdStr
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_build_cmd
</UL>

<P><STRONG><a name="[63d]"></a>atcm_get_CmdTimeout</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, at_modem_common.o(i.atcm_get_CmdTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = atcm_get_CmdTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_CMD_TIMEOUT
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_AT_CMD_ANSWER_OPTIONAL
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_AT_CMD
</UL>

<P><STRONG><a name="[632]"></a>atcm_get_IP_address_infos</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_get_IP_address_infos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atcm_get_IP_address_infos &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_rsp
</UL>

<P><STRONG><a name="[71c]"></a>atcm_get_PDPtypeStr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_get_PDPtypeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcm_get_PDPtypeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDCONT
</UL>

<P><STRONG><a name="[71a]"></a>atcm_get_affected_modem_cid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_get_affected_modem_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcm_get_affected_modem_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGPADDR
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDATA
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGACT
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QPING_BG96
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIOPEN_BG96
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIDNSGIP_BG96
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIDNSCFG_BG96
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIACT_BG96
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDCONT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QICSGP_BG96
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ATD_BG96
</UL>

<P><STRONG><a name="[636]"></a>atcm_get_cid_current_SID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_get_cid_current_SID))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGPADDR
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDATA
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGACT
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_rsp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QPING_BG96
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIDNSGIP_BG96
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIDNSCFG_BG96
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIACT_BG96
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDCONT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QICSGP_BG96
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_ATD_BG96
</UL>

<P><STRONG><a name="[71f]"></a>atcm_get_configID_for_modem_cid</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_get_configID_for_modem_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcm_get_configID_for_modem_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
</UL>

<P><STRONG><a name="[633]"></a>atcm_get_ip_address_type</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_get_ip_address_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcm_get_ip_address_type
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGPADDR
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIRD_BG96
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
</UL>

<P><STRONG><a name="[28d]"></a>atcm_modem_build_cmd</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, at_modem_common.o(i.atcm_modem_build_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = atcm_modem_build_cmd &rArr; atcm_get_CmdStr
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_CmdStr
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_CmdBuildFunc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[278]"></a>atcm_modem_event_received</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_modem_event_received))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIND_BG96
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>

<P><STRONG><a name="[28f]"></a>atcm_modem_get_error</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at_modem_common.o(i.atcm_modem_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atcm_modem_get_error &rArr; DATAPACK_writeStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_error
</UL>

<P><STRONG><a name="[290]"></a>atcm_modem_get_rsp</STRONG> (Thumb, 198 bytes, Stack size 96 bytes, at_modem_common.o(i.atcm_modem_get_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atcm_modem_get_rsp &rArr; DATAPACK_writeStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_IP_address_infos
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_rsp
</UL>

<P><STRONG><a name="[295]"></a>atcm_modem_get_urc</STRONG> (Thumb, 710 bytes, Stack size 32 bytes, at_modem_common.o(i.atcm_modem_get_urc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atcm_modem_get_urc &rArr; DATAPACK_writeStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_remaining_urc_data_pending
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_remaining_urc_closed_by_remote
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_hdlr_urc_closed_by_remote
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_hdle_urc_data_pending
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pdn_event
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_urc
</UL>

<P><STRONG><a name="[296]"></a>atcm_modem_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_modem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atcm_modem_init &rArr; atcm_reset_persistent_context &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SOCKET_context
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SID_context
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_CMD_context
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_persistent_context
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_init
</UL>

<P><STRONG><a name="[27e]"></a>atcm_modem_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_modem_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atcm_modem_reset &rArr; atcm_reset_persistent_context &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_SOCKET_context
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_CMD_context
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_persistent_context
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_rsp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[280]"></a>atcm_program_AT_CMD</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, at_modem_common.o(i.atcm_program_AT_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atcm_program_AT_CMD &rArr; atcm_get_CmdTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_CmdTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_unsubscribe_net_event
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_subscribe_net_event
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[282]"></a>atcm_program_AT_CMD_ANSWER_OPTIONAL</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, at_modem_common.o(i.atcm_program_AT_CMD_ANSWER_OPTIONAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atcm_program_AT_CMD_ANSWER_OPTIONAL &rArr; atcm_get_CmdTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_CmdTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[28c]"></a>atcm_program_CMD_TIMEOUT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_program_CMD_TIMEOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = atcm_program_CMD_TIMEOUT &rArr; atcm_get_CmdTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_CmdTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[281]"></a>atcm_program_NO_MORE_CMD</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_program_NO_MORE_CMD))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_unsubscribe_net_event
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_subscribe_net_event
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[289]"></a>atcm_program_SKIP_CMD</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_program_SKIP_CMD))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[27f]"></a>atcm_program_TEMPO</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_program_TEMPO))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[288]"></a>atcm_program_WAIT_EVENT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_program_WAIT_EVENT))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[63e]"></a>atcm_put_IP_address_infos</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_put_IP_address_infos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atcm_put_IP_address_infos &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGPADDR
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIACT_BG96
</UL>

<P><STRONG><a name="[27d]"></a>atcm_reset_CMD_context</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_reset_CMD_context))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_reset
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[293]"></a>atcm_reset_SID_context</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, at_modem_common.o(i.atcm_reset_SID_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atcm_reset_SID_context
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_rsp
</UL>

<P><STRONG><a name="[294]"></a>atcm_reset_SOCKET_context</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_modem_common.o(i.atcm_reset_SOCKET_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atcm_reset_SOCKET_context
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_reset
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_rsp
</UL>

<P><STRONG><a name="[63c]"></a>atcm_reset_persistent_context</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, at_modem_common.o(i.atcm_reset_persistent_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atcm_reset_persistent_context &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pdn_event
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_convert_index_to_PDN_conf
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_reset
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_init
</UL>

<P><STRONG><a name="[27c]"></a>atcm_retrieve_SID_parameters</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, at_modem_common.o(i.atcm_retrieve_SID_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atcm_retrieve_SID_parameters &rArr; DATAPACK_readStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readPtr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[273]"></a>atcm_searchCmdInLUT</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, at_modem_common.o(i.atcm_searchCmdInLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atcm_searchCmdInLUT &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>

<P><STRONG><a name="[28e]"></a>atcm_select_hw_simslot</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_modem_common.o(i.atcm_select_hw_simslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atcm_select_hw_simslot &rArr; SysCtrl_sim_select
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_sim_select
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[276]"></a>atcm_set_modem_data_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_common.o(i.atcm_set_modem_data_mode))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>

<P><STRONG><a name="[637]"></a>atcm_socket_get_hdle_urc_data_pending</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at_modem_socket.o(i.atcm_socket_get_hdle_urc_data_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcm_socket_get_hdle_urc_data_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_urc
</UL>

<P><STRONG><a name="[639]"></a>atcm_socket_get_hdlr_urc_closed_by_remote</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at_modem_socket.o(i.atcm_socket_get_hdlr_urc_closed_by_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcm_socket_get_hdlr_urc_closed_by_remote
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_urc
</UL>

<P><STRONG><a name="[71d]"></a>atcm_socket_get_modem_cid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_get_modem_cid))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIOPEN_BG96
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QISTATE_BG96
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QISEND_BG96
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIRD_BG96
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QIOPEN_BG96
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_QICLOSE_BG96
</UL>

<P><STRONG><a name="[724]"></a>atcm_socket_get_socket_handle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_modem_socket.o(i.atcm_socket_get_socket_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atcm_socket_get_socket_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QISTATE_BG96
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
</UL>

<P><STRONG><a name="[28a]"></a>atcm_socket_is_connected</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_is_connected))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[287]"></a>atcm_socket_release_modem_cid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_release_modem_cid))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_Error_BG96
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[63a]"></a>atcm_socket_remaining_urc_closed_by_remote</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_remaining_urc_closed_by_remote))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_urc
</UL>

<P><STRONG><a name="[638]"></a>atcm_socket_remaining_urc_data_pending</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_remaining_urc_data_pending))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_urc
</UL>

<P><STRONG><a name="[285]"></a>atcm_socket_reserve_modem_cid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_reserve_modem_cid))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[286]"></a>atcm_socket_set_connected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_set_connected))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[726]"></a>atcm_socket_set_urc_closed_by_remote</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_set_urc_closed_by_remote))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
</UL>

<P><STRONG><a name="[725]"></a>atcm_socket_set_urc_data_pending</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_modem_socket.o(i.atcm_socket_set_urc_data_pending))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_QIURC_BG96
</UL>

<P><STRONG><a name="[283]"></a>atcm_subscribe_net_event</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, at_modem_common.o(i.atcm_subscribe_net_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atcm_subscribe_net_event &rArr; atcm_program_AT_CMD &rArr; atcm_get_CmdTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_NO_MORE_CMD
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_AT_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[284]"></a>atcm_unsubscribe_net_event</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, at_modem_common.o(i.atcm_unsubscribe_net_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = atcm_unsubscribe_net_event &rArr; atcm_program_AT_CMD &rArr; atcm_get_CmdTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_NO_MORE_CMD
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_program_AT_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_getCmd
</UL>

<P><STRONG><a name="[277]"></a>atcm_validate_ping_request</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_modem_common.o(i.atcm_validate_ping_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atcm_validate_ping_request &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>

<P><STRONG><a name="[631]"></a>atcma_init_at_func_ptrs</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, at_custom_modem_api_bg96.o(i.atcma_init_at_func_ptrs))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_initParsers
</UL>

<P><STRONG><a name="[5db]"></a>atcma_init_sysctrl_func_ptrs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_custom_modem_api_bg96.o(i.atcma_init_sysctrl_func_ptrs))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_getDeviceDescriptor
</UL>

<P><STRONG><a name="[322]"></a>atcore_task_start</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, at_core.o(i.atcore_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atcore_task_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
</UL>

<P><STRONG><a name="[48]"></a>calloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net_os.o(i.calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = calloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDPSconnectionInfo
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>cellif_input</STRONG> (Thumb, 1954 bytes, Stack size 72 bytes, net_cellular.o(i.cellif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = cellif_input &rArr; cellular_set_config &rArr; dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_register_gen_event_cb
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_start
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_set_config
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(.constdata)
</UL>
<P><STRONG><a name="[654]"></a>cellular_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cellular_init.o(i.cellular_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cellular_init &rArr; CST_cellular_service_init &rArr; CS_init &rArr; AT_open &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_Init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_cellular_init
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_init
</UL>

<P><STRONG><a name="[7]"></a>cellular_net_driver</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_cellular.o(i.cellular_net_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cellular_net_driver &rArr; net_cellular_if_init &rArr; cellular_init &rArr; CST_cellular_service_init &rArr; CS_init &rArr; AT_open &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_init_class
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> set_credentials.o(.data)
</UL>
<P><STRONG><a name="[652]"></a>cellular_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cellular_init.o(i.cellular_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cellular_start &rArr; CST_cellular_service_start &rArr; atcore_task_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_start
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_mngt_radio_on
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_start
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
</UL>

<P><STRONG><a name="[923]"></a>checkIoTDeviceConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iot_flash_config.o(i.checkIoTDeviceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[922]"></a>checkTLSDeviceConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iot_flash_config.o(i.checkTLSDeviceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[920]"></a>checkTLSRootCA</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iot_flash_config.o(i.checkTLSRootCA))
<BR><BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[65f]"></a>cleanup_mqtt_data</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, prov_transport_mqtt_common.o(i.cleanup_mqtt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cleanup_mqtt_data &rArr; xio_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_destroy
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
</UL>

<P><STRONG><a name="[665]"></a>cloud_device_enter_credentials</STRONG> (Thumb, 114 bytes, Stack size 456 bytes, azurexcubesample.o(i.cloud_device_enter_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = cloud_device_enter_credentials &rArr; setIoTDeviceConfig &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIoTDeviceConfig
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDeviceRegistrationMethod
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[189]"></a>cloud_run</STRONG> (Thumb, 2490 bytes, Stack size 224 bytes, azurexcubesample.o(i.cloud_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 3644<LI>Call Chain = cloud_run &rArr; hsm_client_riot_create &rArr; process_riot_key_info &rArr; generate_root_ca_info &rArr; RiotCrypt_Sign &rArr; RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_deinit
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_get_mac_address
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTLSKeys
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTDeviceConfig
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_SetOption
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_GetVersionString
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_DoWork
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Destroy
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetState
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Blink
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForPush
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForMultiPush
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_destroy
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_left_ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_destroy
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDeviceRegistrationMethod
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDPSconnectionInfo
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAllCallbacks
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerIoTHubFromDPS
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDeviceRegistrationMethod
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directIoTHubRegistration
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[8c7]"></a>com_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_accept))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_accept
</UL>

<P><STRONG><a name="[9e8]"></a>com_accept_ip_modem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, com_sockets_ip_modem.o(i.com_accept_ip_modem), UNUSED)

<P><STRONG><a name="[8c8]"></a>com_bind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_bind))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_bind
</UL>

<P><STRONG><a name="[67a]"></a>com_bind_ip_modem</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, com_sockets_ip_modem.o(i.com_bind_ip_modem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_translate_ip_address
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_bind
</UL>

<P><STRONG><a name="[8ce]"></a>com_closeping</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_closeping))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_ping
</UL>

<P><STRONG><a name="[67e]"></a>com_closeping_ip_modem</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, com_sockets_ip_modem.o(i.com_closeping_ip_modem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_delete_socket_desc
</UL>

<P><STRONG><a name="[8c9]"></a>com_closesocket</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_closesocket))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_close
</UL>

<P><STRONG><a name="[680]"></a>com_closesocket_ip_modem</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, com_sockets_ip_modem.o(i.com_closesocket_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = com_closesocket_ip_modem &rArr; osCDS_socket_close &rArr; CDS_socket_close &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_delete_socket_desc
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket_ip_modem
</UL>

<P><STRONG><a name="[8ca]"></a>com_connect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_connect))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_connect
</UL>

<P><STRONG><a name="[682]"></a>com_connect_ip_modem</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, com_sockets_ip_modem.o(i.com_connect_ip_modem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_translate_ip_address
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_connect_udp_service
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_connect
</UL>

<P><STRONG><a name="[8cb]"></a>com_gethostbyname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_gethostbyname))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_gethostbyname
</UL>

<P><STRONG><a name="[686]"></a>com_gethostbyname_ip_modem</STRONG> (Thumb, 72 bytes, Stack size 152 bytes, com_sockets_ip_modem.o(i.com_gethostbyname_ip_modem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_dns_request
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_convert_IPString_to_sockaddr
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[658]"></a>com_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, com_sockets.o(i.com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = com_init &rArr; com_init_ip_modem &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_cellular_service_init
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init_ip_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_init
</UL>

<P><STRONG><a name="[689]"></a>com_init_ip_modem</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, com_sockets_ip_modem.o(i.com_init_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = com_init_ip_modem &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_create_socket_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[8cc]"></a>com_listen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_listen))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_listen
</UL>

<P><STRONG><a name="[9e9]"></a>com_listen_ip_modem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, com_sockets_ip_modem.o(i.com_listen_ip_modem), UNUSED)

<P><STRONG><a name="[8cd]"></a>com_ping</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_ping))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_ping
</UL>

<P><STRONG><a name="[691]"></a>com_ping_ip_modem</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, com_sockets_ip_modem.o(i.com_ping_ip_modem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_provide_socket_desc
</UL>

<P><STRONG><a name="[692]"></a>com_ping_process</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, com_sockets.o(i.com_ping_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = com_ping_process &rArr; com_ping_process_ip_modem &rArr; osCDS_ping &rArr; CDS_ping &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process_ip_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_ping
</UL>

<P><STRONG><a name="[693]"></a>com_ping_process_ip_modem</STRONG> (Thumb, 194 bytes, Stack size 152 bytes, com_sockets_ip_modem.o(i.com_ping_process_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = com_ping_process_ip_modem &rArr; osCDS_ping &rArr; CDS_ping &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_translate_ip_address
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_ping
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process
</UL>

<P><STRONG><a name="[8cf]"></a>com_recv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_recv))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_recv
</UL>

<P><STRONG><a name="[695]"></a>com_recv_ip_modem</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, com_sockets_ip_modem.o(i.com_recv_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = com_recv_ip_modem &rArr; osCDS_socket_receive &rArr; CDS_socket_receive &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
</UL>

<P><STRONG><a name="[697]"></a>com_recvfrom</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, com_sockets.o(i.com_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = com_recvfrom &rArr; com_recvfrom_ip_modem &rArr; osCDS_socket_receivefrom &rArr; CDS_socket_receivefrom &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_recvfrom
</UL>

<P><STRONG><a name="[698]"></a>com_recvfrom_ip_modem</STRONG> (Thumb, 390 bytes, Stack size 120 bytes, com_sockets_ip_modem.o(i.com_recvfrom_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = com_recvfrom_ip_modem &rArr; osCDS_socket_receivefrom &rArr; CDS_socket_receivefrom &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_connect_udp_service
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_convert_ipaddr_port_to_sockaddr
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_convert_IPString_to_sockaddr
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_ip_modem
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receivefrom
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom
</UL>

<P><STRONG><a name="[69b]"></a>com_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = com_send &rArr; com_send_ip_modem &rArr; com_sendto_ip_modem &rArr;  com_send_ip_modem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_ip_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_send
</UL>

<P><STRONG><a name="[69c]"></a>com_send_ip_modem</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, com_sockets_ip_modem.o(i.com_send_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = com_send_ip_modem &rArr; com_sendto_ip_modem &rArr;  com_send_ip_modem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_send
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
</UL>

<P><STRONG><a name="[69f]"></a>com_sendto</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, com_sockets.o(i.com_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = com_sendto &rArr; com_sendto_ip_modem &rArr;  com_send_ip_modem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_sendto
</UL>

<P><STRONG><a name="[69d]"></a>com_sendto_ip_modem</STRONG> (Thumb, 352 bytes, Stack size 136 bytes, com_sockets_ip_modem.o(i.com_sendto_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + In Cycle
<LI>Call Chain = com_sendto_ip_modem &rArr;  com_send_ip_modem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_translate_ip_address
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_connect_udp_service
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_convert_ipaddr_port_to_sockaddr
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_ip_modem
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_ip_modem
</UL>

<P><STRONG><a name="[6a1]"></a>com_setsockopt</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, com_sockets.o(i.com_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = com_setsockopt &rArr; com_setsockopt_ip_modem &rArr; com_ip_modem_find_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_setsockopt_ip_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_setsockopt
</UL>

<P><STRONG><a name="[6a2]"></a>com_setsockopt_ip_modem</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, com_sockets_ip_modem.o(i.com_setsockopt_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = com_setsockopt_ip_modem &rArr; com_ip_modem_find_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_setsockopt
</UL>

<P><STRONG><a name="[6a3]"></a>com_socket</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = com_socket &rArr; com_socket_ip_modem &rArr; com_closesocket_ip_modem &rArr; osCDS_socket_close &rArr; CDS_socket_close &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket_ip_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_socket
</UL>

<P><STRONG><a name="[6a4]"></a>com_socket_ip_modem</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, com_sockets_ip_modem.o(i.com_socket_ip_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = com_socket_ip_modem &rArr; com_closesocket_ip_modem &rArr; osCDS_socket_close &rArr; CDS_socket_close &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_provide_socket_desc
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closesocket_ip_modem
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_set_callbacks
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_create
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket
</UL>

<P><STRONG><a name="[65c]"></a>com_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_sockets.o(i.com_start))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_start
</UL>

<P><STRONG><a name="[6a7]"></a>com_start_ip_modem</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, com_sockets_ip_modem.o(i.com_start_ip_modem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_register_gen_event_cb
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[676]"></a>comp_left_ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, azurexcubesample.o(i.comp_left_ms))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[23]"></a>consolelogger_log</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, consolelogger.o(i.consolelogger_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = consolelogger_log &rArr; ctime &rArr; asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xlogging.o(.data)
</UL>
<P><STRONG><a name="[6b6]"></a>crc_get_ip_addr</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, cellular_runtime_custom.o(i.crc_get_ip_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = crc_get_ip_addr &rArr; crs_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crs_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_thread
</UL>

<P><STRONG><a name="[6b7]"></a>crs_atoi</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cellular_runtime_standard.o(i.crs_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crs_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_get_ip_addr
</UL>

<P><STRONG><a name="[344]"></a>crs_strlen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cellular_runtime_standard.o(i.crs_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_sim_select
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_define_pdn
</UL>

<P><STRONG><a name="[656]"></a>dc_com_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dc_common.o(i.dc_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dc_com_init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_ctrl_event_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_init
</UL>

<P><STRONG><a name="[318]"></a>dc_com_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dc_common.o(i.dc_com_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dc_com_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_set_config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket_datacache_cb
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_set_signal_quality
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_power_on_modem_mngt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_event_callback
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_autom_event
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_data_cache_set
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_thread
</UL>

<P><STRONG><a name="[323]"></a>dc_com_register_gen_event_cb</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dc_common.o(i.dc_com_register_gen_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dc_com_register_gen_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_start_ip_modem
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_start
</UL>

<P><STRONG><a name="[6bd]"></a>dc_com_register_serv</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, dc_common.o(i.dc_com_register_serv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dc_com_register_serv
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_ctrl_event_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_cellular_init
</UL>

<P><STRONG><a name="[65b]"></a>dc_com_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dc_common.o(i.dc_com_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dc_com_start &rArr; dc_ctrl_event_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_ctrl_event_start
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_start
</UL>

<P><STRONG><a name="[319]"></a>dc_com_write</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, dc_common.o(i.dc_com_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_stop
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_set_config
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_set_signal_quality
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_power_on_modem_mngt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_event_callback
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_fill_nfmc_tempo
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_data_cache_set
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_thread
</UL>

<P><STRONG><a name="[6bc]"></a>dc_com_write_event</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dc_common.o(i.dc_com_write_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dc_com_write_event &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_CtrlEventStartTask
</UL>

<P><STRONG><a name="[6be]"></a>dc_ctrl_event_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dc_control.o(i.dc_ctrl_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dc_ctrl_event_init &rArr; dc_com_register_serv
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_register_serv
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_init
</UL>

<P><STRONG><a name="[6bf]"></a>dc_ctrl_event_start</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, dc_control.o(i.dc_ctrl_event_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dc_ctrl_event_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_start
</UL>

<P><STRONG><a name="[c6]"></a>deviceTwinReportedStateCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, azurexcubesample.o(i.deviceTwinReportedStateCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deviceTwinReportedStateCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> azurexcubesample.o(i.DeviceTwinCallback)
<LI> azurexcubesample.o(i.LedToggle)
<LI> azurexcubesample.o(i.cloud_run)
</UL>
<P><STRONG><a name="[66c]"></a>device_model_create</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, azurexcubesample.o(i.device_model_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = device_model_create &rArr; CodeFirst_RegisterSchema &rArr; buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[678]"></a>device_model_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, azurexcubesample.o(i.device_model_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = device_model_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[6ce]"></a>dialog_ask</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cloud.o(i.dialog_ask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dialog_ask &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[365]"></a>enterPemString</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, iot_flash_config.o(i.enterPemString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = enterPemString &rArr; getInputString &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
</UL>

<P><STRONG><a name="[1ad]"></a>fCmdBuild_ATD_BG96</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_ATD_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_ATD_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>fCmdBuild_ATE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_ATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_ATE &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>fCmdBuild_ATV</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_ATV))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_ATV &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>fCmdBuild_ATX</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_ATX))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_ATX &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>fCmdBuild_AT_AND_D</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_AT_AND_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_AT_AND_D &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>fCmdBuild_CEDRXS_BG96</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_CEDRXS_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CEDRXS_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>fCmdBuild_CEREG</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CEREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CEREG &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>fCmdBuild_CFUN</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CFUN &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>fCmdBuild_CGACT</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fCmdBuild_CGACT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_CGACT &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>fCmdBuild_CGATT</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CGATT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CGATT &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>fCmdBuild_CGDATA</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fCmdBuild_CGDATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_CGDATA &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[71b]"></a>fCmdBuild_CGDCONT</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, at_modem_signalling.o(i.fCmdBuild_CGDCONT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fCmdBuild_CGDCONT &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_PDPtypeStr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDCONT_BG96
</UL>

<P><STRONG><a name="[1a8]"></a>fCmdBuild_CGDCONT_BG96</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_CGDCONT_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fCmdBuild_CGDCONT_BG96 &rArr; fCmdBuild_CGDCONT &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCmdBuild_CGDCONT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>fCmdBuild_CGEREP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CGEREP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CGEREP &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>fCmdBuild_CGPADDR</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fCmdBuild_CGPADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_CGPADDR &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>fCmdBuild_CGREG</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CGREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CGREG &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>fCmdBuild_CGSN_BG96</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_CGSN_BG96))
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>fCmdBuild_CMEE</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CMEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CMEE &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>fCmdBuild_COPS</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_COPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_COPS &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>fCmdBuild_CPIN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CPIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CPIN &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>fCmdBuild_CPSMS_BG96</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_CPSMS_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CPSMS_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>fCmdBuild_CREG</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_CREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_CREG &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>fCmdBuild_DIRECT_CMD</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, at_modem_signalling.o(i.fCmdBuild_DIRECT_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_DIRECT_CMD &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>fCmdBuild_ESCAPE_CMD</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fCmdBuild_ESCAPE_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_ESCAPE_CMD &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>fCmdBuild_IFC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_IFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_IFC &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>fCmdBuild_IPR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_modem_signalling.o(i.fCmdBuild_IPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_IPR &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>fCmdBuild_NoParams</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fCmdBuild_NoParams))
<BR>[Address Reference Count : 2]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
<LI> at_modem_common.o(i.atcm_get_CmdBuildFunc)
</UL>
<P><STRONG><a name="[1b9]"></a>fCmdBuild_QCFG_BG96</STRONG> (Thumb, 272 bytes, Stack size 104 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_QCFG_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fCmdBuild_QCFG_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>fCmdBuild_QENG_BG96</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_QENG_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_QENG_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>fCmdBuild_QIACT_BG96</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QIACT_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_QIACT_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>fCmdBuild_QICFG_BG96</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_QICFG_BG96))
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>fCmdBuild_QICLOSE_BG96</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QICLOSE_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_QICLOSE_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>fCmdBuild_QICSGP_BG96</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_QICSGP_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fCmdBuild_QICSGP_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>fCmdBuild_QIDNSCFG_BG96</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QIDNSCFG_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_QIDNSCFG_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>fCmdBuild_QIDNSGIP_BG96</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QIDNSGIP_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_QIDNSGIP_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>fCmdBuild_QINDCFG_BG96</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_QINDCFG_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_QINDCFG_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>fCmdBuild_QIOPEN_BG96</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QIOPEN_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fCmdBuild_QIOPEN_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_modem_cid
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>fCmdBuild_QIRD_BG96</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QIRD_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fCmdBuild_QIRD_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>fCmdBuild_QISEND_BG96</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QISEND_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fCmdBuild_QISEND_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>fCmdBuild_QISEND_WRITE_DATA_BG96</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QISEND_WRITE_DATA_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fCmdBuild_QISEND_WRITE_DATA_BG96 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>fCmdBuild_QISTATE_BG96</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QISTATE_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fCmdBuild_QISTATE_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>fCmdBuild_QPING_BG96</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, at_custom_modem_socket_bg96.o(i.fCmdBuild_QPING_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fCmdBuild_QPING_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>fCmdBuild_QPOWD_BG96</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_custom_modem_signalling_bg96.o(i.fCmdBuild_QPOWD_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fCmdBuild_QPOWD_BG96 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>fRspAnalyze_CEER</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fRspAnalyze_CEER))
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>fRspAnalyze_CEREG</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, at_modem_signalling.o(i.fRspAnalyze_CEREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fRspAnalyze_CEREG &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_NetworkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>fRspAnalyze_CFUN_BG96</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_CFUN_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fRspAnalyze_CFUN_BG96 &rArr; atcc_extractElement
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>fRspAnalyze_CGATT</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, at_modem_signalling.o(i.fRspAnalyze_CGATT))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fRspAnalyze_CGATT &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>fRspAnalyze_CGEV</STRONG> (Thumb, 486 bytes, Stack size 128 bytes, at_modem_signalling.o(i.fRspAnalyze_CGEV))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fRspAnalyze_CGEV &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_configID_for_modem_cid
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pdn_event
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_convert_index_to_PDN_conf
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>fRspAnalyze_CGMI</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fRspAnalyze_CGMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fRspAnalyze_CGMI &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>fRspAnalyze_CGMM</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fRspAnalyze_CGMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fRspAnalyze_CGMM &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>fRspAnalyze_CGMR</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fRspAnalyze_CGMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fRspAnalyze_CGMR &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>fRspAnalyze_CGPADDR</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, at_modem_signalling.o(i.fRspAnalyze_CGPADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fRspAnalyze_CGPADDR &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_put_IP_address_infos
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_ip_address_type
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>fRspAnalyze_CGREG</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, at_modem_signalling.o(i.fRspAnalyze_CGREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fRspAnalyze_CGREG &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_NetworkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>fRspAnalyze_CGSN</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, at_modem_signalling.o(i.fRspAnalyze_CGSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fRspAnalyze_CGSN &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>fRspAnalyze_CIMI</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fRspAnalyze_CIMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fRspAnalyze_CIMI &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>fRspAnalyze_CNUM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fRspAnalyze_CNUM))
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>fRspAnalyze_COPS</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, at_modem_signalling.o(i.fRspAnalyze_COPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fRspAnalyze_COPS &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[721]"></a>fRspAnalyze_CPIN</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, at_modem_signalling.o(i.fRspAnalyze_CPIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = fRspAnalyze_CPIN &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_report
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN_BG96
</UL>

<P><STRONG><a name="[197]"></a>fRspAnalyze_CPIN_BG96</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_CPIN_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = fRspAnalyze_CPIN_BG96 &rArr; fRspAnalyze_CPIN &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>fRspAnalyze_CREG</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, at_modem_signalling.o(i.fRspAnalyze_CREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fRspAnalyze_CREG &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_NetworkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>fRspAnalyze_CSQ</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, at_modem_signalling.o(i.fRspAnalyze_CSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fRspAnalyze_CSQ &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[722]"></a>fRspAnalyze_CmeErr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fRspAnalyze_CmeErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fRspAnalyze_CmeErr &rArr; analyze_CmeError &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_CmeError
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_Error
</UL>

<P><STRONG><a name="[18c]"></a>fRspAnalyze_CmsErr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fRspAnalyze_CmsErr))
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>fRspAnalyze_DIRECT_CMD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fRspAnalyze_DIRECT_CMD))
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[723]"></a>fRspAnalyze_Error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fRspAnalyze_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fRspAnalyze_Error &rArr; fRspAnalyze_CmeErr &rArr; analyze_CmeError &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CmeErr
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_Error_BG96
</UL>

<P><STRONG><a name="[18b]"></a>fRspAnalyze_Error_BG96</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_Error_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = fRspAnalyze_Error_BG96 &rArr; fRspAnalyze_Error &rArr; fRspAnalyze_CmeErr &rArr; analyze_CmeError &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_Error
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_release_modem_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>fRspAnalyze_GSN</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_modem_signalling.o(i.fRspAnalyze_GSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fRspAnalyze_GSN &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>fRspAnalyze_IPR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fRspAnalyze_IPR))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_check_text_line_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>fRspAnalyze_None</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_modem_signalling.o(i.fRspAnalyze_None))
<BR>[Address Reference Count : 2]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
<LI> at_modem_common.o(i.atcm_get_CmdAnalyzeFunc)
</UL>
<P><STRONG><a name="[1c0]"></a>fRspAnalyze_QCCID_BG96</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QCCID_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fRspAnalyze_QCCID_BG96 &rArr; atcc_extractElement
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>fRspAnalyze_QCFG_BG96</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QCFG_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fRspAnalyze_QCFG_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertHexaStringToInt64
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertHexaStringToInt32
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>fRspAnalyze_QCSQ_BG96</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QCSQ_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fRspAnalyze_QCSQ_BG96 &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>fRspAnalyze_QIACT_BG96</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, at_custom_modem_socket_bg96.o(i.fRspAnalyze_QIACT_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fRspAnalyze_QIACT_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_put_IP_address_infos
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_ip_address_type
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_cid_current_SID
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_affected_modem_cid
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>fRspAnalyze_QINDCFG_BG96</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_custom_modem_socket_bg96.o(i.fRspAnalyze_QINDCFG_BG96))
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>fRspAnalyze_QIND_BG96</STRONG> (Thumb, 340 bytes, Stack size 88 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QIND_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fRspAnalyze_QIND_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_event_received
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>fRspAnalyze_QINISTAT_BG96</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QINISTAT_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fRspAnalyze_QINISTAT_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>fRspAnalyze_QIOPEN_BG96</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, at_custom_modem_socket_bg96.o(i.fRspAnalyze_QIOPEN_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fRspAnalyze_QIOPEN_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_modem_cid
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>fRspAnalyze_QIRD_BG96</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, at_custom_modem_socket_bg96.o(i.fRspAnalyze_QIRD_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fRspAnalyze_QIRD_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_ip_address_type
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[275]"></a>fRspAnalyze_QIRD_data_BG96</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_custom_modem_socket_bg96.o(i.fRspAnalyze_QIRD_data_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fRspAnalyze_QIRD_data_BG96 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>

<P><STRONG><a name="[1d3]"></a>fRspAnalyze_QISTATE_BG96</STRONG> (Thumb, 260 bytes, Stack size 104 bytes, at_custom_modem_socket_bg96.o(i.fRspAnalyze_QISTATE_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fRspAnalyze_QISTATE_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_socket_handle
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_analyzeCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>fRspAnalyze_QIURC_BG96</STRONG> (Thumb, 576 bytes, Stack size 88 bytes, at_custom_modem_signalling_bg96.o(i.fRspAnalyze_QIURC_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fRspAnalyze_QIURC_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_set_urc_data_pending
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_set_urc_closed_by_remote
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_socket_get_socket_handle
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_get_configID_for_modem_cid
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>fRspAnalyze_QPING_BG96</STRONG> (Thumb, 404 bytes, Stack size 104 bytes, at_custom_modem_socket_bg96.o(i.fRspAnalyze_QPING_BG96))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fRspAnalyze_QPING_BG96 &rArr; ATutil_convertStringToInt &rArr; ATutil_convertHexaStringToInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToInt
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_custom_modem_specific_bg96.o(.constdata)
</UL>
<P><STRONG><a name="[60e]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[727]"></a>fgetc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[e5]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[3b]"></a>free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_os.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_SetOption
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_destroy
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_destroy
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendComplete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DeviceMethodComplete
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_destroy
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_xio_Certificate
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_auth_client
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyInternal
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_destroy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_create
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_DecRef
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_url_data
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetInputName
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionModuleId
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionDeviceId
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDiagnosticPropertyData
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetTwinAsync
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPendingGetTwinRequests
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Destroy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Destroy
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_mqtt_data
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register_message
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_operation_status_message
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_username
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_x509_cert
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_trusted_cert
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_proxy
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_close
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_instance
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_prov_info
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_storage_key
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_registration_id
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_endorsement_key
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_destroy
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_registration_id
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_value
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> parson.o(.data)
<LI> platform.o(.data)
</UL>
<P><STRONG><a name="[666]"></a>getInputString</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, iot_flash_config.o(i.getInputString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getInputString &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterPemString
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
</UL>

<P><STRONG><a name="[669]"></a>getIoTDeviceConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iot_flash_config.o(i.getIoTDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getIoTDeviceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[66b]"></a>getTLSKeys</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, iot_flash_config.o(i.getTLSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getTLSKeys
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_device_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[59c]"></a>get_difftime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime.o(i.get_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
</UL>

<P><STRONG><a name="[4be]"></a>get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_message_callback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_MessageCallbackFromInput
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>

<P><STRONG><a name="[6cf]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputString
</UL>

<P><STRONG><a name="[5df]"></a>gmtime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.gmtime))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_gmtime_r
</UL>

<P><STRONG><a name="[9ea]"></a>gmtimeMDK</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, timingsystem.o(i.gmtimeMDK), UNUSED)

<P><STRONG><a name="[49b]"></a>hmac</STRONG> (Thumb, 56 bytes, Stack size 400 bytes, hmac.o(i.hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
</UL>

<P><STRONG><a name="[73b]"></a>hmacInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hmac.o(i.hmacInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = hmacInput &rArr; USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[73a]"></a>hmacReset</STRONG> (Thumb, 166 bytes, Stack size 464 bytes, hmac.o(i.hmacReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAHashSize
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHABlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[73c]"></a>hmacResult</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hmac.o(i.hmacResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = hmacResult &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[15c]"></a>hsm_client_riot_create</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_riot_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 3420<LI>Call Chain = hsm_client_riot_create &rArr; process_riot_key_info &rArr; generate_root_ca_info &rArr; RiotCrypt_Sign &rArr; RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hsm_client_riot_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[66f]"></a>hsm_client_riot_create_leaf_cert</STRONG> (Thumb, 314 bytes, Stack size 1072 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_riot_create_leaf_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 2388<LI>Call Chain = hsm_client_riot_create_leaf_cert &rArr; RiotCrypt_Sign &rArr; RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Sign
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERInitContext
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[15d]"></a>hsm_client_riot_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_riot_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hsm_client_riot_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hsm_client_riot_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>hsm_client_riot_get_alias_key</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_riot_get_alias_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hsm_client_riot_get_alias_key &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hsm_client_riot_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>hsm_client_riot_get_certificate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_riot_get_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hsm_client_riot_get_certificate &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hsm_client_riot_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>hsm_client_riot_get_common_name</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_riot_get_common_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hsm_client_riot_get_common_name &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hsm_client_riot_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[747]"></a>hsm_client_tpm_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hsm_client_tpm_stm32cube.o(i.hsm_client_tpm_init))
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_hsm_system
</UL>

<P><STRONG><a name="[74a]"></a>hsm_client_tpm_interface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hsm_client_tpm_stm32cube.o(i.hsm_client_tpm_interface))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
</UL>

<P><STRONG><a name="[741]"></a>hsm_client_x509_init</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_x509_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hsm_client_x509_init &rArr; DiceSHA256_2 &rArr; DICE_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256_2
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiceSHA256
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_hsm_system
</UL>

<P><STRONG><a name="[74b]"></a>hsm_client_x509_interface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hsm_client_riot_stm32cube.o(i.hsm_client_x509_interface))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
</UL>

<P><STRONG><a name="[8c3]"></a>http_proxy_io_get_interface_description</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, http_proxy_io.o(i.http_proxy_io_get_interface_description))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_transport_io
</UL>

<P><STRONG><a name="[746]"></a>initialize_hsm_system</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hsm_client_data.o(i.initialize_hsm_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = initialize_hsm_system &rArr; hsm_client_x509_init &rArr; DiceSHA256_2 &rArr; DICE_SHA256_Update &rArr; SHA256_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_tpm_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_x509_init
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_init
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_init
</UL>

<P><STRONG><a name="[4e3]"></a>iothub_device_auth_create</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, iothub_auth_client.o(i.iothub_device_auth_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iothub_device_auth_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_tpm_interface
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_x509_interface
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_type
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_get_symmetric_key
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_get_symm_registration_name
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
</UL>

<P><STRONG><a name="[4e5]"></a>iothub_device_auth_destroy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iothub_auth_client.o(i.iothub_device_auth_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = iothub_device_auth_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
</UL>

<P><STRONG><a name="[4e9]"></a>iothub_device_auth_generate_credentials</STRONG> (Thumb, 872 bytes, Stack size 128 bytes, iothub_auth_client.o(i.iothub_device_auth_generate_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode_Bytes
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_tToString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_xio_Certificate
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
</UL>

<P><STRONG><a name="[4e4]"></a>iothub_device_auth_get_type</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iothub_auth_client.o(i.iothub_device_auth_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iothub_device_auth_get_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
</UL>

<P><STRONG><a name="[74d]"></a>iothub_security_get_symm_registration_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iothub_security_factory.o(i.iothub_security_get_symm_registration_name))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
</UL>

<P><STRONG><a name="[74c]"></a>iothub_security_get_symmetric_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iothub_security_factory.o(i.iothub_security_get_symmetric_key))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
</UL>

<P><STRONG><a name="[74f]"></a>iothub_security_init</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, iothub_security_factory.o(i.iothub_security_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + In Cycle
<LI>Call Chain = iothub_security_init &rArr;  prov_dev_security_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_get_type
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_hsm_system
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_init
</UL>

<P><STRONG><a name="[749]"></a>iothub_security_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iothub_security_factory.o(i.iothub_security_type))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_init
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
</UL>

<P><STRONG><a name="[557]"></a>is_json_present_and_unparsable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, methodreturn.o(i.is_json_present_and_unparsable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = is_json_present_and_unparsable &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
</UL>

<P><STRONG><a name="[910]"></a>json_array_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parson.o(i.json_array_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[764]"></a>json_array_get_value</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parson.o(i.json_array_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[769]"></a>json_free_serialized_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parson.o(i.json_free_serialized_string))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
</UL>

<P><STRONG><a name="[3d4]"></a>json_object</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, parson.o(i.json_object))
<BR><BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[3d9]"></a>json_object_dotset_value</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, parson.o(i.json_object_dotset_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = json_object_dotset_value &rArr;  json_object_dotset_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_getn_value
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotremove_internal
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_addn
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[914]"></a>json_object_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parson.o(i.json_object_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[765]"></a>json_object_get_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parson.o(i.json_object_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[75c]"></a>json_object_get_object</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parson.o(i.json_object_get_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = json_object_get_object &rArr; json_object_get_value &rArr; json_object_getn_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[75d]"></a>json_object_get_value</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, parson.o(i.json_object_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = json_object_get_value &rArr; json_object_getn_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_getn_value
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_remove_internal
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_json_item
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[75b]"></a>json_object_set_value</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, parson.o(i.json_object_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = json_object_set_value &rArr; json_object_add &rArr; json_object_addn &rArr; json_object_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[3d7]"></a>json_parse_string</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, parson.o(i.json_parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_json_present_and_unparsable
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[75f]"></a>json_serialization_size_pretty</STRONG> (Thumb, 32 bytes, Stack size 72 bytes, parson.o(i.json_serialization_size_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
</UL>

<P><STRONG><a name="[762]"></a>json_serialize_to_buffer_pretty</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, parson.o(i.json_serialize_to_buffer_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
</UL>

<P><STRONG><a name="[3da]"></a>json_serialize_to_string_pretty</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, parson.o(i.json_serialize_to_string_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_free_serialized_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[3d8]"></a>json_value_free</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, parson.o(i.json_value_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = json_value_free &rArr;  json_value_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_json_present_and_unparsable
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_remove_internal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[763]"></a>json_value_get_array</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.json_value_get_array))
<BR><BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[767]"></a>json_value_get_boolean</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, parson.o(i.json_value_get_boolean))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[768]"></a>json_value_get_number</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parson.o(i.json_value_get_number))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[753]"></a>json_value_get_object</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.json_value_get_object))
<BR><BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotremove_internal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[766]"></a>json_value_get_string</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.json_value_get_string))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_json_item
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[90f]"></a>json_value_init_array</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, parson.o(i.json_value_init_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_value_init_array
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[919]"></a>json_value_init_boolean</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, parson.o(i.json_value_init_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_boolean
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[91a]"></a>json_value_init_null</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, parson.o(i.json_value_init_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_null
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[912]"></a>json_value_init_number</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, parson.o(i.json_value_init_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = json_value_init_number
</UL>
<BR>[Called By]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[3d3]"></a>json_value_init_object</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, parson.o(i.json_value_init_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_value_init_object
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[ae]"></a>main</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Periph_Config
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3a]"></a>malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_os.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_model_create
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_create
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_certificate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_alias_key
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMethodCallback
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_auth_client
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base32_Encode_Bytes
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base32_encode_impl
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_create
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_url_data
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_twin_get_message
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register_message
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_operation_status_message
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_username
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg_object
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_create
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parson.o(.data)
</UL>
<P><STRONG><a name="[2bf]"></a>mallocAndStrcpy_s</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, crt_abstractions.o(i.mallocAndStrcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_SetOption
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_common_name
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHubDPSRegisterDeviceCallBack
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_CloneOption
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_auth_client
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_create
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetInputName
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionModuleId
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionDeviceId
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_x509_cert
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_trusted_cert
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_proxy
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_open
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_json_item
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_set_registration_id
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_registration_id
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_value
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>

<P><STRONG><a name="[623]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[626]"></a>mbedtls_aes_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[625]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[628]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 198 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[629]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 408 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[772]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[775]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[776]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[777]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</UL>

<P><STRONG><a name="[778]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[779]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[774]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[77a]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[77b]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_sequence_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[773]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[6e8]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, asn1write.o(i.mbedtls_asn1_write_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[6e7]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, asn1write.o(i.mbedtls_asn1_write_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_asn1_write_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[6e9]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asn1write.o(i.mbedtls_asn1_write_tag))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[7e1]"></a>mbedtls_base64_decode</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, base64.o(i.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[624]"></a>mbedtls_calloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(i.mbedtls_calloc))
<BR><BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>

<P><STRONG><a name="[77d]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, cipher.o(i.mbedtls_cipher_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[77f]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, cipher.o(i.mbedtls_cipher_auth_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[781]"></a>mbedtls_cipher_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[83f]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[7aa]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, cipher.o(i.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[782]"></a>mbedtls_cipher_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[7ab]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[783]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[731]"></a>mbedtls_cipher_update</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>

<P><STRONG><a name="[785]"></a>mbedtls_debug_print_buf</STRONG> (Thumb, 252 bytes, Stack size 592 bytes, debug.o(i.mbedtls_debug_print_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[786]"></a>mbedtls_debug_print_crt</STRONG> (Thumb, 230 bytes, Stack size 2112 bytes, debug.o(i.mbedtls_debug_print_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384<LI>Call Chain = mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
</UL>

<P><STRONG><a name="[6c4]"></a>mbedtls_debug_print_ecp</STRONG> (Thumb, 112 bytes, Stack size 560 bytes, debug.o(i.mbedtls_debug_print_ecp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[6c3]"></a>mbedtls_debug_print_mpi</STRONG> (Thumb, 344 bytes, Stack size 568 bytes, debug.o(i.mbedtls_debug_print_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[788]"></a>mbedtls_debug_print_msg</STRONG> (Thumb, 88 bytes, Stack size 536 bytes, debug.o(i.mbedtls_debug_print_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[789]"></a>mbedtls_debug_print_ret</STRONG> (Thumb, 84 bytes, Stack size 544 bytes, debug.o(i.mbedtls_debug_print_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[8ea]"></a>mbedtls_debug_set_threshold</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i.mbedtls_debug_set_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[78a]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[78b]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, ecdh.o(i.mbedtls_ecdh_compute_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[78c]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[78e]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_gen_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[78f]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecdh_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[791]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ecdh.o(i.mbedtls_ecdh_make_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[793]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecdh.o(i.mbedtls_ecdh_read_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[6d2]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecdsa.o(i.mbedtls_ecdsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
</UL>

<P><STRONG><a name="[6f1]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ecdsa.o(i.mbedtls_ecdsa_from_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>

<P><STRONG><a name="[6d1]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecdsa.o(i.mbedtls_ecdsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
</UL>

<P><STRONG><a name="[6ed]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ecdsa.o(i.mbedtls_ecdsa_read_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_read_signature_restartable &rArr; ecdsa_verify_restartable &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[797]"></a>mbedtls_ecdsa_read_signature_restartable</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, ecdsa.o(i.mbedtls_ecdsa_read_signature_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = mbedtls_ecdsa_read_signature_restartable &rArr; ecdsa_verify_restartable &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[6e5]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, ecdsa.o(i.mbedtls_ecdsa_write_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; ecdsa_sign_restartable &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[798]"></a>mbedtls_ecdsa_write_signature_restartable</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, ecdsa.o(i.mbedtls_ecdsa_write_signature_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; ecdsa_sign_restartable &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[799]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[6ef]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 172 bytes, Stack size 200 bytes, ecp.o(i.mbedtls_ecp_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[79c]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[6f3]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[979]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[7a1]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_tls_id))
<BR><BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[6de]"></a>mbedtls_ecp_gen_privkey</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_gen_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mbedtls_ecp_gen_privkey &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[796]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_group_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[78d]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[790]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[79d]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, ecp_curves.o(i.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[83d]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_grp_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[6ec]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[6f0]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
</UL>

<P><STRONG><a name="[6ee]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</UL>

<P><STRONG><a name="[79b]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[6df]"></a>mbedtls_ecp_mul_restartable</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, ecp.o(i.mbedtls_ecp_mul_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[6eb]"></a>mbedtls_ecp_muladd_restartable</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, ecp.o(i.mbedtls_ecp_muladd_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
</UL>

<P><STRONG><a name="[6e4]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[6dd]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[79f]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[7a0]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ecp.o(i.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[6f5]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[794]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_tls_read_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[795]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_tls_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[792]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_tls_write_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[627]"></a>mbedtls_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(i.mbedtls_free))
<BR><BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[77e]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, gcm.o(i.mbedtls_gcm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[780]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gcm.o(i.mbedtls_gcm_crypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</UL>

<P><STRONG><a name="[7a8]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, gcm.o(i.mbedtls_gcm_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[72f]"></a>mbedtls_gcm_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[72e]"></a>mbedtls_gcm_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gcm.o(i.mbedtls_gcm_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[72d]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gcm.o(i.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[7a7]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_gcm_starts &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[784]"></a>mbedtls_gcm_update</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, gcm.o(i.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[6da]"></a>mbedtls_hmac_drbg_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[6d6]"></a>mbedtls_hmac_drbg_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[106]"></a>mbedtls_hmac_drbg_random</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecdsa.o(i.ecdsa_sign_det_restartable)
</UL>
<P><STRONG><a name="[7ad]"></a>mbedtls_hmac_drbg_random_with_add</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>

<P><STRONG><a name="[7af]"></a>mbedtls_hmac_drbg_reseed</STRONG> (Thumb, 110 bytes, Stack size 408 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_hmac_drbg_reseed &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[6d8]"></a>mbedtls_hmac_drbg_seed_buf</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_seed_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[7b0]"></a>mbedtls_hmac_drbg_update_ret</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, hmac_drbg.o(i.mbedtls_hmac_drbg_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[76f]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 958 bytes, Stack size 40 bytes, aes.o(i.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[770]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 956 bytes, Stack size 40 bytes, aes.o(i.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[7c6]"></a>mbedtls_internal_md5_process</STRONG> (Thumb, 1784 bytes, Stack size 88 bytes, md5.o(i.mbedtls_internal_md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_internal_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process_wrap
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update_ret
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
</UL>

<P><STRONG><a name="[81f]"></a>mbedtls_internal_sha1_process</STRONG> (Thumb, 4672 bytes, Stack size 144 bytes, sha1.o(i.mbedtls_internal_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_internal_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[826]"></a>mbedtls_internal_sha256_process</STRONG> (Thumb, 2108 bytes, Stack size 324 bytes, sha256.o(i.mbedtls_internal_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = mbedtls_internal_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[82e]"></a>mbedtls_internal_sha512_process</STRONG> (Thumb, 2548 bytes, Stack size 840 bytes, sha512.o(i.mbedtls_internal_sha512_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbedtls_internal_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
</UL>

<P><STRONG><a name="[816]"></a>mbedtls_md</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, md.o(i.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[7c4]"></a>mbedtls_md5_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_clone_wrap
</UL>

<P><STRONG><a name="[7c5]"></a>mbedtls_md5_finish_ret</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, md5.o(i.mbedtls_md5_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_md5_finish_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_md5_process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret
</UL>

<P><STRONG><a name="[7c7]"></a>mbedtls_md5_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_free))
<BR><BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret
</UL>

<P><STRONG><a name="[7c8]"></a>mbedtls_md5_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret
</UL>

<P><STRONG><a name="[1e9]"></a>mbedtls_md5_ret</STRONG> (Thumb, 62 bytes, Stack size 112 bytes, md5.o(i.mbedtls_md5_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbedtls_md5_ret &rArr; mbedtls_md5_update_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update_ret
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts_ret
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7c9]"></a>mbedtls_md5_starts_ret</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret
</UL>

<P><STRONG><a name="[7ca]"></a>mbedtls_md5_update_ret</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, md5.o(i.mbedtls_md5_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_md5_update_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_md5_process
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret
</UL>

<P><STRONG><a name="[81c]"></a>mbedtls_md_finish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[7ac]"></a>mbedtls_md_free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[898]"></a>mbedtls_md_get_name</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[7ae]"></a>mbedtls_md_get_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[7b3]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 98 bytes, Stack size 80 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[7b1]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[7b5]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[7b2]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[6d4]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[814]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[7b4]"></a>mbedtls_md_setup</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[81a]"></a>mbedtls_md_starts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[81b]"></a>mbedtls_md_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[705]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>

<P><STRONG><a name="[7cb]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[6e2]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[703]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[7cc]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[6dc]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[6cb]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[6f9]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[7cd]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 798 bytes, Stack size 144 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[7ce]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 762 bytes, Stack size 192 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[714]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 66 bytes, Stack size 536 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[6db]"></a>mbedtls_mpi_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[7d2]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[6fd]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_core
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
</UL>

<P><STRONG><a name="[706]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[6d5]"></a>mbedtls_mpi_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[6e3]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 616 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[7d3]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[710]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[6e0]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[6f7]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[6e1]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[6c9]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[6ff]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
</UL>

<P><STRONG><a name="[700]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[6ca]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[713]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[77c]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
</UL>

<P><STRONG><a name="[6f8]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
</UL>

<P><STRONG><a name="[6fb]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[6cc]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[6d7]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_write_binary
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[7d6]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_attr_short_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_attr_short_name &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[7d7]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[7d8]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[7d9]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
</UL>

<P><STRONG><a name="[968]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_oid_by_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[7da]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[7db]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[7dd]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_sig_alg_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[7de]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_x509_ext_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[7df]"></a>mbedtls_pem_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pem.o(i.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[7e5]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[7e0]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, pem.o(i.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[7f4]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_can_do))
<BR><BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[6c1]"></a>mbedtls_pk_debug</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[997]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, pk.o(i.mbedtls_pk_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_pk_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>

<P><STRONG><a name="[7a4]"></a>mbedtls_pk_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free_resource
</UL>

<P><STRONG><a name="[7e3]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_bitlen))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[87d]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[888]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_restartable
</UL>

<P><STRONG><a name="[7e6]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[7eb]"></a>mbedtls_pk_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_init))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7e4]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 384 bytes, Stack size 80 bytes, pkparse.o(i.mbedtls_pk_parse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7ec]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, pkparse.o(i.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[7e7]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[7f1]"></a>mbedtls_pk_sign_restartable</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_sign_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_pk_sign_restartable &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[7f3]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_restartable
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[7f6]"></a>mbedtls_pk_verify_restartable</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_pk_verify_restartable &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[7f7]"></a>mbedtls_platform_gmtime_r</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, platform_util.o(i.mbedtls_platform_gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_platform_gmtime_r &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
</UL>

<P><STRONG><a name="[8e8]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[771]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform_util.o(i.mbedtls_platform_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_reseed
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[116]"></a>mbedtls_rng_raw</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mbedtls_entropy.o(i.mbedtls_rng_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_rng_raw &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tlsio_mbedtls.o(i.mbedtls_init)
<LI> net_mbedtls.o(i.net_mbedtls_start)
</UL>
<P><STRONG><a name="[7f8]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[7fd]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[7f9]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[7fe]"></a>mbedtls_rsa_complete</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[801]"></a>mbedtls_rsa_deduce_crt</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, rsa_internal.o(i.mbedtls_rsa_deduce_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mbedtls_rsa_deduce_crt &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[7ff]"></a>mbedtls_rsa_deduce_primes</STRONG> (Thumb, 434 bytes, Stack size 152 bytes, rsa_internal.o(i.mbedtls_rsa_deduce_primes))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[800]"></a>mbedtls_rsa_deduce_private_exponent</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, rsa_internal.o(i.mbedtls_rsa_deduce_private_exponent))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mbedtls_rsa_deduce_private_exponent &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[802]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[967]"></a>mbedtls_rsa_get_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_rsa_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[803]"></a>mbedtls_rsa_import_raw</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_import_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_rsa_import_raw &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[804]"></a>mbedtls_rsa_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[805]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[808]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[80b]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[80e]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[811]"></a>mbedtls_rsa_private</STRONG> (Thumb, 612 bytes, Stack size 192 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[813]"></a>mbedtls_rsa_public</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[807]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 390 bytes, Stack size 648 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[80a]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[806]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 462 bytes, Stack size 560 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_int
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[809]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[80c]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[80f]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[80d]"></a>mbedtls_rsa_rsassa_pss_sign</STRONG> (Thumb, 388 bytes, Stack size 144 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[810]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[7f5]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 402 bytes, Stack size 640 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[7fc]"></a>mbedtls_rsa_validate_crt</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, rsa_internal.o(i.mbedtls_rsa_validate_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[7fb]"></a>mbedtls_rsa_validate_params</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, rsa_internal.o(i.mbedtls_rsa_validate_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mbedtls_rsa_validate_params &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[81d]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[81e]"></a>mbedtls_sha1_finish_ret</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, sha1.o(i.mbedtls_sha1_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[820]"></a>mbedtls_sha1_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[821]"></a>mbedtls_sha1_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[1f1]"></a>mbedtls_sha1_ret</STRONG> (Thumb, 62 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_sha1_ret &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[822]"></a>mbedtls_sha1_starts_ret</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[823]"></a>mbedtls_sha1_update_ret</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[824]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[825]"></a>mbedtls_sha256_finish_ret</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, sha256.o(i.mbedtls_sha256_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[827]"></a>mbedtls_sha256_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[828]"></a>mbedtls_sha256_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[829]"></a>mbedtls_sha256_ret</STRONG> (Thumb, 66 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[82a]"></a>mbedtls_sha256_starts_ret</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[82b]"></a>mbedtls_sha256_update_ret</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
</UL>

<P><STRONG><a name="[82c]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[82d]"></a>mbedtls_sha512_finish_ret</STRONG> (Thumb, 786 bytes, Stack size 24 bytes, sha512.o(i.mbedtls_sha512_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[82f]"></a>mbedtls_sha512_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_free))
<BR><BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[830]"></a>mbedtls_sha512_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[831]"></a>mbedtls_sha512_ret</STRONG> (Thumb, 66 bytes, Stack size 240 bytes, sha512.o(i.mbedtls_sha512_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
</UL>

<P><STRONG><a name="[832]"></a>mbedtls_sha512_starts_ret</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[833]"></a>mbedtls_sha512_update_ret</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sha512.o(i.mbedtls_sha512_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha384
</UL>

<P><STRONG><a name="[834]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_check_cert_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[863]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_curve))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[98a]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_sig_hash))
<BR><BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[847]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>

<P><STRONG><a name="[98d]"></a>mbedtls_ssl_ciphersuite_uses_ec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_uses_ec))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[837]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_close_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_close
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_uninit
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_stop
</UL>

<P><STRONG><a name="[7bc]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[8ec]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_ca_chain))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[8eb]"></a>mbedtls_ssl_conf_cert_profile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_cert_profile))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[8e9]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_dbg))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7bd]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_min_version))
<BR><BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[83a]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_own_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_conf_own_cert &rArr; ssl_append_key_cert
</UL>
<BR>[Calls]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[8e5]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_read_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_set_read_timeout
</UL>

<P><STRONG><a name="[7bb]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7ba]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7a6]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_config_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_uninit
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free_resource
</UL>

<P><STRONG><a name="[7b9]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_config_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[83e]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 1580 bytes, Stack size 424 bytes, ssl_tls.o(i.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[841]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[838]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_flush_output &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[7a5]"></a>mbedtls_ssl_free</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_uninit
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free_resource
</UL>

<P><STRONG><a name="[846]"></a>mbedtls_ssl_get_ciphersuite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_ciphersuite))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ssl_get_ciphersuite &rArr; mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[840]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite
</UL>

<P><STRONG><a name="[987]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_sig_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[848]"></a>mbedtls_ssl_get_key_exchange_md_tls1_2</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_get_key_exchange_md_tls1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = mbedtls_ssl_get_key_exchange_md_tls1_2 &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[8ef]"></a>mbedtls_ssl_get_peer_cert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_peer_cert))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[849]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_get_record_expansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_ssl_get_record_expansion &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[8ed]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_verify_result))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[8ee]"></a>mbedtls_ssl_get_version</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_version))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[84b]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handle_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[84d]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[84f]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ssl_cli.o(i.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[844]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[84e]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[85e]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[998]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hash_from_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[7be]"></a>mbedtls_ssl_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[83c]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[988]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_md_alg_from_hash))
<BR><BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[983]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_optimize_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[852]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, ssl_tls.o(i.mbedtls_ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_restartable
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[85c]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_in_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[85d]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[989]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_pk_alg_from_sig))
<BR><BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[84c]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[865]"></a>mbedtls_ssl_read</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 3616<LI>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_dowork
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_sock_recv
</UL>

<P><STRONG><a name="[860]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[982]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_read_version))
<BR><BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[86c]"></a>mbedtls_ssl_renegotiate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560<LI>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[839]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[845]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_session_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[7c1]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_session_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[86e]"></a>mbedtls_ssl_session_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_session_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_ssl_session_reset &rArr; ssl_session_reset_int &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_open
</UL>

<P><STRONG><a name="[7bf]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7c0]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_set_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7c2]"></a>mbedtls_ssl_set_session</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = mbedtls_ssl_set_session &rArr; ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[7c3]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[873]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_sig_from_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_sig_from_pk
</UL>
<BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[843]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[86b]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_update_handshake_status))
<BR><BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[874]"></a>mbedtls_ssl_write</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 3608<LI>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_send
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_sock_send
</UL>

<P><STRONG><a name="[856]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_cert
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[859]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[85a]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[877]"></a>mbedtls_ssl_write_handshake_msg</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write_handshake_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[86d]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[878]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_write_version))
<BR><BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[836]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_check_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[835]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, x509_crt.o(i.mbedtls_x509_crt_check_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[7a3]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_uninit
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free_resource
</UL>

<P><STRONG><a name="[787]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 976 bytes, Stack size 88 bytes, x509_crt.o(i.mbedtls_x509_crt_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[7b8]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_x509_crt_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[881]"></a>mbedtls_x509_crt_is_revoked</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_is_revoked))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbedtls_x509_crt_is_revoked &rArr; mbedtls_x509_time_is_past &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[883]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, x509_crt.o(i.mbedtls_x509_crt_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[884]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_chain
</UL>

<P><STRONG><a name="[886]"></a>mbedtls_x509_crt_verify_info</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_crt_verify_info &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[862]"></a>mbedtls_x509_crt_verify_restartable</STRONG> (Thumb, 220 bytes, Stack size 152 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_x509_crt_verify_restartable &rArr; x509_crt_verify_chain &rArr; x509_crt_find_parent_in &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[87b]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 230 bytes, Stack size 296 bytes, x509.o(i.mbedtls_x509_dn_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mbedtls_x509_dn_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[88c]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[88d]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[88e]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[88f]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[891]"></a>mbedtls_x509_get_rsassa_pss_params</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, x509.o(i.mbedtls_x509_get_rsassa_pss_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[893]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[894]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[895]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[896]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[87e]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_key_size_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_key_size_helper &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[87a]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_serial_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_serial_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[87c]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, x509.o(i.mbedtls_x509_sig_alg_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_sig_alg_gets &rArr; mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_name
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[899]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_time_is_future))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_x509_time_is_future &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[882]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_time_is_past))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_x509_time_is_past &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[89c]"></a>mfxstm32l152_ClearGlobalIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_ClearGlobalIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mfxstm32l152_ClearGlobalIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_ClearIT
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_ClearIT
</UL>

<P><STRONG><a name="[13]"></a>mfxstm32l152_DeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mfxstm32l152_DeInit &rArr; MFX_IO_DeInit &rArr; I2C2_DeInit &rArr; I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[89d]"></a>mfxstm32l152_DisableITSource</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_DisableITSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_DisableIT
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_DisableIT
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_DisableIT
</UL>

<P><STRONG><a name="[89e]"></a>mfxstm32l152_EnableITSource</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_EnableITSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnableIT
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IDD_EnableIT
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Error_EnableIT
</UL>

<P><STRONG><a name="[1e]"></a>mfxstm32l152_Error_ClearIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_ClearIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mfxstm32l152_Error_ClearIT &rArr; mfxstm32l152_ClearGlobalIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ClearGlobalIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>mfxstm32l152_Error_DisableIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_Error_DisableIT &rArr; mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>mfxstm32l152_Error_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_Error_EnableIT &rArr; mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>mfxstm32l152_Error_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_Error_GetITStatus &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>mfxstm32l152_Error_ReadMsg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_ReadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_Error_ReadMsg &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>mfxstm32l152_Error_ReadSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_Error_ReadSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_Error_ReadSrc &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>mfxstm32l152_IDD_ClearIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_ClearIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mfxstm32l152_IDD_ClearIT &rArr; mfxstm32l152_ClearGlobalIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_ClearGlobalIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>mfxstm32l152_IDD_Config</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mfxstm32l152_IDD_Config &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>mfxstm32l152_IDD_DisableIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IDD_DisableIT &rArr; mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>mfxstm32l152_IDD_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IDD_EnableIT &rArr; mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>mfxstm32l152_IDD_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_IDD_GetITStatus &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>mfxstm32l152_IDD_GetValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IDD_GetValue &rArr; MFX_IO_ReadMultiple &rArr; I2C2_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>mfxstm32l152_IDD_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IDD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_IDD_Start &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>mfxstm32l152_IO_ClearIT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_ClearIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfxstm32l152_IO_ClearIT &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>mfxstm32l152_IO_Config</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mfxstm32l152_IO_Config &rArr; mfxstm32l152_IO_SetIrqTypeMode &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqTypeMode
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqEvtMode
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_InitPin
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnablePinIT
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnableIT
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_DisablePinIT
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>mfxstm32l152_IO_DisableIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IO_DisableIT &rArr; mfxstm32l152_DisableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_DisableITSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[89f]"></a>mfxstm32l152_IO_DisablePinIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_DisablePinIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_DisablePinIT &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[f]"></a>mfxstm32l152_IO_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IO_EnableIT &rArr; mfxstm32l152_EnableITSource &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_EnableITSource
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[8a3]"></a>mfxstm32l152_IO_EnablePinIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_EnablePinIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_EnablePinIT &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[11]"></a>mfxstm32l152_IO_ITStatus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_ITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IO_ITStatus &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[8a1]"></a>mfxstm32l152_IO_InitPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_InitPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_InitPin &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[e]"></a>mfxstm32l152_IO_ReadPin</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mfxstm32l152_IO_ReadPin &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[8a4]"></a>mfxstm32l152_IO_SetIrqEvtMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_SetIrqEvtMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mfxstm32l152_IO_SetIrqEvtMode &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[8a2]"></a>mfxstm32l152_IO_SetIrqTypeMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_SetIrqTypeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mfxstm32l152_IO_SetIrqTypeMode &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[b]"></a>mfxstm32l152_IO_Start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_IO_Start &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>mfxstm32l152_IO_WritePin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_IO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_IO_WritePin &rArr; mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_reg24_setPinValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>mfxstm32l152_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mfxstm32l152_Init &rArr; MFX_IO_Init &rArr; I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinType
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_SetIrqOutPinPolarity
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_GetInstance
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mfxstm32l152.o(.data)
<LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>mfxstm32l152_LowPower</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_LowPower &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_EnableWakeupPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>mfxstm32l152_ReadID</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mfxstm32l152_ReadID &rArr; MFX_IO_Init &rArr; I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Init
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mfxstm32l152.o(.data)
<LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>mfxstm32l152_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mfxstm32l152_Reset &rArr; MFX_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mfxstm32l152.o(.data)
<LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[8a6]"></a>mfxstm32l152_SetIrqOutPinPolarity</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_SetIrqOutPinPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_SetIrqOutPinPolarity &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[8a7]"></a>mfxstm32l152_SetIrqOutPinType</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mfxstm32l152.o(i.mfxstm32l152_SetIrqOutPinType))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mfxstm32l152_SetIrqOutPinType &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[15]"></a>mfxstm32l152_WakeUp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfxstm32l152.o(i.mfxstm32l152_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mfxstm32l152_WakeUp &rArr; MFX_IO_EnableWakeupPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_GetInstance
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Wakeup
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_EnableWakeupPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfxstm32l152.o(.data)
</UL>
<P><STRONG><a name="[5d4]"></a>mqtt_client_connect</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, mqtt_client.o(i.mqtt_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mqtt_client_connect &rArr; cloneMqttOptions &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_open
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
</UL>

<P><STRONG><a name="[72c]"></a>mqtt_client_deinit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mqtt_client.o(i.mqtt_client_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mqtt_client_deinit &rArr; mqtt_codec_destroy &rArr; BUFFER_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_destroy
</UL>

<P><STRONG><a name="[415]"></a>mqtt_client_disconnect</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, mqtt_client.o(i.mqtt_client_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mqtt_client_disconnect &rArr; log_outgoing_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_close
</UL>

<P><STRONG><a name="[416]"></a>mqtt_client_dowork</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, mqtt_client.o(i.mqtt_client_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mqtt_client_dowork &rArr; log_outgoing_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_close
</UL>

<P><STRONG><a name="[4bb]"></a>mqtt_client_init</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, mqtt_client.o(i.mqtt_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mqtt_client_init &rArr; tickcounter_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_create
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
</UL>

<P><STRONG><a name="[8ac]"></a>mqtt_client_publish</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, mqtt_client.o(i.mqtt_client_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getQosType
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getPacketId
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsRetained
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsDuplicateMsg
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mqtt_message
</UL>

<P><STRONG><a name="[52e]"></a>mqtt_client_set_trace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_client.o(i.mqtt_client_set_trace))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_trace
</UL>

<P><STRONG><a name="[5d5]"></a>mqtt_client_subscribe</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, mqtt_client.o(i.mqtt_client_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mqtt_client_subscribe &rArr; mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_to_topic
</UL>

<P><STRONG><a name="[534]"></a>mqtt_client_unsubscribe</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, mqtt_client.o(i.mqtt_client_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
</UL>

<P><STRONG><a name="[8b6]"></a>mqtt_codec_bytesReceived</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_bytesReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mqtt_codec_bytesReceived &rArr; prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePacketData
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
</UL>

<P><STRONG><a name="[8b8]"></a>mqtt_codec_connect</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mqtt_codec.o(i.mqtt_codec_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mqtt_codec_connect &rArr; constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[8ab]"></a>mqtt_codec_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_codec.o(i.mqtt_codec_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mqtt_codec_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
</UL>

<P><STRONG><a name="[8a8]"></a>mqtt_codec_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mqtt_codec_destroy &rArr; BUFFER_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
</UL>

<P><STRONG><a name="[8a9]"></a>mqtt_codec_disconnect</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_disconnect &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>

<P><STRONG><a name="[8aa]"></a>mqtt_codec_ping</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_ping &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
</UL>

<P><STRONG><a name="[8b3]"></a>mqtt_codec_publish</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, mqtt_codec.o(i.mqtt_codec_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[572]"></a>mqtt_codec_publishAck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_publishAck &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[8b9]"></a>mqtt_codec_publishComplete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_publishComplete &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[571]"></a>mqtt_codec_publishReceived</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_publishReceived &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[8ba]"></a>mqtt_codec_publishRelease</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mqtt_codec_publishRelease &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[8b4]"></a>mqtt_codec_subscribe</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
</UL>

<P><STRONG><a name="[8b5]"></a>mqtt_codec_unsubscribe</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
</UL>

<P><STRONG><a name="[8c4]"></a>mqttmessage_create</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, mqtt_message.o(i.mqttmessage_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mqttmessage_create &rArr; create_msg_object &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg_object
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mqtt_message
</UL>

<P><STRONG><a name="[56d]"></a>mqttmessage_create_in_place</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, mqtt_message.o(i.mqttmessage_create_in_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mqttmessage_create_in_place &rArr; create_msg_object &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg_object
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[574]"></a>mqttmessage_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mqtt_message.o(i.mqttmessage_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mqttmessage_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mqtt_message
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[8ad]"></a>mqttmessage_getApplicationMsg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getApplicationMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getApplicationMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[8af]"></a>mqttmessage_getIsDuplicateMsg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getIsDuplicateMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getIsDuplicateMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[8b0]"></a>mqttmessage_getIsRetained</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getIsRetained))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getIsRetained
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[8b1]"></a>mqttmessage_getPacketId</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getPacketId))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getPacketId
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[8ae]"></a>mqttmessage_getQosType</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getQosType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getQosType
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[8b2]"></a>mqttmessage_getTopicName</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_getTopicName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_getTopicName
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[56e]"></a>mqttmessage_setIsDuplicateMsg</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_setIsDuplicateMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_setIsDuplicateMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[56f]"></a>mqttmessage_setIsRetained</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mqtt_message.o(i.mqttmessage_setIsRetained))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttmessage_setIsRetained
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[6ba]"></a>net_access_control</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, net_socket.o(i.net_access_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_access_control
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_low_level_socket
</UL>

<P><STRONG><a name="[8c6]"></a>net_aton</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, net_address.o(i.net_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = net_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_aton_r
</UL>

<P><STRONG><a name="[8c5]"></a>net_aton_r</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_address.o(i.net_aton_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = net_aton_r &rArr; net_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
</UL>

<P><STRONG><a name="[13d]"></a>net_calloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net_os.o(i.net_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_calloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mbedtls.o(i.net_mbedtls_start)
</UL>
<P><STRONG><a name="[8d1]"></a>net_cellular_set_credentials</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, net_class_extension.o(i.net_cellular_set_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_cellular_set_credentials &rArr; netif_check &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_network_credentials
</UL>

<P><STRONG><a name="[8d3]"></a>net_closesocket</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, net_socket.o(i.net_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = net_closesocket &rArr; net_mbedtls_stop &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_stop
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_access_control
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket_get_and_lock
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_socket
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_low_level_socket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_close
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
</UL>

<P><STRONG><a name="[8d8]"></a>net_connect</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, net_socket.o(i.net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4096<LI>Call Chain = net_connect &rArr; net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_access_control
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket_get_and_lock
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_socket
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_low_level_socket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
</UL>

<P><STRONG><a name="[8db]"></a>net_if_connect</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, net_core.o(i.net_if_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = net_if_connect &rArr; netif_check &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[8d9]"></a>net_if_find</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net_core.o(i.net_if_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
</UL>

<P><STRONG><a name="[674]"></a>net_if_get_mac_address</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, net_core.o(i.net_if_get_mac_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = net_if_get_mac_address &rArr; netif_check &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[8dc]"></a>net_if_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, net_core.o(i.net_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = net_if_init &rArr; netif_check &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init_locks
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[653]"></a>net_if_notify</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, net_core.o(i.net_if_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = net_if_notify &rArr; net_unlock_nochk &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock_nochk
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_stop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_start
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_deinit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_connect
</UL>

<P><STRONG><a name="[8df]"></a>net_if_start</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, net_core.o(i.net_if_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = net_if_start &rArr; netif_check &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[8e0]"></a>net_if_wait_state</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_core.o(i.net_if_wait_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_if_wait_state &rArr; net_lock_nochk &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock_nochk
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[8dd]"></a>net_init_locks</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net_os.o(i.net_init_locks))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_init_locks &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tls_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
</UL>

<P><STRONG><a name="[729]"></a>net_lock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_os.o(i.net_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_lock &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket_get_and_lock
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_socket
</UL>

<P><STRONG><a name="[8e1]"></a>net_lock_nochk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_os.o(i.net_lock_nochk))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_lock_nochk &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_wait_state
</UL>

<P><STRONG><a name="[8e3]"></a>net_mbedtls_check_tlsdata</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net_mbedtls.o(i.net_mbedtls_check_tlsdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_mbedtls_check_tlsdata &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
</UL>

<P><STRONG><a name="[8e4]"></a>net_mbedtls_set_read_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_mbedtls.o(i.net_mbedtls_set_read_timeout))
<BR><BR>[Calls]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
</UL>

<P><STRONG><a name="[8e6]"></a>net_mbedtls_sock_recv</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, net_mbedtls.o(i.net_mbedtls_sock_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3624<LI>Call Chain = net_mbedtls_sock_recv &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
</UL>

<P><STRONG><a name="[8e7]"></a>net_mbedtls_sock_send</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_mbedtls.o(i.net_mbedtls_sock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3616<LI>Call Chain = net_mbedtls_sock_send &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>

<P><STRONG><a name="[8da]"></a>net_mbedtls_start</STRONG> (Thumb, 848 bytes, Stack size 544 bytes, net_mbedtls.o(i.net_mbedtls_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056<LI>Call Chain = net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_set_threshold
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_version
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_peer_cert
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_cert_profile
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free_resource
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
</UL>

<P><STRONG><a name="[8d6]"></a>net_mbedtls_stop</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, net_mbedtls.o(i.net_mbedtls_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = net_mbedtls_stop &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
</UL>

<P><STRONG><a name="[73f]"></a>net_ntoa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_address.o(i.net_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = net_ntoa &rArr; net_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hnet_notify
</UL>

<P><STRONG><a name="[8f0]"></a>net_ntoa_r</STRONG> (Thumb, 126 bytes, Stack size 36 bytes, net_address.o(i.net_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = net_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa
</UL>

<P><STRONG><a name="[8f1]"></a>net_recv</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, net_socket.o(i.net_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = net_recv &rArr; net_mbedtls_sock_recv &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_sock_recv
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_access_control
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket_get_and_lock
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_socket
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_low_level_socket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_receive
</UL>

<P><STRONG><a name="[8f2]"></a>net_send</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, net_socket.o(i.net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3648<LI>Call Chain = net_send &rArr; net_mbedtls_sock_send &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_sock_send
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_access_control
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket_get_and_lock
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_socket
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_low_level_socket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
</UL>

<P><STRONG><a name="[8f3]"></a>net_setsockopt</STRONG> (Thumb, 820 bytes, Stack size 64 bytes, net_socket.o(i.net_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = net_setsockopt &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_set_read_timeout
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_check_tlsdata
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_access_control
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket_get_and_lock
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_socket
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_low_level_socket
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
</UL>

<P><STRONG><a name="[8f4]"></a>net_socket</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, net_socket.o(i.net_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_socket &rArr; find_free_socket &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_socket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
</UL>

<P><STRONG><a name="[8e2]"></a>net_tls_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_mbedtls.o(i.net_tls_init))
<BR><BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init_locks
</UL>

<P><STRONG><a name="[72a]"></a>net_unlock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_os.o(i.net_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_socket
</UL>

<P><STRONG><a name="[8de]"></a>net_unlock_nochk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_os.o(i.net_unlock_nochk))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_unlock_nochk &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
</UL>

<P><STRONG><a name="[8d2]"></a>netif_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_core.o(i.netif_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = netif_check &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_set_credentials
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_start
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_connect
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_get_mac_address
</UL>

<P><STRONG><a name="[659]"></a>nifman_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nifman.o(i.nifman_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nifman_init &rArr; osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_init
</UL>

<P><STRONG><a name="[65d]"></a>nifman_start</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nifman.o(i.nifman_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nifman_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_register_gen_event_cb
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_start
</UL>

<P><STRONG><a name="[343]"></a>osCDS_activate_pdn</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_activate_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_activate_pdn &rArr; CS_activate_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_activate_pdn
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_activate_pdn
</UL>

<P><STRONG><a name="[347]"></a>osCDS_attach_PS_domain</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_attach_PS_domain))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = osCDS_attach_PS_domain &rArr; CS_attach_PS_domain &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_attach_PS_domain
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_powered_on_state
</UL>

<P><STRONG><a name="[31f]"></a>osCDS_cellular_service_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_cellular_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osCDS_cellular_service_init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_init
</UL>

<P><STRONG><a name="[345]"></a>osCDS_define_pdn</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_define_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = osCDS_define_pdn &rArr; CS_define_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_define_pdn
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_define_pdn
</UL>

<P><STRONG><a name="[688]"></a>osCDS_dns_request</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_dns_request), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_dns_request
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gethostbyname_ip_modem
</UL>

<P><STRONG><a name="[31a]"></a>osCDS_get_attach_status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_get_attach_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_get_attach_status &rArr; CS_get_attach_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_attach_status
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
</UL>

<P><STRONG><a name="[33b]"></a>osCDS_get_device_info</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_get_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_get_device_info &rArr; CS_get_device_info &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_device_info
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
</UL>

<P><STRONG><a name="[317]"></a>osCDS_get_net_status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_get_net_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_get_net_status &rArr; CS_get_net_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_net_status
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
</UL>

<P><STRONG><a name="[33f]"></a>osCDS_init_modem</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_init_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = osCDS_init_modem &rArr; CS_init_modem &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
</UL>

<P><STRONG><a name="[694]"></a>osCDS_ping</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = osCDS_ping &rArr; CDS_ping &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_ping
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process_ip_modem
</UL>

<P><STRONG><a name="[32b]"></a>osCDS_power_on</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = osCDS_power_on &rArr; CS_power_on &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_on
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_power_on_modem_mngt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[346]"></a>osCDS_register_net</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_register_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_register_net &rArr; CS_register_net &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_net
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_powered_on_state
</UL>

<P><STRONG><a name="[342]"></a>osCDS_register_pdn_event</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_register_pdn_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_register_pdn_event &rArr; CS_register_pdn_event &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_register_pdn_event
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_activate_pdn
</UL>

<P><STRONG><a name="[34a]"></a>osCDS_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = osCDS_reset &rArr; CS_reset &rArr; perform_SW_reset &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
</UL>

<P><STRONG><a name="[341]"></a>osCDS_set_default_pdn</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_set_default_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_set_default_pdn &rArr; CS_set_default_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_set_default_pdn
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_activate_pdn
</UL>

<P><STRONG><a name="[67d]"></a>osCDS_socket_bind</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_socket_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osCDS_socket_bind &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_bind
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_connect_udp_service
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bind_ip_modem
</UL>

<P><STRONG><a name="[681]"></a>osCDS_socket_close</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_socket_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCDS_socket_close &rArr; CDS_socket_close &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket_ip_modem
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closesocket_ip_modem
</UL>

<P><STRONG><a name="[684]"></a>osCDS_socket_connect</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, cellular_service_os.o(i.osCDS_socket_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = osCDS_socket_connect &rArr; CDS_socket_connect &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_connect
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_connect_udp_service
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_connect_ip_modem
</UL>

<P><STRONG><a name="[6a5]"></a>osCDS_socket_create</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osCDS_socket_create &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket_ip_modem
</UL>

<P><STRONG><a name="[696]"></a>osCDS_socket_receive</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = osCDS_socket_receive &rArr; CDS_socket_receive &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receive
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_ip_modem
</UL>

<P><STRONG><a name="[69a]"></a>osCDS_socket_receivefrom</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, cellular_service_os.o(i.osCDS_socket_receivefrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = osCDS_socket_receivefrom &rArr; CDS_socket_receivefrom &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_receivefrom
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
</UL>

<P><STRONG><a name="[69e]"></a>osCDS_socket_send</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = osCDS_socket_send &rArr; CDS_socket_send &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_send
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_ip_modem
</UL>

<P><STRONG><a name="[6a0]"></a>osCDS_socket_sendto</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, cellular_service_os.o(i.osCDS_socket_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = osCDS_socket_sendto &rArr; CDS_socket_sendto &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_sendto
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
</UL>

<P><STRONG><a name="[6a6]"></a>osCDS_socket_set_callbacks</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cellular_service_os.o(i.osCDS_socket_set_callbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osCDS_socket_set_callbacks &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_set_callbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket_ip_modem
</UL>

<P><STRONG><a name="[329]"></a>osCDS_subscribe_modem_event</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_subscribe_modem_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = osCDS_subscribe_modem_event &rArr; CS_subscribe_modem_event &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_subscribe_modem_event
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[340]"></a>osCDS_subscribe_net_event</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCDS_subscribe_net_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = osCDS_subscribe_net_event &rArr; CS_subscribe_net_event &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_subscribe_net_event
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
</UL>

<P><STRONG><a name="[34c]"></a>osCS_get_signal_quality</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCS_get_signal_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCS_get_signal_quality &rArr; CS_get_signal_quality &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_signal_quality
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_set_signal_quality
</UL>

<P><STRONG><a name="[33d]"></a>osCS_sim_select</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cellular_service_os.o(i.osCS_sim_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osCS_sim_select &rArr; CS_sim_select &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_sim_select
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
</UL>

<P><STRONG><a name="[33c]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_delay
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_send_uart
</UL>

<P><STRONG><a name="[76c]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[320]"></a>osMessageCreate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcore_task_start
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_CtrlEventStartTask
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_create_socket_desc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_init
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_init
</UL>

<P><STRONG><a name="[26b]"></a>osMessageGet</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_CtrlEventStartTask
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_ip_modem
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process_ip_modem
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_thread
</UL>

<P><STRONG><a name="[348]"></a>osMessagePut</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgReceivedCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_notif_cb
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_ping_rsp_cb
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_data_ready_cb
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_closing_cb
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_polling_timer_callback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_notif_cb
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_notif_cb
</UL>

<P><STRONG><a name="[68a]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_cellular_service_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_init
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init_ip_modem
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_Init
</UL>

<P><STRONG><a name="[68f]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_attach_status
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_dns_request
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_define_pdn
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_attach_PS_domain
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_activate_pdn
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write_event
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_provide_socket_desc
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_delete_socket_desc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_sim_select
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_get_signal_quality
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_net_event
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_modem_event
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_set_callbacks
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_sendto
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_send
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receivefrom
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receive
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_create
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_connect
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_close
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_bind
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_set_default_pdn
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_reset
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_pdn_event
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_net
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_power_on
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_ping
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_init_modem
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_net_status
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_device_info
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartTransmit
</UL>

<P><STRONG><a name="[68e]"></a>osMutexWait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_attach_status
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_dns_request
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_define_pdn
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_attach_PS_domain
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_activate_pdn
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write_event
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_provide_socket_desc
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_delete_socket_desc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_sim_select
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_get_signal_quality
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_net_event
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_modem_event
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_set_callbacks
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_sendto
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_send
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receivefrom
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_receive
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_create
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_connect
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_close
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_bind
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_set_default_pdn
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_reset
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_pdn_event
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_net
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_power_on
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_ping
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_init_modem
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_net_status
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_device_info
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartTransmit
</UL>

<P><STRONG><a name="[2af]"></a>osSemaphoreCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init_locks
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcore_task_start
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_open
</UL>

<P><STRONG><a name="[26f]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock_nochk
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgSentCallback
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
</UL>

<P><STRONG><a name="[2b0]"></a>osSemaphoreWait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock_nochk
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AT_transaction
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcore_task_start
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_open
</UL>

<P><STRONG><a name="[5dc]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[326]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcore_task_start
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_ctrl_event_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nifman_start
</UL>

<P><STRONG><a name="[54d]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
</UL>

<P><STRONG><a name="[324]"></a>osTimerCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osTimerCreate &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_CtrlEventStartTask
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
</UL>

<P><STRONG><a name="[325]"></a>osTimerStart</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cmsis_os.o(i.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_start
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_waiting_for_network_status_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_event_callback
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_activate_pdn
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[733]"></a>platform_get_default_tlsio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_stm32cube.o(i.platform_get_default_tlsio))
<BR><BR>[Calls]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_get_interface_description
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_transport_io
</UL>

<P><STRONG><a name="[76d]"></a>platform_get_platform_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform_stm32cube.o(i.platform_get_platform_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = platform_get_platform_info &rArr; STRING_construct &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
</UL>

<P><STRONG><a name="[54c]"></a>platform_init</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, cloud.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 5256<LI>Call Chain = platform_init &rArr; setRTCTimeDateFromNetwork &rArr; net_connect &rArr; net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTLSCredentials
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_network_credentials
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTCTimeDateFromNetwork
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_wait_state
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_start
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_connect
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTLSRootCA
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTLSDeviceConfig
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkIoTDeviceConfig
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOUD_Error_Handler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_WaitForPush
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_root_ca
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_iot_config
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_device_keypair
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainThread
</UL>

<P><STRONG><a name="[931]"></a>prov_auth_construct_sas_token</STRONG> (Thumb, 472 bytes, Stack size 120 bytes, prov_auth_client.o(i.prov_auth_construct_sas_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = prov_auth_construct_sas_token &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode_Bytes
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_tToString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
</UL>

<P><STRONG><a name="[576]"></a>prov_auth_create</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, prov_auth_client.o(i.prov_auth_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prov_auth_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_tpm_interface
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_x509_interface
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_get_type
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_get_symmetric_key
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_get_symm_registration_name
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
</UL>

<P><STRONG><a name="[6cd]"></a>prov_auth_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, prov_auth_client.o(i.prov_auth_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prov_auth_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_instance
</UL>

<P><STRONG><a name="[581]"></a>prov_auth_get_alias_key</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, prov_auth_client.o(i.prov_auth_get_alias_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_auth_get_alias_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
</UL>

<P><STRONG><a name="[580]"></a>prov_auth_get_certificate</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, prov_auth_client.o(i.prov_auth_get_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_auth_get_certificate
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
</UL>

<P><STRONG><a name="[57e]"></a>prov_auth_get_endorsement_key</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, prov_auth_client.o(i.prov_auth_get_endorsement_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prov_auth_get_endorsement_key &rArr; BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
</UL>

<P><STRONG><a name="[57d]"></a>prov_auth_get_registration_id</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, prov_auth_client.o(i.prov_auth_get_registration_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = prov_auth_get_registration_id &rArr; load_registration_id &rArr; SHA256Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_registration_id
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
</UL>

<P><STRONG><a name="[57f]"></a>prov_auth_get_storage_key</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, prov_auth_client.o(i.prov_auth_get_storage_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prov_auth_get_storage_key &rArr; BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
</UL>

<P><STRONG><a name="[577]"></a>prov_auth_get_type</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, prov_auth_client.o(i.prov_auth_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prov_auth_get_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
</UL>

<P><STRONG><a name="[8f6]"></a>prov_auth_import_key</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, prov_auth_client.o(i.prov_auth_import_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_auth_import_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_transport_registration_data
</UL>

<P><STRONG><a name="[583]"></a>prov_auth_set_registration_id</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, prov_auth_client.o(i.prov_auth_set_registration_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_auth_set_registration_id &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_SetOption
</UL>

<P><STRONG><a name="[934]"></a>prov_dev_get_symm_registration_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prov_security_factory.o(i.prov_dev_get_symm_registration_name))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
</UL>

<P><STRONG><a name="[933]"></a>prov_dev_get_symmetric_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prov_security_factory.o(i.prov_dev_get_symmetric_key))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
</UL>

<P><STRONG><a name="[750]"></a>prov_dev_security_get_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prov_security_factory.o(i.prov_dev_security_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_init
</UL>

<P><STRONG><a name="[66d]"></a>prov_dev_security_init</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, prov_security_factory.o(i.prov_dev_security_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = prov_dev_security_init &rArr; iothub_security_init &rArr;  prov_dev_security_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_hsm_system
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_init
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_type
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_init
</UL>

<P><STRONG><a name="[935]"></a>prov_transport_common_mqtt_close</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prov_transport_common_mqtt_close &rArr; mqtt_client_dowork &rArr; log_outgoing_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_close
</UL>

<P><STRONG><a name="[936]"></a>prov_transport_common_mqtt_create</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prov_transport_common_mqtt_create &rArr; mqtt_client_init &rArr; tickcounter_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_mqtt_data
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_create
</UL>

<P><STRONG><a name="[937]"></a>prov_transport_common_mqtt_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prov_transport_common_mqtt_destroy &rArr; mqtt_client_deinit &rArr; mqtt_codec_destroy &rArr; BUFFER_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_mqtt_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_destroy
</UL>

<P><STRONG><a name="[938]"></a>prov_transport_common_mqtt_dowork</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = prov_transport_common_mqtt_dowork &rArr; send_register_message &rArr; send_mqtt_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_to_topic
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register_message
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_operation_status_message
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_dowork
</UL>

<P><STRONG><a name="[93c]"></a>prov_transport_common_mqtt_get_operation_status</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_get_operation_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prov_transport_common_mqtt_get_operation_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_get_operation_status
</UL>

<P><STRONG><a name="[93d]"></a>prov_transport_common_mqtt_open</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prov_transport_common_mqtt_open &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_open
</UL>

<P><STRONG><a name="[93e]"></a>prov_transport_common_mqtt_register_device</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_register_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prov_transport_common_mqtt_register_device
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_register_device
</UL>

<P><STRONG><a name="[93f]"></a>prov_transport_common_mqtt_set_option</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prov_transport_common_mqtt_set_option &rArr; xio_setoption &rArr; OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_transport_io_object
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_set_option
</UL>

<P><STRONG><a name="[940]"></a>prov_transport_common_mqtt_set_proxy</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_set_proxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_transport_common_mqtt_set_proxy &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_set_proxy
</UL>

<P><STRONG><a name="[941]"></a>prov_transport_common_mqtt_set_trace</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_set_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_transport_common_mqtt_set_trace
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_set_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_set_trace
</UL>

<P><STRONG><a name="[942]"></a>prov_transport_common_mqtt_set_trusted_cert</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_set_trusted_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_transport_common_mqtt_set_trusted_cert &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_set_trusted_cert
</UL>

<P><STRONG><a name="[943]"></a>prov_transport_common_mqtt_x509_cert</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_x509_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_transport_common_mqtt_x509_cert &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_mqtt_x509_cert
</UL>

<P><STRONG><a name="[3f]"></a>prov_transport_mqtt_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prov_transport_mqtt_close &rArr; prov_transport_common_mqtt_close &rArr; mqtt_client_dowork &rArr; log_outgoing_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>prov_transport_mqtt_create</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prov_transport_mqtt_create &rArr; prov_transport_common_mqtt_create &rArr; mqtt_client_init &rArr; tickcounter_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>prov_transport_mqtt_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prov_transport_mqtt_destroy &rArr; prov_transport_common_mqtt_destroy &rArr; mqtt_client_deinit &rArr; mqtt_codec_destroy &rArr; BUFFER_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>prov_transport_mqtt_dowork</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = prov_transport_mqtt_dowork &rArr; prov_transport_common_mqtt_dowork &rArr; send_register_message &rArr; send_mqtt_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>prov_transport_mqtt_get_operation_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_get_operation_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prov_transport_mqtt_get_operation_status &rArr; prov_transport_common_mqtt_get_operation_status
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_get_operation_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>prov_transport_mqtt_open</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prov_transport_mqtt_open &rArr; prov_transport_common_mqtt_open &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>prov_transport_mqtt_register_device</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_register_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prov_transport_mqtt_register_device &rArr; prov_transport_common_mqtt_register_device
</UL>
<BR>[Calls]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_register_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>prov_transport_mqtt_set_trace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_transport_mqtt_set_trace &rArr; prov_transport_common_mqtt_set_trace
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_trace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[650]"></a>pvPortMalloc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_net_driver
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_init_class
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_check_tlsdata
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_create_socket_desc
</UL>

<P><STRONG><a name="[9b8]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[956]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[65e]"></a>radio_mngt_radio_on</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio_mngt.o(i.radio_mngt_radio_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = radio_mngt_radio_on &rArr; CST_radio_on &rArr; CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_radio_on
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_start
</UL>

<P><STRONG><a name="[2be]"></a>realloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net_os.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>

<P><STRONG><a name="[63b]"></a>reset_pdn_event</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_modem_common.o(i.reset_pdn_event))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGEV
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_modem_get_urc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcm_reset_persistent_context
</UL>

<P><STRONG><a name="[4b8]"></a>retry_control_create</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, iothub_client_retry_control.o(i.retry_control_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = retry_control_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_reset
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[531]"></a>retry_control_destroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iothub_client_retry_control.o(i.retry_control_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = retry_control_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
</UL>

<P><STRONG><a name="[8c0]"></a>retry_control_reset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iothub_client_retry_control.o(i.retry_control_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = retry_control_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[4b2]"></a>retry_control_should_retry</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, iothub_client_retry_control.o(i.retry_control_should_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = retry_control_should_retry &rArr; calculate_next_wait_time &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[3ab]"></a>scanbase64b16</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, agenttypesystem.o(i.scanbase64b16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scanbase64b16 &rArr; base64b16
</UL>
<BR>[Calls]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[3ac]"></a>scanbase64b8</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, agenttypesystem.o(i.scanbase64b8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scanbase64b8
</UL>
<BR>[Calls]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[679]"></a>serializer_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schemalib.o(i.serializer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = serializer_deinit &rArr; CodeFirst_Deinit &rArr; DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[667]"></a>setIoTDeviceConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, iot_flash_config.o(i.setIoTDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setIoTDeviceConfig &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
</UL>

<P><STRONG><a name="[926]"></a>setRTCTimeDateFromNetwork</STRONG> (Thumb, 1686 bytes, Stack size 1144 bytes, timedate.o(i.setRTCTimeDateFromNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 5240<LI>Call Chain = setRTCTimeDateFromNetwork &rArr; net_connect &rArr; net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa_r
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_aton_r
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[91f]"></a>set_network_credentials</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, set_credentials.o(i.set_network_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_network_credentials &rArr; net_cellular_set_credentials &rArr; netif_check &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_set_credentials
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[622]"></a>singlylinkedlist_add</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, singlylinkedlist.o(i.singlylinkedlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = singlylinkedlist_add &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
</UL>

<P><STRONG><a name="[96d]"></a>singlylinkedlist_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, singlylinkedlist.o(i.singlylinkedlist_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = singlylinkedlist_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
</UL>

<P><STRONG><a name="[6c7]"></a>singlylinkedlist_destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, singlylinkedlist.o(i.singlylinkedlist_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = singlylinkedlist_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_event_callback_list
</UL>

<P><STRONG><a name="[4d0]"></a>singlylinkedlist_find</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, singlylinkedlist.o(i.singlylinkedlist_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = singlylinkedlist_find
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_MessageCallbackFromInput
</UL>

<P><STRONG><a name="[6c6]"></a>singlylinkedlist_foreach</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, singlylinkedlist.o(i.singlylinkedlist_foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = singlylinkedlist_foreach
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_event_callback_list
</UL>

<P><STRONG><a name="[96e]"></a>singlylinkedlist_get_head_item</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, singlylinkedlist.o(i.singlylinkedlist_get_head_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = singlylinkedlist_get_head_item
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[4d1]"></a>singlylinkedlist_item_get_value</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, singlylinkedlist.o(i.singlylinkedlist_item_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = singlylinkedlist_item_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_event_equal_for_match
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_MessageCallbackFromInput
</UL>

<P><STRONG><a name="[96f]"></a>singlylinkedlist_remove</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, singlylinkedlist.o(i.singlylinkedlist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = singlylinkedlist_remove &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[6b1]"></a>size_tToString</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, crt_abstractions.o(i.size_tToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = size_tToString
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
</UL>

<P><STRONG><a name="[165]"></a>socketio_close</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, socketio_mbed.o(i.socketio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = socketio_close &rArr; tcpsocketconnection_close &rArr; net_closesocket &rArr; net_mbedtls_stop &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>socketio_create</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, socketio_mbed.o(i.socketio_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = socketio_create &rArr; singlylinkedlist_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>socketio_destroy</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, socketio_mbed.o(i.socketio_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = socketio_destroy &rArr; singlylinkedlist_remove &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>socketio_dowork</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, socketio_mbed.o(i.socketio_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 3688<LI>Call Chain = socketio_dowork &rArr; tcpsocketconnection_receive &rArr; net_recv &rArr; net_mbedtls_sock_recv &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_receive
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[742]"></a>socketio_get_interface_description</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, socketio_mbed.o(i.socketio_get_interface_description))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_create
</UL>

<P><STRONG><a name="[164]"></a>socketio_open</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, socketio_mbed.o(i.socketio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = socketio_open &rArr; tcpsocketconnection_connect &rArr; net_connect &rArr; net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>socketio_send</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, socketio_mbed.o(i.socketio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = socketio_send &rArr; tcpsocketconnection_send &rArr; net_send &rArr; net_mbedtls_sock_send &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>socketio_setoption</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, socketio_mbed.o(i.socketio_setoption))
<BR>[Address Reference Count : 2]<UL><LI> socketio_mbed.o(i.socketio_retrieveoptions)
<LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[2c4]"></a>sprintf_s</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, crt_abstractions.o(i.sprintf_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sprintf_s &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[60d]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[76e]"></a>strcpy_s</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, crt_abstractions.o(i.strcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strcpy_s &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
</UL>

<P><STRONG><a name="[970]"></a>tcpsocketconnection_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = tcpsocketconnection_close &rArr; net_closesocket &rArr; net_mbedtls_stop &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_close
</UL>

<P><STRONG><a name="[976]"></a>tcpsocketconnection_connect</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128<LI>Call Chain = tcpsocketconnection_connect &rArr; net_connect &rArr; net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_aton_r
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[975]"></a>tcpsocketconnection_create</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcpsocketconnection_create &rArr; net_socket &rArr; find_free_socket &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[971]"></a>tcpsocketconnection_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcpsocketconnection_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[974]"></a>tcpsocketconnection_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = tcpsocketconnection_receive &rArr; net_recv &rArr; net_mbedtls_sock_recv &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[972]"></a>tcpsocketconnection_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3648<LI>Call Chain = tcpsocketconnection_send &rArr; net_send &rArr; net_mbedtls_sock_send &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[977]"></a>tcpsocketconnection_set_blocking</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tcpsocketconnection_c_stm32cube.o(i.tcpsocketconnection_set_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcpsocketconnection_set_blocking &rArr; net_setsockopt &rArr; net_if_find &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[4b7]"></a>tickcounter_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tickcounter_stm32cube.o(i.tickcounter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tickcounter_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[4cb]"></a>tickcounter_destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tickcounter_stm32cube.o(i.tickcounter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tickcounter_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_instance
</UL>

<P><STRONG><a name="[41a]"></a>tickcounter_get_current_ms</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tickcounter_stm32cube.o(i.tickcounter_get_current_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tickcounter_get_current_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_DoWork
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetTwinAsync
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
</UL>

<P><STRONG><a name="[424]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consolelogger_log
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_generate
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
</UL>

<P><STRONG><a name="[16c]"></a>tlsio_mbedtls_close</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = tlsio_mbedtls_close &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>tlsio_mbedtls_create</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = tlsio_mbedtls_create &rArr; mbedtls_init &rArr; mbedtls_ssl_set_session &rArr; ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_get_interface_description
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>tlsio_mbedtls_destroy</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = tlsio_mbedtls_destroy &rArr; mbedtls_uninit &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>tlsio_mbedtls_dowork</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 3696<LI>Call Chain = tlsio_mbedtls_dowork &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[91e]"></a>tlsio_mbedtls_get_interface_description</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_get_interface_description))
<BR><BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_default_tlsio
</UL>

<P><STRONG><a name="[16b]"></a>tlsio_mbedtls_open</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tlsio_mbedtls_open &rArr; mbedtls_ssl_session_reset &rArr; ssl_session_reset_int &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_open
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>tlsio_mbedtls_retrieveoptions</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tlsio_mbedtls_retrieveoptions &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>tlsio_mbedtls_send</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = tlsio_mbedtls_send &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>tlsio_mbedtls_setoption</STRONG> (Thumb, 668 bytes, Stack size 56 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_setoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = tlsio_mbedtls_setoption &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
<LI> tlsio_mbedtls.o(.constdata)
</UL>
<P><STRONG><a name="[655]"></a>traceIF_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, trace_interface.o(i.traceIF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = traceIF_Init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_init
</UL>

<P><STRONG><a name="[5d9]"></a>traceIF_itmPrint</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, trace_interface.o(i.traceIF_itmPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = traceIF_itmPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_sim_select
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
</UL>

<P><STRONG><a name="[5da]"></a>traceIF_uartPrint</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, trace_interface.o(i.traceIF_uartPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = traceIF_uartPrint &rArr; traceIF_uartTransmit &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_setup
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_sim_select
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_power_on
</UL>

<P><STRONG><a name="[925]"></a>updateTLSCredentials</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, iot_flash_config.o(i.updateTLSCredentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = updateTLSCredentials &rArr; CaptureAndFlashPem &rArr; enterPemString &rArr; getInputString &rArr; getc &rArr; fgetc &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureAndFlashPem
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTLSRootCA
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dialog_ask
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_needs_device_keypair
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[947]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[966]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationMallocFailedHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[99c]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[94c]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[955]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[949]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[948]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[94b]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[94d]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[13c]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_net_driver
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_if_deinit
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free_resource
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_create_socket_desc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mbedtls.o(i.net_mbedtls_start)
</UL>
<P><STRONG><a name="[9b1]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[99d]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[94f]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[95e]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[8fb]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[90b]"></a>vTaskDelete</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[9b6]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[963]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[9a1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[99f]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[9a2]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[8fc]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[95c]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[22f]"></a>vTaskSwitchContext</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[9a4]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[908]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[906]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[903]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[8fd]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[9b5]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[902]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[901]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[904]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[900]"></a>xQueueReceive</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[8ff]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[905]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[9b7]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[90a]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[907]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[95f]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[9b4]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[952]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[9b9]"></a>xTaskPriorityInherit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[962]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[95d]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[90c]"></a>xTimerCreate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>

<P><STRONG><a name="[9a3]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[90d]"></a>xTimerGenericCommand</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[663]"></a>xio_close</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xio.o(i.xio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xio_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_close
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete_error_and_close
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_close
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>

<P><STRONG><a name="[734]"></a>xio_create</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xio.o(i.xio_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xio_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_create
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_transport_io
</UL>

<P><STRONG><a name="[418]"></a>xio_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xio.o(i.xio_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xio_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_destroy
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_mqtt_data
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_transport
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_close
</UL>

<P><STRONG><a name="[664]"></a>xio_dowork</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xio.o(i.xio_dowork))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_dowork
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>

<P><STRONG><a name="[743]"></a>xio_open</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, xio.o(i.xio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xio_open
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_open
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
</UL>

<P><STRONG><a name="[413]"></a>xio_retrieveoptions</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, xio.o(i.xio_retrieveoptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_retrieve_options
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[744]"></a>xio_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xio.o(i.xio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xio_send
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_send
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_send
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
</UL>

<P><STRONG><a name="[159]"></a>xio_setoption</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, xio.o(i.xio_setoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xio_setoption &rArr; OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_xio_Certificate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_set_option
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_transport
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_option
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xio.o(i.xio_retrieveoptions)
</UL>
<P><STRONG><a name="[2bb]"></a>xlogging_get_log_function</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xlogging.o(i.xlogging_get_log_function))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dev_security_init
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_SetOption
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Register_Device
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_DoWork
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_EDM_BOOLEAN_from_int
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_common_name
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_certificate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_get_alias_key
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create_leaf_cert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_id_public
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_alias_key_pair
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootWRAPPER
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_retrieveoptions
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_open
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_close
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_DestroyOption
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_CloneOption
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_close_complete_during_close
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_uninit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetInputName
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetRetryPolicy
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetOption
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetMessageCallback
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetDeviceTwinCallback
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetDeviceMethodCallback
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendReportedState
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DoWork
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_message_callback
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendComplete
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_RetrievePropertyComplete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_ReportedStateComplete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_MessageCallbackFromInput
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_MessageCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_GetProductInfo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DeviceMethodComplete
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_ConnectionStatusCallBack
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_get_type
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_create
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_xio_Certificate
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_SasToken_Expiry
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken_Expiry
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_DeviceKey
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_auth_client
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_DestroyOption
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_CloneOption
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base32_Encode_Bytes
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base32_encode_impl
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionInternal
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_close_complete
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_set_option
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_send
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_retrieve_options
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_dowork
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_destroy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_create
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_close
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_GetContent
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_DecRef
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_url_data
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDecodedStringSize
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_foreach
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_find
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetInputName
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionModuleId
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionDeviceId
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetOutputName
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetMessageId
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetDiagnosticPropertyData
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetCorrelationId
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentTypeSystemProperty
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentEncodingSystemProperty
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloneDiagnosticPropertyData
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_reset
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_retry_action
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_next_wait_time
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create_in_place
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHub_Transport_ValidateCallbacks
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_SetCallbackContext
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_InputQueue
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetTwinAsync
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToNotifyStateIfNeeded
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPendingGetTwinRequests
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_twin_get_message
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertyToTopicString
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeMethod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInvokeAction
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyCount
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyByIndex
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyType
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyName
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentCount
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentByIndex
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentType
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentName
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentType
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentName
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_offset
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddDeviceRef
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_to_topic
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register_message
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_operation_status_message
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mqtt_message
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_transport_io_object
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_username
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_transport
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_x509_cert
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_trusted_cert
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_trace
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_proxy
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_option
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_register_device
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_open
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_get_operation_status
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_create
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_close
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_transport_io
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_json_item
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_challenge_callback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_transport_status
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_transport_registration_data
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_set_registration_id
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_import_key
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_type
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_storage_key
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_registration_id
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_endorsement_key
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_certificate
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_alias_key
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_create
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_registration_id
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_value
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_hsm_system
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_security_init
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_sas_data
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg_object
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsRetained
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsDuplicateMsg
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getQosType
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getPacketId
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsRetained
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsDuplicateMsg
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onIoError
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readByte
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[732]"></a>generate_root_ca_info</STRONG> (Thumb, 456 bytes, Stack size 1056 bytes, hsm_client_riot_stm32cube.o(i.generate_root_ca_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 2372<LI>Call Chain = generate_root_ca_info &rArr; RiotCrypt_Sign &rArr; RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeRootCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Sign
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERInitContext
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[740]"></a>process_riot_key_info</STRONG> (Thumb, 854 bytes, Stack size 1024 bytes, hsm_client_riot_stm32cube.o(i.process_riot_key_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 3396<LI>Call Chain = process_riot_key_info &rArr; generate_root_ca_info &rArr; RiotCrypt_Sign &rArr; RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeAliasCert
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Sign
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash2
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Hash
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_DeriveEccKey
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERInitContext
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_id_public
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_device_cert
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;produce_alias_key_pair
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_root_ca_info
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsm_client_riot_create
</UL>

<P><STRONG><a name="[92f]"></a>produce_alias_key_pair</STRONG> (Thumb, 172 bytes, Stack size 960 bytes, hsm_client_riot_stm32cube.o(i.produce_alias_key_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = produce_alias_key_pair &rArr; X509GetDEREcc &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREcc
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERInitContext
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[930]"></a>produce_device_cert</STRONG> (Thumb, 562 bytes, Stack size 904 bytes, hsm_client_riot_stm32cube.o(i.produce_device_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 2220<LI>Call Chain = produce_device_cert &rArr; RiotCrypt_Sign &rArr; RIOT_DSASignDigest &rArr; ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509MakeDeviceCert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsr
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RiotCrypt_Sign
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERInitContext
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[92e]"></a>produce_device_id_public</STRONG> (Thumb, 158 bytes, Stack size 928 bytes, hsm_client_riot_stm32cube.o(i.produce_device_id_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = produce_device_id_public &rArr; X509GetDEREccPub &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDEREccPub
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERtoPEM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERInitContext
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_riot_key_info
</UL>

<P><STRONG><a name="[621]"></a>add_pending_io</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, socketio_mbed.o(i.add_pending_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = add_pending_io &rArr; singlylinkedlist_add &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
</UL>

<P><STRONG><a name="[973]"></a>indicate_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, socketio_mbed.o(i.indicate_error))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[14e]"></a>socketio_CloneOption</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, socketio_mbed.o(i.socketio_CloneOption))
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(i.socketio_retrieveoptions)
</UL>
<P><STRONG><a name="[14d]"></a>socketio_DestroyOption</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, socketio_mbed.o(i.socketio_DestroyOption))
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(i.socketio_retrieveoptions)
</UL>
<P><STRONG><a name="[161]"></a>socketio_retrieveoptions</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, socketio_mbed.o(i.socketio_retrieveoptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = socketio_retrieveoptions &rArr; OptionHandler_Create &rArr; CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_mbed.o(.constdata)
</UL>
<P><STRONG><a name="[8f5]"></a>indicate_error</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tlsio_mbedtls.o(i.indicate_error))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
</UL>

<P><STRONG><a name="[8f7]"></a>indicate_open_complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tlsio_mbedtls.o(i.indicate_open_complete))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
</UL>

<P><STRONG><a name="[7b6]"></a>mbedtls_init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tlsio_mbedtls.o(i.mbedtls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = mbedtls_init &rArr; mbedtls_ssl_set_session &rArr; ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_min_version
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
</UL>

<P><STRONG><a name="[7b7]"></a>mbedtls_uninit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tlsio_mbedtls.o(i.mbedtls_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = mbedtls_uninit &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[117]"></a>on_io_recv</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, tlsio_mbedtls.o(i.on_io_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_io_recv &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[118]"></a>on_io_send</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tlsio_mbedtls.o(i.on_io_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_io_send &rArr; xio_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[152]"></a>on_underlying_io_bytes_received</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tlsio_mbedtls.o(i.on_underlying_io_bytes_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_underlying_io_bytes_received &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[150]"></a>on_underlying_io_close_complete_during_close</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tlsio_mbedtls.o(i.on_underlying_io_close_complete_during_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_underlying_io_close_complete_during_close
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.tlsio_mbedtls_close)
</UL>
<P><STRONG><a name="[151]"></a>on_underlying_io_error</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tlsio_mbedtls.o(i.on_underlying_io_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_underlying_io_error &rArr; xio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[153]"></a>on_underlying_io_open_complete</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tlsio_mbedtls.o(i.on_underlying_io_open_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 3544<LI>Call Chain = on_underlying_io_open_complete &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[156]"></a>tlsio_mbedtls_CloneOption</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_CloneOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tlsio_mbedtls_CloneOption &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
</UL>
<P><STRONG><a name="[155]"></a>tlsio_mbedtls_DestroyOption</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, tlsio_mbedtls.o(i.tlsio_mbedtls_DestroyOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tlsio_mbedtls_DestroyOption &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls.o(i.tlsio_mbedtls_retrieveoptions)
</UL>
<P><STRONG><a name="[59d]"></a>SHA1Finalize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, azure_sha1.o(i.SHA1Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
</UL>

<P><STRONG><a name="[59e]"></a>SHA1PadMessage</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, azure_sha1.o(i.SHA1PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>

<P><STRONG><a name="[5a0]"></a>SHA1ProcessMessageBlock</STRONG> (Thumb, 370 bytes, Stack size 380 bytes, azure_sha1.o(i.SHA1ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>

<P><STRONG><a name="[172]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tHumidity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tHumidity &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tLedStatusOn &rArr; Create_EDM_BOOLEAN_from_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_EDM_BOOLEAN_from_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tPressure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tPressure &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTelemetryInterval &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTemperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tTemperature &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccX &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccY &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_taccZ &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdevContext &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdeviceId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tdeviceId &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrX &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrY &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tgyrZ &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmac &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagX &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagY &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tmagZ &rArr; Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tproximity &rArr; Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts</STRONG> (Thumb, 34 bytes, Stack size 72 bytes, azurexcubesample.o(i.Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_SerializableIotSampleDev_tts &rArr; Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>DPSRegistrationStatusCallBack</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, azurexcubesample.o(i.DPSRegistrationStatusCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DPSRegistrationStatusCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROV_DEVICE_REG_STATUSStrings
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.cloud_run)
</UL>
<P><STRONG><a name="[184]"></a>DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, azurexcubesample.o(i.DesiredPropertyDeinitialize_SerializableIotSampleDev_tDesiredTelemetryInterval))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, azurexcubesample.o(i.DesiredPropertyInitialize_SerializableIotSampleDev_tDesiredTelemetryInterval))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>DeviceMethodCallback</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, azurexcubesample.o(i.DeviceMethodCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = DeviceMethodCallback &rArr; CodeFirst_ExecuteMethod &rArr; Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_GetReturn
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.setAllCallbacks)
</UL>
<P><STRONG><a name="[14b]"></a>DeviceTwinCallback</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, azurexcubesample.o(i.DeviceTwinCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = DeviceTwinCallback &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.setAllCallbacks)
</UL>
<P><STRONG><a name="[438]"></a>FromAGENT_DATA_TYPE_ascii_char_ptr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, azurexcubesample.o(i.FromAGENT_DATA_TYPE_ascii_char_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FromAGENT_DATA_TYPE_ascii_char_ptr &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelloWRAPPER
</UL>

<P><STRONG><a name="[185]"></a>FromAGENT_DATA_TYPE_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, azurexcubesample.o(i.FromAGENT_DATA_TYPE_int))
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>HelloWRAPPER</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, azurexcubesample.o(i.HelloWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HelloWRAPPER &rArr; Hello &rArr; MethodReturn_Create &rArr; is_json_present_and_unparsable &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hello
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromAGENT_DATA_TYPE_ascii_char_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>IOTHubDPSRegisterDeviceCallBack</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, azurexcubesample.o(i.IOTHubDPSRegisterDeviceCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IOTHubDPSRegisterDeviceCallBack &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.cloud_run)
</UL>
<P><STRONG><a name="[182]"></a>LedToggleWRAPPER</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azurexcubesample.o(i.LedToggleWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LedToggleWRAPPER &rArr; LedToggle &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>MessageCallback</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, azurexcubesample.o(i.MessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = MessageCallback &rArr; CodeFirst_ExecuteCommand &rArr; Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.setAllCallbacks)
</UL>
<P><STRONG><a name="[180]"></a>RebootWRAPPER</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, azurexcubesample.o(i.RebootWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RebootWRAPPER &rArr; Reboot &rArr; MethodReturn_Create &rArr; is_json_present_and_unparsable &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>SendConfirmationCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, azurexcubesample.o(i.SendConfirmationCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SendConfirmationCallback &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_CONFIRMATION_RESULTStrings
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azurexcubesample.o(i.cloud_run)
</UL>
<P><STRONG><a name="[672]"></a>directIoTHubRegistration</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, azurexcubesample.o(i.directIoTHubRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = directIoTHubRegistration &rArr; IoTHubClient_LL_CreateFromConnectionString &rArr; IoTHubClientCore_LL_CreateFromConnectionString &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[66a]"></a>printDeviceRegistrationMethod</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, azurexcubesample.o(i.printDeviceRegistrationMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printDeviceRegistrationMethod &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[671]"></a>registerIoTHubFromDPS</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, azurexcubesample.o(i.registerIoTHubFromDPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = registerIoTHubFromDPS &rArr; IoTHubClient_LL_CreateFromDeviceAuth &rArr; IoTHubClientCore_LL_CreateFromDeviceAuth &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromDeviceAuth
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[673]"></a>setAllCallbacks</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, azurexcubesample.o(i.setAllCallbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setAllCallbacks &rArr; IoTHubClient_LL_SetDeviceMethodCallback &rArr; IoTHubClientCore_LL_SetDeviceMethodCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetMessageCallback
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceTwinCallback
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceMethodCallback
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[670]"></a>setDPSconnectionInfo</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, azurexcubesample.o(i.setDPSconnectionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setDPSconnectionInfo &rArr; calloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
</UL>

<P><STRONG><a name="[668]"></a>setDeviceRegistrationMethod</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, azurexcubesample.o(i.setDeviceRegistrationMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setDeviceRegistrationMethod &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_run
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_device_enter_credentials
</UL>

<P><STRONG><a name="[547]"></a>MX_ADC1_Init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[548]"></a>MX_GPIO_Init</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddIO2
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>MainThread</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i.MainThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = MainThread &rArr; platform_init &rArr; setRTCTimeDateFromNetwork &rArr; net_connect &rArr; net_mbedtls_start &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5dd]"></a>SystemClock_Config</STRONG> (Thumb, 156 bytes, Stack size 248 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[430]"></a>FLASH_get_bank</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, flash_l4.o(i.FLASH_get_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_get_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[431]"></a>FLASH_get_pageInBank</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, flash_l4.o(i.FLASH_get_pageInBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_get_pageInBank
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[42f]"></a>FLASH_unlock_erase</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, flash_l4.o(i.FLASH_unlock_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_get_pageInBank
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_get_bank
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[434]"></a>FLASH_write_at</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, flash_l4.o(i.FLASH_write_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[18a]"></a>hnet_notify</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cloud.o(i.hnet_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hnet_notify &rArr; net_ntoa &rArr; net_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud.o(.constdata)
</UL>
<P><STRONG><a name="[466]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[44e]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[44f]"></a>FLASH_Program_Fast</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[44b]"></a>FLASH_MassErase</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[4a7]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[4a6]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[458]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[45c]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[459]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[456]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[45a]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[45d]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[46d]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[468]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[469]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ca]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[48b]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; IPC_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[cb]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; IPC_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[ce]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[cd]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[443]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[267]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[266]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[448]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_REG_IsTriggerSourceSWStart))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[442]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[444]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[440]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc_ex.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
</UL>

<P><STRONG><a name="[6d0]"></a>display_if_active_band</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_custom_modem_specific_bg96.o(i.display_if_active_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_if_active_band
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_user_friendly_mode_and_bands_config
</UL>

<P><STRONG><a name="[292]"></a>display_user_friendly_mode_and_bands_config</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, at_custom_modem_specific_bg96.o(i.display_user_friendly_mode_and_bands_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = display_user_friendly_mode_and_bands_config &rArr; display_if_active_band
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_if_active_band
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCustom_BG96_get_rsp
</UL>

<P><STRONG><a name="[5d7]"></a>SysCtrl_BG96_setup</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, sysctrl_specific_bg96.o(i.SysCtrl_BG96_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SysCtrl_BG96_setup &rArr; traceIF_uartPrint &rArr; traceIF_uartTransmit &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartPrint
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_itmPrint
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crs_strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_BG96_getDeviceDescriptor
</UL>

<P><STRONG><a name="[4a0]"></a>I2C2_MspDeInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l496g_discovery.o(i.I2C2_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DeInit
</UL>

<P><STRONG><a name="[4a2]"></a>I2C2_MspInit</STRONG> (Thumb, 166 bytes, Stack size 176 bytes, stm32l496g_discovery.o(i.I2C2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[4a4]"></a>I2C2_ReadBuffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stm32l496g_discovery.o(i.I2C2_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C2_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_ReadMultiple
</UL>

<P><STRONG><a name="[4a5]"></a>I2C2_ReadData</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32l496g_discovery.o(i.I2C2_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>

<P><STRONG><a name="[8a5]"></a>mfxstm32l152_GetInstance</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mfxstm32l152.o(i.mfxstm32l152_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_WakeUp
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_Init
</UL>

<P><STRONG><a name="[8a0]"></a>mfxstm32l152_reg24_setPinValue</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, mfxstm32l152.o(i.mfxstm32l152_reg24_setPinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mfxstm32l152_reg24_setPinValue &rArr; MFX_IO_Read &rArr; I2C2_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Write
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFX_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_WritePin
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqTypeMode
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_SetIrqEvtMode
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_InitPin
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_EnablePinIT
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_DisablePinIT
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfxstm32l152_IO_Config
</UL>

<P><STRONG><a name="[2da]"></a>Base64_Encode_Internal</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, azure_base64.o(i.Base64_Encode_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64char
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode_Bytes
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode
</UL>

<P><STRONG><a name="[2d6]"></a>Base64decode</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, azure_base64.o(i.Base64decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Base64decode
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
</UL>

<P><STRONG><a name="[2f9]"></a>base64char</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, azure_base64.o(i.base64char))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>

<P><STRONG><a name="[2fb]"></a>base64toValue</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, azure_base64.o(i.base64toValue))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
</UL>

<P><STRONG><a name="[2f6]"></a>base32_encode_impl</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, base32.o(i.base32_encode_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = base32_encode_impl &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base32_Encode_Bytes
</UL>

<P><STRONG><a name="[2f0]"></a>BUFFER_safemalloc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, buffer.o(i.BUFFER_safemalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BUFFER_safemalloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
</UL>

<P><STRONG><a name="[313]"></a>CONSTBUFFER_Create_Internal</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, constbuffer.o(i.CONSTBUFFER_Create_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CONSTBUFFER_Create_Internal &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create
</UL>

<P><STRONG><a name="[561]"></a>ParseHttpResponse</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, http_proxy_io.o(i.ParseHttpResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ParseHttpResponse &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
</UL>

<P><STRONG><a name="[1da]"></a>http_proxy_io_close</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, http_proxy_io.o(i.http_proxy_io_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_proxy_io_close &rArr; xio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>http_proxy_io_create</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, http_proxy_io.o(i.http_proxy_io_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = http_proxy_io_create &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_get_interface_description
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>http_proxy_io_destroy</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, http_proxy_io.o(i.http_proxy_io_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = http_proxy_io_destroy &rArr; xio_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>http_proxy_io_dowork</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, http_proxy_io.o(i.http_proxy_io_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = http_proxy_io_dowork
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>http_proxy_io_open</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, http_proxy_io.o(i.http_proxy_io_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = http_proxy_io_open &rArr; xio_open
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>http_proxy_io_retrieve_options</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, http_proxy_io.o(i.http_proxy_io_retrieve_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = http_proxy_io_retrieve_options &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>http_proxy_io_send</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, http_proxy_io.o(i.http_proxy_io_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = http_proxy_io_send &rArr; xio_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>http_proxy_io_set_option</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, http_proxy_io.o(i.http_proxy_io_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = http_proxy_io_set_option &rArr; xio_setoption &rArr; OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(.constdata)
</UL>
<P><STRONG><a name="[745]"></a>indicate_open_complete_error_and_close</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, http_proxy_io.o(i.indicate_open_complete_error_and_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = indicate_open_complete_error_and_close &rArr; xio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
</UL>

<P><STRONG><a name="[109]"></a>on_underlying_io_bytes_received</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, http_proxy_io.o(i.on_underlying_io_bytes_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_underlying_io_bytes_received &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete_error_and_close
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseHttpResponse
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(i.http_proxy_io_open)
</UL>
<P><STRONG><a name="[107]"></a>on_underlying_io_close_complete</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, http_proxy_io.o(i.on_underlying_io_close_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_underlying_io_close_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(i.http_proxy_io_close)
</UL>
<P><STRONG><a name="[108]"></a>on_underlying_io_error</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, http_proxy_io.o(i.on_underlying_io_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_underlying_io_error &rArr; indicate_open_complete_error_and_close &rArr; xio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete_error_and_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(i.http_proxy_io_open)
</UL>
<P><STRONG><a name="[10a]"></a>on_underlying_io_open_complete</STRONG> (Thumb, 630 bytes, Stack size 120 bytes, http_proxy_io.o(i.on_underlying_io_open_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = on_underlying_io_open_complete &rArr; Azure_Base64_Encode_Bytes &rArr; Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode_Bytes
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete_error_and_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(i.http_proxy_io_open)
</UL>
<P><STRONG><a name="[142]"></a>unchecked_on_send_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, http_proxy_io.o(i.unchecked_on_send_complete))
<BR>[Address Reference Count : 1]<UL><LI> http_proxy_io.o(i.on_underlying_io_open_complete)
</UL>
<P><STRONG><a name="[552]"></a>Map_CloneVector</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, map.o(i.Map_CloneVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
</UL>

<P><STRONG><a name="[553]"></a>Map_DecreaseStorageKeysValues</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, map.o(i.Map_DecreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Map_DecreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[555]"></a>Map_IncreaseStorageKeysValues</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, map.o(i.Map_IncreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[550]"></a>findKey</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, map.o(i.findKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = findKey &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[551]"></a>insertNewKeyValue</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, map.o(i.insertNewKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[2c0]"></a>AddOptionInternal</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, optionhandler.o(i.AddOptionInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_AddOption
</UL>

<P><STRONG><a name="[3ad]"></a>CreateInternal</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, optionhandler.o(i.CreateInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
</UL>

<P><STRONG><a name="[402]"></a>DestroyInternal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, optionhandler.o(i.DestroyInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DestroyInternal &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
</UL>

<P><STRONG><a name="[59a]"></a>construct_sas_token</STRONG> (Thumb, 450 bytes, Stack size 104 bytes, sastoken.o(i.construct_sas_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Encode
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_tToString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
</UL>

<P><STRONG><a name="[5a8]"></a>SHA224_256Finalize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sha224.o(i.SHA224_256Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>

<P><STRONG><a name="[5a9]"></a>SHA224_256PadMessage</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sha224.o(i.SHA224_256PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>

<P><STRONG><a name="[5aa]"></a>SHA224_256ProcessMessageBlock</STRONG> (Thumb, 302 bytes, Stack size 324 bytes, sha224.o(i.SHA224_256ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>

<P><STRONG><a name="[5a5]"></a>SHA224_256Reset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sha224.o(i.SHA224_256Reset))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
</UL>

<P><STRONG><a name="[5a7]"></a>SHA224_256ResultN</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sha224.o(i.SHA224_256ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
</UL>

<P><STRONG><a name="[5b3]"></a>SHA384_512Finalize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sha384-512.o(i.SHA384_512Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>

<P><STRONG><a name="[5b4]"></a>SHA384_512PadMessage</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
</UL>

<P><STRONG><a name="[5b5]"></a>SHA384_512ProcessMessageBlock</STRONG> (Thumb, 766 bytes, Stack size 832 bytes, sha384-512.o(i.SHA384_512ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>

<P><STRONG><a name="[5b0]"></a>SHA384_512Reset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
</UL>

<P><STRONG><a name="[5b2]"></a>SHA384_512ResultN</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sha384-512.o(i.SHA384_512ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
</UL>

<P><STRONG><a name="[715]"></a>URL_PrintableChar</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, urlencode.o(i.URL_PrintableChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URL_PrintableChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_url_data
</UL>

<P><STRONG><a name="[5e2]"></a>calculateDecodedStringSize</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, urlencode.o(i.calculateDecodedStringSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calculateDecodedStringSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
</UL>

<P><STRONG><a name="[5e3]"></a>createDecodedString</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, urlencode.o(i.createDecodedString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = createDecodedString
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Decode
</UL>

<P><STRONG><a name="[5e6]"></a>encode_url_data</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, urlencode.o(i.encode_url_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = encode_url_data &rArr; STRING_new_with_memory &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_PrintableChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
</UL>

<P><STRONG><a name="[15b]"></a>xio_CloneOption</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, xio.o(i.xio_CloneOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xio_CloneOption &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xio.o(i.xio_retrieveoptions)
</UL>
<P><STRONG><a name="[15a]"></a>xio_DestroyOption</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, xio.o(i.xio_DestroyOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xio_DestroyOption &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xio.o(i.xio_retrieveoptions)
</UL>
<P><STRONG><a name="[4e8]"></a>get_seconds_since_epoch</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iothub_client_authorization.o(i.get_seconds_since_epoch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_seconds_since_epoch &rArr; get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
</UL>

<P><STRONG><a name="[4e1]"></a>initialize_auth_client</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.initialize_auth_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = initialize_auth_client &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
</UL>

<P><STRONG><a name="[419]"></a>DoTimeouts</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, iothub_client_core_ll.o(i.DoTimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DoWork
</UL>

<P><STRONG><a name="[10e]"></a>IoTHubClientCore_LL_ConnectionStatusCallBack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_ConnectionStatusCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubClientCore_LL_ConnectionStatusCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[112]"></a>IoTHubClientCore_LL_DeviceMethodComplete</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_DeviceMethodComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubClientCore_LL_DeviceMethodComplete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[10f]"></a>IoTHubClientCore_LL_GetProductInfo</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_GetProductInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IoTHubClientCore_LL_GetProductInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[111]"></a>IoTHubClientCore_LL_MessageCallback</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_MessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubClientCore_LL_MessageCallback &rArr; invoke_message_callback &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_message_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[110]"></a>IoTHubClientCore_LL_MessageCallbackFromInput</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_MessageCallbackFromInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubClientCore_LL_MessageCallbackFromInput &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetInputName
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_find
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[10d]"></a>IoTHubClientCore_LL_ReportedStateComplete</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_ReportedStateComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubClientCore_LL_ReportedStateComplete &rArr; device_twin_data_destroy &rArr; CONSTBUFFER_DecRef &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[10c]"></a>IoTHubClientCore_LL_RetrievePropertyComplete</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_RetrievePropertyComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClientCore_LL_RetrievePropertyComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[10b]"></a>IoTHubClientCore_LL_SendComplete</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, iothub_client_core_ll.o(i.IoTHubClientCore_LL_SendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubClientCore_LL_SendComplete &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.initialize_iothub_client)
</UL>
<P><STRONG><a name="[4d4]"></a>attach_ms_timesOutAfter</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, iothub_client_core_ll.o(i.attach_ms_timesOutAfter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attach_ms_timesOutAfter &rArr; tickcounter_get_current_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendEventAsync
</UL>

<P><STRONG><a name="[6c5]"></a>delete_event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iothub_client_core_ll.o(i.delete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = delete_event &rArr; STRING_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_event_callback
</UL>

<P><STRONG><a name="[105]"></a>delete_event_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iothub_client_core_ll.o(i.delete_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = delete_event_callback &rArr; delete_event &rArr; STRING_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.delete_event_callback_list)
</UL>
<P><STRONG><a name="[4c9]"></a>delete_event_callback_list</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iothub_client_core_ll.o(i.delete_event_callback_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = delete_event_callback_list &rArr; singlylinkedlist_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
</UL>

<P><STRONG><a name="[4d8]"></a>dev_twin_data_create</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, iothub_client_core_ll.o(i.dev_twin_data_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dev_twin_data_create &rArr; CONSTBUFFER_Create &rArr; CONSTBUFFER_Create_Internal &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendReportedState
</UL>

<P><STRONG><a name="[4c8]"></a>device_twin_data_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iothub_client_core_ll.o(i.device_twin_data_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = device_twin_data_destroy &rArr; CONSTBUFFER_DecRef &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_DecRef
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SendReportedState
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_DoWork
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_Destroy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_ReportedStateComplete
</UL>

<P><STRONG><a name="[4c4]"></a>initialize_iothub_client</STRONG> (Thumb, 1512 bytes, Stack size 128 bytes, iothub_client_core_ll.o(i.initialize_iothub_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetRetryPolicy
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTransportProtocol
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_CreateFromDeviceAuth
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromDeviceAuth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[4ce]"></a>invoke_message_callback</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, iothub_client_core_ll.o(i.invoke_message_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = invoke_message_callback &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_MessageCallback
</UL>

<P><STRONG><a name="[d3]"></a>is_event_equal_for_match</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, iothub_client_core_ll.o(i.is_event_equal_for_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_event_equal_for_match &rArr; singlylinkedlist_item_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_client_core_ll.o(i.IoTHubClientCore_LL_MessageCallbackFromInput)
</UL>
<P><STRONG><a name="[4dd]"></a>make_product_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iothub_client_core_ll.o(i.make_product_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_platform_info
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClientCore_LL_SetOption
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[748]"></a>setTransportProtocol</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, iothub_client_core_ll.o(i.setTransportProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[92c]"></a>get_base36_char</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iothub_client_diagnostic.o(i.get_base36_char))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
</UL>

<P><STRONG><a name="[737]"></a>get_epoch_time</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, iothub_client_diagnostic.o(i.get_epoch_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_epoch_time &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_message_diagnostic_data
</UL>

<P><STRONG><a name="[4ee]"></a>prepare_message_diagnostic_data</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, iothub_client_diagnostic.o(i.prepare_message_diagnostic_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prepare_message_diagnostic_data &rArr; get_epoch_time &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_epoch_time
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_base36_char
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
</UL>

<P><STRONG><a name="[4ed]"></a>should_add_diagnostic_info</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, iothub_client_diagnostic.o(i.should_add_diagnostic_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = should_add_diagnostic_info &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Diagnostic_AddIfNecessary
</UL>

<P><STRONG><a name="[64f]"></a>calculate_next_wait_time</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, iothub_client_retry_control.o(i.calculate_next_wait_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = calculate_next_wait_time &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
</UL>

<P><STRONG><a name="[717]"></a>evaluate_retry_action</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, iothub_client_retry_control.o(i.evaluate_retry_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = evaluate_retry_action &rArr; get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
</UL>

<P><STRONG><a name="[367]"></a>CloneDiagnosticPropertyData</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, iothub_message.o(i.CloneDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CloneDiagnosticPropertyData &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[5eb]"></a>ContainsOnlyUsAscii</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iothub_message.o(i.ContainsOnlyUsAscii))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateAsciiCharactersFilter
</UL>

<P><STRONG><a name="[401]"></a>DestroyDiagnosticPropertyData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iothub_message.o(i.DestroyDiagnosticPropertyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DestroyDiagnosticPropertyData &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetDiagnosticPropertyData
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMessageData
</UL>

<P><STRONG><a name="[403]"></a>DestroyMessageData</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, iothub_message.o(i.DestroyMessageData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDiagnosticPropertyData
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[d4]"></a>ValidateAsciiCharactersFilter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iothub_message.o(i.ValidateAsciiCharactersFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValidateAsciiCharactersFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsOnlyUsAscii
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
</UL>
<P><STRONG><a name="[412]"></a>DisconnectFromClient</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.DisconnectFromClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[43b]"></a>GetTransportProviderIfNecessary</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.GetTransportProviderIfNecessary))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = GetTransportProviderIfNecessary &rArr; IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_xio_Certificate
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[4b1]"></a>InitializeConnection</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.InitializeConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = InitializeConnection &rArr; SendMqttConnectMsg &rArr; GetTransportProviderIfNecessary &rArr; IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_retrieveoptions
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken_Expiry
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_should_retry
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[4b6]"></a>InitializeTransportHandleData</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.InitializeTransportHandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = InitializeTransportHandleData &rArr; buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_create
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildConfigForUsername
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
</UL>

<P><STRONG><a name="[8bc]"></a>InternStrnicmp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.InternStrnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InternStrnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[528]"></a>RetrieveMessagePayload</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.RetrieveMessagePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RetrieveMessagePayload &rArr; IoTHubMessage_GetByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentType
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
</UL>

<P><STRONG><a name="[4b3]"></a>SendMqttConnectMsg</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, iothubtransport_mqtt_common.o(i.SendMqttConnectMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = SendMqttConnectMsg &rArr; GetTransportProviderIfNecessary &rArr; IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[525]"></a>SubscribeToMqttProtocol</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, iothubtransport_mqtt_common.o(i.SubscribeToMqttProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = SubscribeToMqttProtocol &rArr; mqtt_client_subscribe &rArr; mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[618]"></a>addDiagnosticPropertiesTouMqttMessage</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.addDiagnosticPropertiesTouMqttMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = addDiagnosticPropertiesTouMqttMessage &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetDiagnosticPropertyData
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[619]"></a>addInputNamePropertyToMessage</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.addInputNamePropertyToMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = addInputNamePropertyToMessage &rArr; STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetInputName
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[61d]"></a>addPropertiesTouMqttMessage</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.addPropertiesTouMqttMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = addPropertiesTouMqttMessage &rArr; addSystemPropertiesTouMqttMessage &rArr; addSystemPropertyToTopicString &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetOutputName
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUserPropertiesTouMqttMessage
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertiesTouMqttMessage
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDiagnosticPropertiesTouMqttMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
</UL>

<P><STRONG><a name="[61f]"></a>addSystemPropertiesTouMqttMessage</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.addSystemPropertiesTouMqttMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = addSystemPropertiesTouMqttMessage &rArr; addSystemPropertyToTopicString &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetMessageId
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetCorrelationId
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentTypeSystemProperty
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentEncodingSystemProperty
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertyToTopicString
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[620]"></a>addSystemPropertyToTopicString</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.addSystemPropertyToTopicString))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = addSystemPropertyToTopicString &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSystemPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[61e]"></a>addUserPropertiesTouMqttMessage</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, iothubtransport_mqtt_common.o(i.addUserPropertiesTouMqttMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = addUserPropertiesTouMqttMessage &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[4bc]"></a>buildConfigForUsername</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.buildConfigForUsername))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[532]"></a>changeStateToSubscribeIfAllowed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.changeStateToSubscribeIfAllowed))
<BR><BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_InputQueue
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToNotifyStateIfNeeded
</UL>

<P><STRONG><a name="[526]"></a>create_device_twin_get_message</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.create_device_twin_get_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_device_twin_get_message &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetTwinAsync
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[718]"></a>extractMqttProperties</STRONG> (Thumb, 896 bytes, Stack size 72 bytes, iothubtransport_mqtt_common.o(i.extractMqttProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = extractMqttProperties &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_DecodeString
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMqttMessagePropertyIfPossible
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[52f]"></a>free_proxy_data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.free_proxy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = free_proxy_data &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
</UL>

<P><STRONG><a name="[4bf]"></a>free_transport_handle_data</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.free_transport_handle_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = free_transport_handle_data &rArr; set_saved_tls_options &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_destroy
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_saved_tls_options
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[529]"></a>get_next_packet_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.get_next_packet_id))
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_twin_get_message
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
</UL>

<P><STRONG><a name="[c9]"></a>mqtt_disconnect_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.mqtt_disconnect_cb))
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.DisconnectFromClient)
</UL>
<P><STRONG><a name="[d0]"></a>mqtt_error_callback</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.mqtt_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mqtt_error_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_CLIENT_EVENT_ERRORStrings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[d2]"></a>mqtt_notification_callback</STRONG> (Thumb, 748 bytes, Stack size 72 bytes, iothubtransport_mqtt_common.o(i.mqtt_notification_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mqtt_notification_callback &rArr; extractMqttProperties &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeToNotifyStateIfNeeded
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInputNamePropertyToMessage
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternStrnicmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[d1]"></a>mqtt_operation_complete_callback</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.mqtt_operation_complete_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mqtt_operation_complete_callback &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_control_reset
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_mqtt_return_codes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[8bd]"></a>parse_device_twin_topic_info</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.parse_device_twin_topic_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = parse_device_twin_topic_info &rArr; STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[52c]"></a>process_queued_ack_messages</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.process_queued_ack_messages))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = process_queued_ack_messages &rArr; publish_mqtt_telemetry_msg &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[524]"></a>publish_device_method_message</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.publish_device_method_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create_in_place
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
</UL>

<P><STRONG><a name="[527]"></a>publish_device_twin_get_message</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.publish_device_twin_get_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = publish_device_twin_get_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPendingGetTwinRequests
</UL>

<P><STRONG><a name="[52d]"></a>publish_device_twin_message</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.publish_device_twin_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_GetContent
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create_in_place
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
</UL>

<P><STRONG><a name="[52a]"></a>publish_mqtt_telemetry_msg</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.publish_mqtt_telemetry_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = publish_mqtt_telemetry_msg &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create_in_place
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
</UL>

<P><STRONG><a name="[8be]"></a>retrieve_device_method_rid_info</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, iothubtransport_mqtt_common.o(i.retrieve_device_method_rid_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = retrieve_device_method_rid_info &rArr; STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[8c1]"></a>retrieve_mqtt_return_codes</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.retrieve_mqtt_return_codes))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[522]"></a>sendMsgComplete</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.sendMsgComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendMsgComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_queued_ack_messages
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[52b]"></a>sendPendingGetTwinRequests</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.sendPendingGetTwinRequests))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = sendPendingGetTwinRequests &rArr; publish_device_twin_get_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[719]"></a>setMqttMessagePropertyIfPossible</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.setMqttMessagePropertyIfPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = setMqttMessagePropertyIfPossible &rArr; IoTHubMessage_SetContentTypeSystemProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentTypeSystemProperty
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetContentEncodingSystemProperty
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionModuleId
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetConnectionDeviceId
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[414]"></a>set_saved_tls_options</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.set_saved_tls_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_saved_tls_options &rArr; OptionHandler_Destroy &rArr; DestroyInternal &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_transport_handle_data
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[8bf]"></a>subscribeToNotifyStateIfNeeded</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.subscribeToNotifyStateIfNeeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = subscribeToNotifyStateIfNeeded &rArr; STRING_construct &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeStateToSubscribeIfAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[2d]"></a>IoTHubTransportMqtt_Create</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = IoTHubTransportMqtt_Create &rArr; IoTHubTransport_MQTT_Common_Create &rArr; InitializeTransportHandleData &rArr; buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>IoTHubTransportMqtt_Destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = IoTHubTransportMqtt_Destroy &rArr; IoTHubTransport_MQTT_Common_Destroy &rArr; DisconnectFromClient &rArr; xio_retrieveoptions &rArr; OptionHandler_AddOption &rArr; AddOptionInternal &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>IoTHubTransportMqtt_DeviceMethod_Response</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_DeviceMethod_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = IoTHubTransportMqtt_DeviceMethod_Response &rArr; IoTHubTransport_MQTT_Common_DeviceMethod_Response &rArr; publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>IoTHubTransportMqtt_DoWork</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = IoTHubTransportMqtt_DoWork &rArr; IoTHubTransport_MQTT_Common_DoWork &rArr; InitializeConnection &rArr; SendMqttConnectMsg &rArr; GetTransportProviderIfNecessary &rArr; IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>IoTHubTransportMqtt_GetHostname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubTransportMqtt_GetHostname &rArr; IoTHubTransport_MQTT_Common_GetHostname &rArr; STRING_clone &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>IoTHubTransportMqtt_GetSendStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubTransportMqtt_GetSendStatus &rArr; IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>IoTHubTransportMqtt_GetTwinAsync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetTwinAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IoTHubTransportMqtt_GetTwinAsync &rArr; IoTHubTransport_MQTT_Common_GetTwinAsync &rArr; create_device_twin_get_message &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetTwinAsync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>IoTHubTransportMqtt_ProcessItem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_ProcessItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = IoTHubTransportMqtt_ProcessItem &rArr; IoTHubTransport_MQTT_Common_ProcessItem &rArr; publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>IoTHubTransportMqtt_Register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IoTHubTransportMqtt_Register &rArr; IoTHubTransport_MQTT_Common_Register &rArr; IoTHubClient_Auth_Get_DeviceKey
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>IoTHubTransportMqtt_SendMessageDisposition</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SendMessageDisposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubTransportMqtt_SendMessageDisposition &rArr; IoTHubTransport_MQTT_Common_SendMessageDisposition &rArr; IoTHubMessage_Destroy &rArr; DestroyMessageData &rArr; Map_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>IoTHubTransportMqtt_SetOption</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = IoTHubTransportMqtt_SetOption &rArr; IoTHubTransport_MQTT_Common_SetOption &rArr; GetTransportProviderIfNecessary &rArr; IoTHubClient_Auth_Set_xio_Certificate &rArr; iothub_device_auth_generate_credentials &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>IoTHubTransportMqtt_SetRetryPolicy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubTransportMqtt_SetRetryPolicy &rArr; IoTHubTransport_MQTT_Common_SetRetryPolicy &rArr; retry_control_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>IoTHubTransportMqtt_Subscribe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = IoTHubTransportMqtt_Subscribe &rArr; IoTHubTransport_MQTT_Common_Subscribe &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>IoTHubTransportMqtt_Subscribe_DeviceMethod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubTransportMqtt_Subscribe_DeviceMethod &rArr; IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod &rArr; STRING_construct &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>IoTHubTransportMqtt_Subscribe_DeviceTwin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubTransportMqtt_Subscribe_DeviceTwin &rArr; IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin &rArr; STRING_construct &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>IoTHubTransportMqtt_Unregister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unregister))
<BR><BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unregister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>IoTHubTransportMqtt_Unsubscribe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe &rArr; IoTHubTransport_MQTT_Common_Unsubscribe &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>IoTHubTransportMqtt_Unsubscribe_DeviceMethod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe_DeviceMethod &rArr; IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>IoTHubTransportMqtt_Unsubscribe_DeviceTwin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe_DeviceTwin &rArr; IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin &rArr; STRING_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>IotHubTransportMqtt_SetCallbackContext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IotHubTransportMqtt_SetCallbackContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IotHubTransportMqtt_SetCallbackContext &rArr; IoTHubTransport_MQTT_SetCallbackContext
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_SetCallbackContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>IotHubTransportMqtt_Subscribe_InputQueue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IotHubTransportMqtt_Subscribe_InputQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = IotHubTransportMqtt_Subscribe_InputQueue &rArr; IoTHubTransport_MQTT_Common_Subscribe_InputQueue &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_InputQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>IotHubTransportMqtt_Unsubscribe_InputQueue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IotHubTransportMqtt_Unsubscribe_InputQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = IotHubTransportMqtt_Unsubscribe_InputQueue &rArr; IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_InputQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>getIoTransportProvider</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, iothubtransportmqtt.o(i.getIoTransportProvider))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getIoTransportProvider &rArr; xio_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_default_tlsio
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create)
</UL>
<P><STRONG><a name="[62f]"></a>append_indent</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, parson.o(i.append_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = append_indent &rArr; append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[630]"></a>append_string</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parson.o(i.append_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_indent
</UL>

<P><STRONG><a name="[738]"></a>get_quoted_string</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, parson.o(i.get_quoted_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_quoted_string &rArr; process_string &rArr; parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[917]"></a>hex_char_to_int</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, parson.o(i.hex_char_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16_hex
</UL>

<P><STRONG><a name="[751]"></a>json_array_add</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, parson.o(i.json_array_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = json_array_add &rArr; json_array_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[752]"></a>json_array_resize</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, parson.o(i.json_array_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = json_array_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_add
</UL>

<P><STRONG><a name="[754]"></a>json_object_add</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, parson.o(i.json_object_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = json_object_add &rArr; json_object_addn &rArr; json_object_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_addn
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[755]"></a>json_object_addn</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, parson.o(i.json_object_addn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = json_object_addn &rArr; json_object_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strndup
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_getn_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[759]"></a>json_object_dotremove_internal</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, parson.o(i.json_object_dotremove_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = json_object_dotremove_internal &rArr; json_object_remove_internal &rArr; json_object_get_value &rArr; json_object_getn_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_remove_internal
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_getn_value
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[756]"></a>json_object_getn_value</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, parson.o(i.json_object_getn_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = json_object_getn_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotremove_internal
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_addn
</UL>

<P><STRONG><a name="[75a]"></a>json_object_remove_internal</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, parson.o(i.json_object_remove_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = json_object_remove_internal &rArr; json_object_get_value &rArr; json_object_getn_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotremove_internal
</UL>

<P><STRONG><a name="[757]"></a>json_object_resize</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, parson.o(i.json_object_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = json_object_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_addn
</UL>

<P><STRONG><a name="[761]"></a>json_serialize_string</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, parson.o(i.json_serialize_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = json_serialize_string &rArr; append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[760]"></a>json_serialize_to_buffer_r</STRONG> (Thumb, 626 bytes, Stack size 56 bytes, parson.o(i.json_serialize_to_buffer_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_string
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_number
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_boolean
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_array
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_name
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_value
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_indent
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[918]"></a>json_value_init_string_no_copy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, parson.o(i.json_value_init_string_no_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_string_no_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[90e]"></a>parse_array_value</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, parson.o(i.parse_array_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = parse_array_value &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_array
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_array
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_count
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_add
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[911]"></a>parse_number_value</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, parson.o(i.parse_number_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_number
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[913]"></a>parse_object_value</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, parson.o(i.parse_object_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = parse_object_value &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_count
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[915]"></a>parse_utf16</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, parson.o(i.parse_utf16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
</UL>

<P><STRONG><a name="[916]"></a>parse_utf16_hex</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, parson.o(i.parse_utf16_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16
</UL>

<P><STRONG><a name="[75e]"></a>parse_value</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, parson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_null
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_boolean
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_string_no_copy
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[758]"></a>parson_strndup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, parson.o(i.parson_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parson_strndup &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_addn
</UL>

<P><STRONG><a name="[739]"></a>process_string</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, parson.o(i.process_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = process_string &rArr; parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
</UL>

<P><STRONG><a name="[3b6]"></a>DestroyHalfBakedComplexType</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, agenttypesystem.o(i.DestroyHalfBakedComplexType))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DestroyHalfBakedComplexType &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[b8]"></a>NoCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, agenttypesystem.o(i.NoCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[b7]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, agenttypesystem.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[3a1]"></a>ValidateDate</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, agenttypesystem.o(i.ValidateDate))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[3a6]"></a>ValidateDecimal</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, agenttypesystem.o(i.ValidateDecimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ValidateDecimal &rArr; scanOptionalNDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalNDigits
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatoryOneDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[2c8]"></a>__ARM_isinf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, agenttypesystem.o(i.__ARM_isinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isinf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[2c6]"></a>__ARM_isinff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, agenttypesystem.o(i.__ARM_isinff))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[2cf]"></a>base64b16</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, agenttypesystem.o(i.base64b16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = base64b16
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[2d0]"></a>base64b8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64b8))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[2ce]"></a>base64char</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64char))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[969]"></a>base64toValue</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64toValue))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan4base64char
</UL>

<P><STRONG><a name="[3a2]"></a>fill_tm_yday_and_tm_wday</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, agenttypesystem.o(i.fill_tm_yday_and_tm_wday))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fill_tm_yday_and_tm_wday
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[2cd]"></a>hexDigitToChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, agenttypesystem.o(i.hexDigitToChar))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[3aa]"></a>scan4base64char</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, agenttypesystem.o(i.scan4base64char))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scan4base64char
</UL>
<BR>[Calls]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[39d]"></a>scanAndReadNDigitsInt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, agenttypesystem.o(i.scanAndReadNDigitsInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scanAndReadNDigitsInt
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf3d2d
</UL>

<P><STRONG><a name="[96a]"></a>scanMandatory1CapitalHexDigit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, agenttypesystem.o(i.scanMandatory1CapitalHexDigit))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory2CapitalHexDigits
</UL>

<P><STRONG><a name="[3a9]"></a>scanMandatory2CapitalHexDigits</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, agenttypesystem.o(i.scanMandatory2CapitalHexDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scanMandatory2CapitalHexDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory1CapitalHexDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[5ec]"></a>scanMandatoryOneDigit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, agenttypesystem.o(i.scanMandatoryOneDigit))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[39c]"></a>scanOptionalMinusSign</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, agenttypesystem.o(i.scanOptionalMinusSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scanOptionalMinusSign
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[5ed]"></a>scanOptionalNDigits</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, agenttypesystem.o(i.scanOptionalNDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scanOptionalNDigits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[3a0]"></a>sscanf3d2d</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanf3d2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sscanf3d2d &rArr; scanAndReadNDigitsInt
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAndReadNDigitsInt
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[39a]"></a>sscanfd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sscanfd &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[39b]"></a>sscanfllu</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanfllu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sscanfllu &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[369]"></a>CodeFirst_Init_impl</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, codefirst.o(i.CodeFirst_Init_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CodeFirst_Init_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[370]"></a>DestroyDevice</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, codefirst.o(i.DestroyDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
</UL>

<P><STRONG><a name="[379]"></a>FindChildModelInCodeFirstMetadata</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, codefirst.o(i.FindChildModelInCodeFirstMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
</UL>

<P><STRONG><a name="[372]"></a>FindDevice</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, codefirst.o(i.FindDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
</UL>

<P><STRONG><a name="[378]"></a>FindModelInCodeFirstMetadata</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, codefirst.o(i.FindModelInCodeFirstMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
</UL>

<P><STRONG><a name="[38e]"></a>FindReportedProperty</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, codefirst.o(i.FindReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = FindReportedProperty &rArr;  FindReportedProperty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
</UL>

<P><STRONG><a name="[384]"></a>FindValue</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, codefirst.o(i.FindValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = FindValue &rArr;  FindValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
</UL>

<P><STRONG><a name="[383]"></a>SendAllDeviceProperties</STRONG> (Thumb, 162 bytes, Stack size 120 bytes, codefirst.o(i.SendAllDeviceProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SendAllDeviceProperties &rArr; Device_PublishTransacted &rArr; DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[38d]"></a>SendAllDeviceReportedProperties</STRONG> (Thumb, 162 bytes, Stack size 120 bytes, codefirst.o(i.SendAllDeviceReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SendAllDeviceReportedProperties &rArr; Device_PublishTransacted_ReportedProperty &rArr; DataPublisher_PublishTransacted_ReportedProperty &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[64b]"></a>buildModel</STRONG> (Thumb, 696 bytes, Stack size 64 bytes, codefirst.o(i.buildModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelProperty
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>

<P><STRONG><a name="[37f]"></a>buildModelTypes</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, codefirst.o(i.buildModelTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[37e]"></a>buildStructTypes</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, codefirst.o(i.buildStructTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = buildStructTypes &rArr; Schema_CreateStructType &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEFIRST_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[36a]"></a>initializeDesiredProperties</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, codefirst.o(i.initializeDesiredProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = initializeDesiredProperties &rArr;  initializeDesiredProperties (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_offset
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[3ea]"></a>DecodeAndExecuteModelAction</STRONG> (Thumb, 430 bytes, Stack size 208 bytes, commanddecoder.o(i.DecodeAndExecuteModelAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentCount
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentByIndex
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentType
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentName
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
</UL>

<P><STRONG><a name="[3f2]"></a>DecodeAndExecuteModelMethod</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, commanddecoder.o(i.DecodeAndExecuteModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentType
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentName
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
</UL>

<P><STRONG><a name="[396]"></a>DecodeCommand</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, commanddecoder.o(i.DecodeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaForModelType
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
</UL>

<P><STRONG><a name="[398]"></a>DecodeMethod</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, commanddecoder.o(i.DecodeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaForModelType
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
</UL>

<P><STRONG><a name="[3f1]"></a>DecodeValueFromNode</STRONG> (Thumb, 498 bytes, Stack size 80 bytes, commanddecoder.o(i.DecodeValueFromNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + In Cycle
<LI>Call Chain = DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyCount
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyByIndex
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyType
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyName
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_GetPrimitiveType
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[3fa]"></a>ScanActionPathAndExecuteAction</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, commanddecoder.o(i.ScanActionPathAndExecuteAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
</UL>

<P><STRONG><a name="[3fb]"></a>ScanMethodPathAndExecuteMethod</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, commanddecoder.o(i.ScanMethodPathAndExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
</UL>

<P><STRONG><a name="[c3]"></a>NoCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datamarshaller.o(i.NoCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
</UL>
<P><STRONG><a name="[c2]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, datamarshaller.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
</UL>
<P><STRONG><a name="[c5]"></a>reportedPropertyExistsByPath</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datapublisher.o(i.reportedPropertyExistsByPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reportedPropertyExistsByPath &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty)
</UL>
<P><STRONG><a name="[c8]"></a>DeviceInvokeAction</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, iotdevice.o(i.DeviceInvokeAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceInvokeAction
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotdevice.o(i.Device_Create)
</UL>
<P><STRONG><a name="[c7]"></a>DeviceInvokeMethod</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, iotdevice.o(i.DeviceInvokeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceInvokeMethod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RESULTStrings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotdevice.o(i.Device_Create)
</UL>
<P><STRONG><a name="[d7]"></a>NOPCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jsondecoder.o(i.NOPCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
</UL>
<P><STRONG><a name="[d6]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jsondecoder.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
</UL>
<P><STRONG><a name="[539]"></a>ParseArray</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, jsondecoder.o(i.ParseArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = ParseArray &rArr;  ParseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
</UL>

<P><STRONG><a name="[562]"></a>ParseNameValuePair</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, jsondecoder.o(i.ParseNameValuePair))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseString
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
</UL>

<P><STRONG><a name="[564]"></a>ParseNumber</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, jsondecoder.o(i.ParseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
</UL>

<P><STRONG><a name="[538]"></a>ParseObject</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, jsondecoder.o(i.ParseObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
</UL>

<P><STRONG><a name="[563]"></a>ParseString</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, jsondecoder.o(i.ParseString))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
</UL>

<P><STRONG><a name="[560]"></a>ParseValue</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, jsondecoder.o(i.ParseValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseString
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[559]"></a>createLeaf</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, multitree.o(i.createLeaf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = createLeaf &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
</UL>

<P><STRONG><a name="[55b]"></a>getChildByName</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, multitree.o(i.getChildByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getChildByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
</UL>

<P><STRONG><a name="[2ba]"></a>AddModelProperty</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, schema.o(i.AddModelProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AddModelProperty &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEMA_RESULTStrings
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelProperty
</UL>

<P><STRONG><a name="[405]"></a>DestroyMethods</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, schema.o(i.DestroyMethods))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DestroyMethods &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[406]"></a>DestroyModel</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, schema.o(i.DestroyModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DestroyModel &rArr; DestroyMethods &rArr; VECTOR_destroy &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>

<P><STRONG><a name="[407]"></a>DestroyProperty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.DestroyProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DestroyProperty &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[e1]"></a>SchemaHandlesMatch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, schema.o(i.SchemaHandlesMatch))
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_Destroy)
</UL>
<P><STRONG><a name="[e4]"></a>SchemaNamespacesMatch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.SchemaNamespacesMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SchemaNamespacesMatch &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetSchemaByNamespace)
</UL>
<P><STRONG><a name="[dd]"></a>desiredPropertyExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.desiredPropertyExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = desiredPropertyExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_AddModelDesiredProperty)
</UL>
<P><STRONG><a name="[e2]"></a>matchModelMethod</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.matchModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matchModelMethod &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetModelMethodByName)
</UL>
<P><STRONG><a name="[e3]"></a>matchModelName</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, schema.o(i.matchModelName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matchModelName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetModelModelByName)
</UL>
<P><STRONG><a name="[e0]"></a>methodExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.methodExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = methodExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_CreateModelMethod)
</UL>
<P><STRONG><a name="[de]"></a>methodFindArgumentByBame</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.methodFindArgumentByBame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = methodFindArgumentByBame &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_AddModelMethodArgument)
</UL>
<P><STRONG><a name="[df]"></a>reportedPropertyExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.reportedPropertyExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reportedPropertyExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> schema.o(i.Schema_AddModelReportedProperty)
<LI> schema.o(i.Schema_ModelReportedPropertyByPathExists)
</UL>
<P><STRONG><a name="[567]"></a>ProcessPublishMessage</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, mqtt_client.o(i.ProcessPublishMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ProcessPublishMessage &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create_in_place
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsRetained
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsDuplicateMsg
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishReceived
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishAck
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QOS_VALUEStrings
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[64d]"></a>byteutil_readByte</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqtt_client.o(i.byteutil_readByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteutil_readByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[568]"></a>byteutil_readUTF</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mqtt_client.o(i.byteutil_readUTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = byteutil_readUTF &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[56b]"></a>byteutil_read_uint16</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mqtt_client.o(i.byteutil_read_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteutil_read_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[660]"></a>clear_mqtt_options</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mqtt_client.o(i.clear_mqtt_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clear_mqtt_options &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
</UL>

<P><STRONG><a name="[661]"></a>cloneMqttOptions</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, mqtt_client.o(i.cloneMqttOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cloneMqttOptions &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
</UL>

<P><STRONG><a name="[662]"></a>close_connection</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mqtt_client.o(i.close_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[6b2]"></a>construct_trace_log_handle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqtt_client.o(i.construct_trace_log_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = construct_trace_log_handle &rArr; STRING_new &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[735]"></a>getLogTime</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqtt_client.o(i.getLogTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
</UL>

<P><STRONG><a name="[570]"></a>log_incoming_trace</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, mqtt_client.o(i.log_incoming_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log_incoming_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[76b]"></a>log_outgoing_trace</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, mqtt_client.o(i.log_outgoing_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log_outgoing_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[122]"></a>onBytesReceived</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mqtt_client.o(i.onBytesReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = onBytesReceived &rArr; mqtt_codec_bytesReceived &rArr; prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[121]"></a>onIoError</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mqtt_client.o(i.onIoError))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = onIoError &rArr; set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[123]"></a>onOpenComplete</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, mqtt_client.o(i.onOpenComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = onOpenComplete &rArr; mqtt_codec_connect &rArr; constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[fb]"></a>on_connection_closed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mqtt_client.o(i.on_connection_closed))
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.close_connection)
</UL>
<P><STRONG><a name="[124]"></a>recvCompleteCallback</STRONG> (Thumb, 744 bytes, Stack size 56 bytes, mqtt_client.o(i.recvCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = recvCompleteCallback &rArr; ProcessPublishMessage &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishRelease
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishComplete
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readByte
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_init)
</UL>
<P><STRONG><a name="[148]"></a>sendComplete</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mqtt_client.o(i.sendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendComplete &rArr; set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.sendPacketItem)
</UL>
<P><STRONG><a name="[573]"></a>sendPacketItem</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mqtt_client.o(i.sendPacketItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendPacketItem &rArr; tickcounter_get_current_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[56a]"></a>set_error_callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mqtt_client.o(i.set_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onIoError
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPublishMessage
</UL>

<P><STRONG><a name="[61a]"></a>addListItemsToSubscribePacket</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, mqtt_codec.o(i.addListItemsToSubscribePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[61c]"></a>addListItemsToUnsubscribePacket</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mqtt_codec.o(i.addListItemsToUnsubscribePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
</UL>

<P><STRONG><a name="[6ac]"></a>byteutil_writeByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_codec.o(i.byteutil_writeByte))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
</UL>

<P><STRONG><a name="[64e]"></a>byteutil_writeInt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mqtt_codec.o(i.byteutil_writeInt))
<BR><BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
</UL>

<P><STRONG><a name="[61b]"></a>byteutil_writeUTF</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mqtt_codec.o(i.byteutil_writeUTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteutil_writeUTF &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
</UL>

<P><STRONG><a name="[6a8]"></a>completePacketData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_codec.o(i.completePacketData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = completePacketData &rArr; BUFFER_delete &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[6aa]"></a>constructConnPayload</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, mqtt_codec.o(i.constructConnPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[6ab]"></a>constructConnectVariableHeader</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructConnectVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = constructConnectVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[6ad]"></a>constructFixedHeader</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mqtt_codec.o(i.constructFixedHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = constructFixedHeader &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[6ae]"></a>constructPublishReply</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructPublishReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishRelease
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishReceived
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishComplete
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishAck
</UL>

<P><STRONG><a name="[6af]"></a>constructPublishVariableHeader</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, mqtt_codec.o(i.constructPublishVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
</UL>

<P><STRONG><a name="[6b0]"></a>constructSubscibeTypeVariableHeader</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructSubscibeTypeVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = constructSubscibeTypeVariableHeader &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[8b7]"></a>prepareheaderDataInfo</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, mqtt_codec.o(i.prepareheaderDataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[6bb]"></a>create_msg_object</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mqtt_message.o(i.create_msg_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_msg_object &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create_in_place
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
</UL>

<P><STRONG><a name="[74e]"></a>sign_sas_data</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, iothub_auth_client.o(i.sign_sas_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iothub_device_auth_generate_credentials
</UL>

<P><STRONG><a name="[716]"></a>encode_value</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, prov_auth_client.o(i.encode_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = encode_value &rArr; Base32_Encode_Bytes &rArr; base32_encode_impl &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base32_Encode_Bytes
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_registration_id
</UL>

<P><STRONG><a name="[76a]"></a>load_registration_id</STRONG> (Thumb, 264 bytes, Stack size 176 bytes, prov_auth_client.o(i.load_registration_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = load_registration_id &rArr; SHA256Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_value
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_get_registration_id
</UL>

<P><STRONG><a name="[932]"></a>sign_sas_data</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, prov_auth_client.o(i.sign_sas_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
</UL>

<P><STRONG><a name="[57b]"></a>cleanup_prov_info</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, prov_device_ll_client.o(i.cleanup_prov_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cleanup_prov_info &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_DoWork
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_transport_registration_data
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_instance
</UL>

<P><STRONG><a name="[578]"></a>destroy_instance</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, prov_device_ll_client.o(i.destroy_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = destroy_instance &rArr; cleanup_prov_info &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_prov_info
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Destroy
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prov_Device_LL_Create
</UL>

<P><STRONG><a name="[d8]"></a>on_transport_error</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, prov_device_ll_client.o(i.on_transport_error))
<BR>[Address Reference Count : 1]<UL><LI> prov_device_ll_client.o(i.Prov_Device_LL_Create)
</UL>
<P><STRONG><a name="[dc]"></a>on_transport_registration_data</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, prov_device_ll_client.o(i.on_transport_registration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_transport_registration_data &rArr; cleanup_prov_info &rArr; free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_prov_info
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_import_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_device_ll_client.o(i.Prov_Device_LL_Register_Device)
</UL>
<P><STRONG><a name="[db]"></a>on_transport_status</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, prov_device_ll_client.o(i.on_transport_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_transport_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_device_ll_client.o(i.Prov_Device_LL_Register_Device)
</UL>
<P><STRONG><a name="[da]"></a>prov_transport_challenge_callback</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, prov_device_ll_client.o(i.prov_transport_challenge_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = prov_transport_challenge_callback &rArr; prov_auth_construct_sas_token &rArr; sign_sas_data &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_EncodeString
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_import_key
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth_construct_sas_token
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_device_ll_client.o(i.Prov_Device_LL_Register_Device)
</UL>
<P><STRONG><a name="[d9]"></a>prov_transport_process_json_reply</STRONG> (Thumb, 1792 bytes, Stack size 64 bytes, prov_device_ll_client.o(i.prov_transport_process_json_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = prov_transport_process_json_reply &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Azure_Base64_Decode
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_string
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_number
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_status_type
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_json_item
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_device_ll_client.o(i.Prov_Device_LL_DoWork)
</UL>
<P><STRONG><a name="[945]"></a>retrieve_json_item</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, prov_device_ll_client.o(i.retrieve_json_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = retrieve_json_item &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_string
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[944]"></a>retrieve_status_type</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, prov_device_ll_client.o(i.retrieve_status_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = retrieve_status_type &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_process_json_reply
</UL>

<P><STRONG><a name="[146]"></a>mqtt_transport_io</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, prov_transport_mqtt_client.o(i.mqtt_transport_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mqtt_transport_io &rArr; xio_create &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_default_tlsio
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proxy_io_get_interface_description
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(i.prov_transport_mqtt_create)
</UL>
<P><STRONG><a name="[47]"></a>prov_transport_mqtt_set_option</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prov_transport_mqtt_set_option &rArr; prov_transport_common_mqtt_set_option &rArr; xio_setoption &rArr; OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_option
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>prov_transport_mqtt_set_proxy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_proxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_transport_mqtt_set_proxy &rArr; prov_transport_common_mqtt_set_proxy &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_proxy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>prov_transport_mqtt_set_trusted_cert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_set_trusted_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_transport_mqtt_set_trusted_cert &rArr; prov_transport_common_mqtt_set_trusted_cert &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_trusted_cert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>prov_transport_mqtt_x509_cert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov_transport_mqtt_client.o(i.prov_transport_mqtt_x509_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_transport_mqtt_x509_cert &rArr; prov_transport_common_mqtt_x509_cert &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_x509_cert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_client.o(.data)
</UL>
<P><STRONG><a name="[6b3]"></a>construct_transport</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, prov_transport_mqtt_common.o(i.construct_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = construct_transport &rArr; xio_setoption &rArr; OptionHandler_FeedOptions &rArr; VECTOR_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_transport_io_object
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
</UL>

<P><STRONG><a name="[6b5]"></a>construct_username</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, prov_transport_mqtt_common.o(i.construct_username))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = construct_username &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection
</UL>

<P><STRONG><a name="[6b8]"></a>create_connection</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, prov_transport_mqtt_common.o(i.create_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = create_connection &rArr; mqtt_client_connect &rArr; cloneMqttOptions &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_set_trace
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_username
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_transport
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
</UL>

<P><STRONG><a name="[6b4]"></a>create_transport_io_object</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, prov_transport_mqtt_common.o(i.create_transport_io_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = create_transport_io_object
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_transport
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_set_option
</UL>

<P><STRONG><a name="[96c]"></a>get_next_packet_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, prov_transport_mqtt_common.o(i.get_next_packet_id))
<BR><BR>[Called By]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_to_topic
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mqtt_message
</UL>

<P><STRONG><a name="[143]"></a>mqtt_error_callback</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, prov_transport_mqtt_common.o(i.mqtt_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mqtt_error_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_create)
</UL>
<P><STRONG><a name="[145]"></a>mqtt_notification_callback</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, prov_transport_mqtt_common.o(i.mqtt_notification_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mqtt_notification_callback &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_create)
</UL>
<P><STRONG><a name="[144]"></a>mqtt_operation_complete_callback</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, prov_transport_mqtt_common.o(i.mqtt_operation_complete_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mqtt_operation_complete_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_mqtt_return_codes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov_transport_mqtt_common.o(i.prov_transport_common_mqtt_create)
</UL>
<P><STRONG><a name="[8c2]"></a>retrieve_mqtt_return_codes</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, prov_transport_mqtt_common.o(i.retrieve_mqtt_return_codes))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[96b]"></a>send_mqtt_message</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, prov_transport_mqtt_common.o(i.send_mqtt_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = send_mqtt_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register_message
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_operation_status_message
</UL>

<P><STRONG><a name="[93b]"></a>send_operation_status_message</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, prov_transport_mqtt_common.o(i.send_operation_status_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = send_operation_status_message &rArr; send_mqtt_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mqtt_message
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
</UL>

<P><STRONG><a name="[93a]"></a>send_register_message</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, prov_transport_mqtt_common.o(i.send_register_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = send_register_message &rArr; send_mqtt_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mqtt_message
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
</UL>

<P><STRONG><a name="[939]"></a>subscribe_to_topic</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, prov_transport_mqtt_common.o(i.subscribe_to_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = subscribe_to_topic &rArr; mqtt_client_subscribe &rArr; mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xlogging_get_log_function
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_transport_common_mqtt_dowork
</UL>

<P><STRONG><a name="[3c9]"></a>SHA256_Transform</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, dicesha256.o(i.SHA256_Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SHA256_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Update
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DICE_SHA256_Final
</UL>

<P><STRONG><a name="[2f8]"></a>base64char</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, riotbase64.o(i.base64char))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64Encode
</UL>

<P><STRONG><a name="[3bb]"></a>EncodeInt</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, riotderenc.o(i.EncodeInt))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOctetString
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
</UL>

<P><STRONG><a name="[3bc]"></a>GetIntEncodedNumBytes</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, riotderenc.o(i.GetIntEncodedNumBytes))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOctetString
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
</UL>

<P><STRONG><a name="[426]"></a>ECDSA_sign</STRONG> (Thumb, 104 bytes, Stack size 168 bytes, riotecc.o(i.ECDSA_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220<LI>Call Chain = ECDSA_sign &rArr; ECDH_generate &rArr; pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_generate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_zero
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_add
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_DSASignDigest
</UL>

<P><STRONG><a name="[649]"></a>big_1wd_mpy</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, riotecc.o(i.big_1wd_mpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = big_1wd_mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
</UL>

<P><STRONG><a name="[429]"></a>big_add</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, riotecc.o(i.big_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = big_add
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_addP
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[642]"></a>big_addP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, riotecc.o(i.big_addP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = big_addP &rArr; big_add
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_add
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
</UL>

<P><STRONG><a name="[643]"></a>big_adjustP</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, riotecc.o(i.big_adjustP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = big_adjustP &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_subP
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
</UL>

<P><STRONG><a name="[421]"></a>big_cmp</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, riotecc.o(i.big_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = big_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_generate
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_derive
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
</UL>

<P><STRONG><a name="[42a]"></a>big_divide</STRONG> (Thumb, 222 bytes, Stack size 160 bytes, riotecc.o(i.big_divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = big_divide &rArr; big_precise_reduce &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_sub
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_one
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_halve
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_cmp
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_add
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toAffine
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[644]"></a>big_halve</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, riotecc.o(i.big_halve))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = big_halve
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
</UL>

<P><STRONG><a name="[646]"></a>big_is_one</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, riotecc.o(i.big_is_one))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
</UL>

<P><STRONG><a name="[420]"></a>big_is_zero</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, riotecc.o(i.big_is_zero))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_generate
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_derive
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toAffine
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[428]"></a>big_mpyP</STRONG> (Thumb, 1156 bytes, Stack size 256 bytes, riotecc.o(i.big_mpyP))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpy_accum_dbl
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpy_accum
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_sub
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_adjustP
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_1wd_mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toAffine
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[427]"></a>big_precise_reduce</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, riotecc.o(i.big_precise_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = big_precise_reduce &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_sub
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_cmp
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_adjustP
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_add
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_1wd_mpy
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toAffine
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[645]"></a>big_sub</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, riotecc.o(i.big_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = big_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_subP
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
</UL>

<P><STRONG><a name="[64a]"></a>big_subP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, riotecc.o(i.big_subP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = big_subP &rArr; big_adjustP &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_sub
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_adjustP
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
</UL>

<P><STRONG><a name="[92a]"></a>big_triple</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, riotecc.o(i.big_triple))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = big_triple
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
</UL>

<P><STRONG><a name="[647]"></a>mpy_accum</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, riotecc.o(i.mpy_accum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpy_accum
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
</UL>

<P><STRONG><a name="[648]"></a>mpy_accum_dbl</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, riotecc.o(i.mpy_accum_dbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpy_accum_dbl
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
</UL>

<P><STRONG><a name="[927]"></a>pointAdd</STRONG> (Thumb, 344 bytes, Stack size 208 bytes, riotecc.o(i.pointAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toJacobian
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_subP
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_zero
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_addP
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
</UL>

<P><STRONG><a name="[929]"></a>pointDouble</STRONG> (Thumb, 260 bytes, Stack size 232 bytes, riotecc.o(i.pointDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_triple
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_subP
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_zero
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_halve
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_adjustP
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_addP
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
</UL>

<P><STRONG><a name="[422]"></a>pointMpyP</STRONG> (Thumb, 232 bytes, Stack size 304 bytes, riotecc.o(i.pointMpyP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = pointMpyP &rArr; pointAdd &rArr; pointDouble &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toJacobian
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toAffine
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointDouble
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_zero
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_generate
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDH_derive
</UL>

<P><STRONG><a name="[92b]"></a>toAffine</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, riotecc.o(i.toAffine))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = toAffine &rArr; big_mpyP &rArr; big_1wd_mpy
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_precise_reduce
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_mpyP
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_is_zero
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_divide
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
</UL>

<P><STRONG><a name="[928]"></a>toJacobian</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, riotecc.o(i.toJacobian))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = toJacobian &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointMpyP
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointAdd
</UL>

<P><STRONG><a name="[58e]"></a>SHA256_Transform</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, riotsha256.o(i.SHA256_Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SHA256_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Update
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIOT_SHA256_Final
</UL>

<P><STRONG><a name="[5ee]"></a>X509AddExtensions</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, riotx509bldr.o(i.X509AddExtensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = X509AddExtensions &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartExplicit
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartEnvelopingOctetString
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOctetString
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddInteger
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddBitString
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
</UL>

<P><STRONG><a name="[5f3]"></a>X509AddX501Name</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, riotx509bldr.o(i.X509AddX501Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = X509AddX501Name &rArr; DERAddOID
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERStartSequenceOrSet
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERPopNesting
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddUTF8String
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DERAddOID
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDeviceCertTBS
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetDERCsrTbs
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X509GetAliasCertTBS
</UL>

<P><STRONG><a name="[7d1]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[7cf]"></a>mpi_montmul</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[7d0]"></a>mpi_montred</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[7d4]"></a>mpi_mul_hlp</STRONG> (Thumb, 898 bytes, Stack size 20 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[7d5]"></a>mpi_sub_hlp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[1de]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>aes_ctx_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(i.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>gcm_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gcm_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>gcm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6c0]"></a>debug_print_pk</STRONG> (Thumb, 178 bytes, Stack size 112 bytes, debug.o(i.debug_print_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_debug
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[6c2]"></a>debug_send_line</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(i.debug_send_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_send_line
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[6c8]"></a>derive_mpi</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ecdsa.o(i.derive_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_restartable
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[6d3]"></a>ecdsa_sign_det_restartable</STRONG> (Thumb, 160 bytes, Stack size 320 bytes, ecdsa.o(i.ecdsa_sign_det_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = ecdsa_sign_det_restartable &rArr; ecdsa_sign_restartable &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_restartable
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
</UL>

<P><STRONG><a name="[6d9]"></a>ecdsa_sign_restartable</STRONG> (Thumb, 362 bytes, Stack size 152 bytes, ecdsa.o(i.ecdsa_sign_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = ecdsa_sign_restartable &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_det_restartable
</UL>

<P><STRONG><a name="[6e6]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 98 bytes, Stack size 168 bytes, ecdsa.o(i.ecdsa_signature_to_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_asn1_write_len
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature_restartable
</UL>

<P><STRONG><a name="[6ea]"></a>ecdsa_verify_restartable</STRONG> (Thumb, 302 bytes, Stack size 152 bytes, ecdsa.o(i.ecdsa_verify_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = ecdsa_verify_restartable &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature_restartable
</UL>

<P><STRONG><a name="[6f2]"></a>ecp_add_mixed</STRONG> (Thumb, 948 bytes, Stack size 120 bytes, ecp.o(i.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
</UL>

<P><STRONG><a name="[6fa]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, ecp.o(i.ecp_check_pubkey_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[6fc]"></a>ecp_comb_recode_core</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ecp.o(i.ecp_comb_recode_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecp_comb_recode_core
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
</UL>

<P><STRONG><a name="[6fe]"></a>ecp_comb_recode_scalar</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, ecp.o(i.ecp_comb_recode_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ecp_comb_recode_scalar &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_core
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[6f6]"></a>ecp_double_jac</STRONG> (Thumb, 1062 bytes, Stack size 80 bytes, ecp.o(i.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[79a]"></a>ecp_get_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ecp.o(i.ecp_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_privkey
</UL>

<P><STRONG><a name="[6f4]"></a>ecp_modp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ecp.o(i.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[70a]"></a>ecp_mul_comb</STRONG> (Thumb, 230 bytes, Stack size 344 bytes, ecp.o(i.ecp_mul_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_recode_scalar
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[70c]"></a>ecp_mul_comb_core</STRONG> (Thumb, 150 bytes, Stack size 96 bytes, ecp.o(i.ecp_mul_comb_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[70e]"></a>ecp_normalize_jac</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, ecp.o(i.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
</UL>

<P><STRONG><a name="[712]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, ecp.o(i.ecp_normalize_jac_many))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[70b]"></a>ecp_precompute_comb</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, ecp.o(i.ecp_precompute_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[711]"></a>ecp_randomize_jac</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, ecp.o(i.ecp_randomize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[70d]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ecp.o(i.ecp_safe_invert_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[70f]"></a>ecp_select_comb</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ecp.o(i.ecp_select_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[79e]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_mul_shortcuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
</UL>

<P><STRONG><a name="[707]"></a>add32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ecp_curves.o(i.add32))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[701]"></a>ecp_group_load</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ecp_curves.o(i.ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[704]"></a>ecp_mod_koblitz</STRONG> (Thumb, 326 bytes, Stack size 120 bytes, ecp_curves.o(i.ecp_mod_koblitz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256k1
</UL>

<P><STRONG><a name="[113]"></a>ecp_mod_p256</STRONG> (Thumb, 1074 bytes, Stack size 88 bytes, ecp_curves.o(i.ecp_mod_p256))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ecp_mod_p256 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[115]"></a>ecp_mod_p256k1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ecp_curves.o(i.ecp_mod_p256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ecp_mod_p256k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[114]"></a>ecp_mod_p384</STRONG> (Thumb, 1376 bytes, Stack size 104 bytes, ecp_curves.o(i.ecp_mod_p384))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p384 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[702]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(i.ecp_mpi_load))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[709]"></a>fix_negative</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ecp_curves.o(i.fix_negative))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[708]"></a>sub32</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ecp_curves.o(i.sub32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[730]"></a>gcm_gen_table</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, gcm.o(i.gcm_gen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[7a9]"></a>gcm_mult</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, gcm.o(i.gcm_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[1ec]"></a>md5_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_clone_wrap &rArr; mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>md5_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>md5_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>md5_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = md5_finish_wrap &rArr; mbedtls_md5_finish_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>md5_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = md5_process_wrap &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_md5_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>md5_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>md5_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = md5_update_wrap &rArr; mbedtls_md5_update_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>sha1_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>sha1_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>sha1_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>sha1_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>sha224_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>sha224_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>sha224_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fd]"></a>sha224_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>sha384_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>sha384_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>sha384_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[202]"></a>sha384_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>sha384_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>sha384_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>sha384_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>sha384_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>sha512_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>sha512_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512_ret &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7dc]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oid.o(i.oid_sig_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>

<P><STRONG><a name="[7e2]"></a>mbedtls_pk_get_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[7f2]"></a>pk_hashlen_helper</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.pk_hashlen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_restartable
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign_restartable
</UL>

<P><STRONG><a name="[220]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>ecdsa_can_do</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk_wrap.o(i.ecdsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>ecdsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21f]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, pk_wrap.o(i.ecdsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; ecdsa_sign_restartable &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pk_wrap.o(i.ecdsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_read_signature_restartable &rArr; ecdsa_verify_restartable &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>eckey_alloc_wrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>eckey_can_do</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>eckey_check_pair</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>eckey_debug</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_debug))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>eckey_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>eckey_get_bitlen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_get_bitlen))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>eckey_sign_wrap</STRONG> (Thumb, 76 bytes, Stack size 224 bytes, pk_wrap.o(i.eckey_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_write_signature_restartable &rArr; ecdsa_sign_det_restartable &rArr; ecdsa_sign_restartable &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>eckey_verify_wrap</STRONG> (Thumb, 68 bytes, Stack size 208 bytes, pk_wrap.o(i.eckey_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_read_signature_restartable &rArr; ecdsa_verify_restartable &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>eckeydh_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.eckeydh_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>rsa_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20b]"></a>rsa_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>rsa_debug</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20f]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, pk_wrap.o(i.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>rsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>rsa_get_bitlen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_get_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsa_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>rsa_sign_wrap</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, pk_wrap.o(i.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>rsa_verify_wrap</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk_wrap.o(i.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7f0]"></a>pk_get_ecpubkey</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[7ed]"></a>pk_get_pk_alg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[7ee]"></a>pk_get_rsapubkey</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, pkparse.o(i.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[91c]"></a>pk_group_from_specified</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, pkparse.o(i.pk_group_from_specified))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pk_group_from_specified &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[91d]"></a>pk_group_id_from_group</STRONG> (Thumb, 190 bytes, Stack size 152 bytes, pkparse.o(i.pk_group_id_from_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[7e8]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, pkparse.o(i.pk_parse_key_pkcs1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[7ea]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, pkparse.o(i.pk_parse_key_pkcs8_unencrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[7e9]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, pkparse.o(i.pk_parse_key_sec1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[7ef]"></a>pk_use_ecparams</STRONG> (Thumb, 98 bytes, Stack size 144 bytes, pkparse.o(i.pk_use_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pk_use_ecparams &rArr; pk_group_id_from_group &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_id_from_group
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_group_from_specified
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[817]"></a>if_int</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rsa.o(i.if_int))
<BR><BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>

<P><STRONG><a name="[819]"></a>mbedtls_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[815]"></a>mgf_mask</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mgf_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[7fa]"></a>rsa_check_context</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rsa.o(i.rsa_check_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[812]"></a>rsa_prepare_blinding</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[818]"></a>rsa_rsassa_pkcs1_v15_encode</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, rsa.o(i.rsa_rsassa_pkcs1_v15_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rsa_rsassa_pkcs1_v15_encode &rArr; mbedtls_oid_get_oid_by_md
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[98c]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_own_key))
<BR><BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[980]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl_cli.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[978]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_check_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[97b]"></a>ssl_generate_random</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_generate_random &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[97e]"></a>ssl_parse_alpn_ext</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ssl_parse_alpn_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[854]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[85b]"></a>ssl_parse_new_session_ticket</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_new_session_ticket))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ssl_parse_new_session_ticket &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[97f]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_renegotiation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[981]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[851]"></a>ssl_parse_server_hello</STRONG> (Thumb, 2128 bytes, Stack size 64 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[855]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_hello_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[853]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 696 bytes, Stack size 152 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ssl_parse_server_key_exchange &rArr; ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_restartable
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[986]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_signature_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_parse_signature_algorithm &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[985]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[984]"></a>ssl_validate_ciphersuite</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_cli.o(i.ssl_validate_ciphersuite))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[98b]"></a>ssl_write_alpn_ext</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_alpn_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_alpn_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[858]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign_restartable
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[850]"></a>ssl_write_client_hello</STRONG> (Thumb, 876 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_ec
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[857]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_write_client_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[996]"></a>ssl_write_encrypted_pms</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_write_encrypted_pms))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ssl_write_encrypted_pms &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[994]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_extended_ms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_extended_ms_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[98e]"></a>ssl_write_hostname_ext</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_hostname_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_hostname_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[98f]"></a>ssl_write_renegotiation_ext</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_renegotiation_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_renegotiation_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[995]"></a>ssl_write_session_ticket_ext</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_session_ticket_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_session_ticket_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[990]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_signature_algorithms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_signature_algorithms_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[991]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_supported_elliptic_curves_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[992]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_supported_point_formats_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[993]"></a>ssl_write_truncated_hmac_ext</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_truncated_hmac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_write_truncated_hmac_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[84a]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_cipher_get_cipher_mode))
<BR><BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[876]"></a>mbedtls_ssl_own_cert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_own_cert))
<BR><BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
</UL>

<P><STRONG><a name="[83b]"></a>ssl_append_key_cert</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_append_key_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_append_key_cert
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[11b]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 194 bytes, Stack size 184 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[11e]"></a>ssl_calc_finished_tls_sha384</STRONG> (Thumb, 190 bytes, Stack size 304 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = ssl_calc_finished_tls_sha384 &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[11a]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[11d]"></a>ssl_calc_verify_tls_sha384</STRONG> (Thumb, 104 bytes, Stack size 248 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ssl_calc_verify_tls_sha384 &rArr; mbedtls_sha512_finish_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish_ret
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[866]"></a>ssl_check_ctr_renegotiate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_check_ctr_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3576<LI>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[869]"></a>ssl_consume_current_message</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_consume_current_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ssl_consume_current_message &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[97a]"></a>ssl_decrypt_buf</STRONG> (Thumb, 662 bytes, Stack size 112 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[879]"></a>ssl_encrypt_buf</STRONG> (Thumb, 566 bytes, Stack size 112 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[86a]"></a>ssl_get_next_record</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_get_next_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = ssl_get_next_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[872]"></a>ssl_handshake_init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts_ret
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[85f]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_handshake_wrapup_free_hs_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[861]"></a>ssl_parse_certificate_chain</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, ssl_tls.o(i.ssl_parse_certificate_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[97c]"></a>ssl_parse_record_header</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_parse_record_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[97d]"></a>ssl_prepare_record_content</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_prepare_record_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[871]"></a>ssl_reset_in_out_pointers</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_reset_in_out_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_reset_in_out_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_in_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[870]"></a>ssl_session_copy</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_session_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
</UL>

<P><STRONG><a name="[86f]"></a>ssl_session_reset_int</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_session_reset_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_session_reset_int &rArr; ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
</UL>

<P><STRONG><a name="[867]"></a>ssl_set_timer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[868]"></a>ssl_start_renegotiation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_start_renegotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 3536<LI>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; ssl_parse_certificate_chain &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</UL>

<P><STRONG><a name="[11f]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[120]"></a>ssl_update_checksum_sha384</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ssl_update_checksum_sha384 &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[14f]"></a>ssl_update_checksum_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha512_update_ret &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update_ret
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.ssl_handshake_init)
</UL>
<P><STRONG><a name="[864]"></a>ssl_update_in_pointers</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_in_pointers))
<BR><BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
</UL>

<P><STRONG><a name="[842]"></a>ssl_update_out_pointers</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_out_pointers))
<BR><BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
</UL>

<P><STRONG><a name="[875]"></a>ssl_write_real</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_write_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[999]"></a>tls_prf_generic</STRONG> (Thumb, 274 bytes, Stack size 256 bytes, ssl_tls.o(i.tls_prf_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha384
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[119]"></a>tls_prf_sha256</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ssl_tls.o(i.tls_prf_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[11c]"></a>tls_prf_sha384</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ssl_tls.o(i.tls_prf_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tls_prf_sha384 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[89b]"></a>x509_check_time</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, x509.o(i.x509_check_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>

<P><STRONG><a name="[9b0]"></a>x509_date_is_valid</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, x509.o(i.x509_date_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[890]"></a>x509_get_attr_type_value</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, x509.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[89a]"></a>x509_get_current_time</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, x509.o(i.x509_get_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>

<P><STRONG><a name="[892]"></a>x509_get_hash_alg</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, x509.o(i.x509_get_hash_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_hash_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[9af]"></a>x509_parse_int</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, x509.o(i.x509_parse_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[897]"></a>x509_parse_time</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, x509.o(i.x509_parse_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_parse_time &rArr; x509_parse_int
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[9a5]"></a>x509_crt_check_cn</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x509_crt.o(i.x509_crt_check_cn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_crt_check_cn &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
</UL>

<P><STRONG><a name="[9a7]"></a>x509_crt_find_parent_in</STRONG> (Thumb, 256 bytes, Stack size 120 bytes, x509_crt.o(i.x509_crt_find_parent_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = x509_crt_find_parent_in &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[885]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 754 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_parse_der_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[88b]"></a>x509_crt_verify_chain</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, x509_crt.o(i.x509_crt_verify_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = x509_crt_verify_chain &rArr; x509_crt_find_parent_in &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_restartable
</UL>

<P><STRONG><a name="[887]"></a>x509_crt_verify_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(i.x509_crt_verify_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_crt_verify_name &rArr; x509_crt_check_cn &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_restartable
</UL>

<P><STRONG><a name="[9ac]"></a>x509_crt_verifycrl</STRONG> (Thumb, 238 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_verifycrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[9ad]"></a>x509_get_basic_constraints</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_basic_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[9aa]"></a>x509_get_crt_ext</STRONG> (Thumb, 464 bytes, Stack size 80 bytes, x509_crt.o(i.x509_get_crt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[9ae]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[9a9]"></a>x509_get_uid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509_crt.o(i.x509_get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[87f]"></a>x509_info_cert_type</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_cert_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_cert_type &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[880]"></a>x509_info_key_usage</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_key_usage &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[9a6]"></a>x509_memcasecmp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, x509_crt.o(i.x509_memcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
</UL>

<P><STRONG><a name="[9a8]"></a>x509_name_cmp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, x509_crt.o(i.x509_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_name_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[88a]"></a>x509_profile_check_key</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, x509_crt.o(i.x509_profile_check_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x509_profile_check_key
</UL>
<BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_restartable
</UL>

<P><STRONG><a name="[9ab]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[889]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_restartable
</UL>

<P><STRONG><a name="[950]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[951]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[958]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[961]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[946]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[94a]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[953]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[157]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[954]"></a>prvInitialiseNewTask</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[9a0]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[94e]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[957]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[959]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[95b]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[95a]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[960]"></a>prvSwitchTimerLists</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[158]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[8fe]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[909]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[964]"></a>prvHeapInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[965]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[147]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[8d7]"></a>check_low_level_socket</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_socket.o(i.check_low_level_socket))
<BR><BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
</UL>

<P><STRONG><a name="[6b9]"></a>create_low_level_socket</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_socket.o(i.create_low_level_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = create_low_level_socket &rArr; net_access_control
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_access_control
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
</UL>

<P><STRONG><a name="[728]"></a>find_free_socket</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, net_socket.o(i.find_free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = find_free_socket &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket
</UL>

<P><STRONG><a name="[8d4]"></a>is_valid_socket</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_socket.o(i.is_valid_socket))
<BR><BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
</UL>

<P><STRONG><a name="[8d5]"></a>net_socket_get_and_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_socket.o(i.net_socket_get_and_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_socket_get_and_lock &rArr; net_lock &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_setsockopt
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_connect
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
</UL>

<P><STRONG><a name="[13e]"></a>DebugPrint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net_mbedtls.o(i.DebugPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugPrint &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mbedtls.o(i.net_mbedtls_start)
</UL>
<P><STRONG><a name="[7a2]"></a>mbedtls_free_resource</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, net_mbedtls.o(i.mbedtls_free_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_free_resource &rArr; mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_stop
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mbedtls_start
</UL>

<P><STRONG><a name="[13f]"></a>mbedtls_net_recv</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, net_mbedtls.o(i.mbedtls_net_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbedtls_net_recv &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mbedtls.o(i.net_mbedtls_start)
</UL>
<P><STRONG><a name="[140]"></a>mbedtls_net_send</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, net_mbedtls.o(i.mbedtls_net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_net_send &rArr; net_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_unlock
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mbedtls.o(i.net_mbedtls_start)
</UL>
<P><STRONG><a name="[439]"></a>Generate_RngLocalPort</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_cellular.o(i.Generate_RngLocalPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Generate_RngLocalPort
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_connect
</UL>

<P><STRONG><a name="[f9]"></a>cellular_notif_cb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, net_cellular.o(i.cellular_notif_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cellular_notif_cb &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.cellif_input)
</UL>
<P><STRONG><a name="[651]"></a>cellular_set_config</STRONG> (Thumb, 162 bytes, Stack size 296 bytes, net_cellular.o(i.cellular_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = cellular_set_config &rArr; dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellif_input
</UL>

<P><STRONG><a name="[8d0]"></a>conv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_cellular.o(i.conv))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_sendto
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_recvfrom
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_recv
</UL>

<P><STRONG><a name="[12e]"></a>net_cellular_accept</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, net_cellular.o(i.net_cellular_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_cellular_accept
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_accept
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[12c]"></a>net_cellular_bind</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, net_cellular.o(i.net_cellular_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_cellular_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[138]"></a>net_cellular_close</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, net_cellular.o(i.net_cellular_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_cellular_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closesocket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[12f]"></a>net_cellular_connect</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, net_cellular.o(i.net_cellular_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_cellular_connect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_connect
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_RngLocalPort
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[fa]"></a>net_cellular_get_radio_info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_cellular.o(i.net_cellular_get_radio_info))
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.cellular_net_driver)
</UL>
<P><STRONG><a name="[137]"></a>net_cellular_getpeername</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_cellular.o(i.net_cellular_getpeername))
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[136]"></a>net_cellular_getsockname</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_cellular.o(i.net_cellular_getsockname))
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[135]"></a>net_cellular_getsockopt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_cellular.o(i.net_cellular_getsockopt))
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[129]"></a>net_cellular_if_connect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_cellular.o(i.net_cellular_if_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = net_cellular_if_connect &rArr; net_if_notify &rArr; net_unlock_nochk &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[126]"></a>net_cellular_if_deinit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, net_cellular.o(i.net_cellular_if_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = net_cellular_if_deinit &rArr; net_if_notify &rArr; net_unlock_nochk &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[12a]"></a>net_cellular_if_disconnect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_cellular.o(i.net_cellular_if_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_cellular_if_disconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[13a]"></a>net_cellular_if_gethostbyname</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, net_cellular.o(i.net_cellular_if_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_cellular_if_gethostbyname
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gethostbyname
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[125]"></a>net_cellular_if_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_cellular.o(i.net_cellular_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = net_cellular_if_init &rArr; cellular_init &rArr; CST_cellular_service_init &rArr; CS_init &rArr; AT_open &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_net_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[127]"></a>net_cellular_if_start</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, net_cellular.o(i.net_cellular_if_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_cellular_if_start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[128]"></a>net_cellular_if_stop</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, net_cellular.o(i.net_cellular_if_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = net_cellular_if_stop &rArr; dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[65a]"></a>net_cellular_init_class</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, net_cellular.o(i.net_cellular_init_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_cellular_init_class &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_net_driver
</UL>

<P><STRONG><a name="[12d]"></a>net_cellular_listen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net_cellular.o(i.net_cellular_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_cellular_listen
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_listen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[13b]"></a>net_cellular_ping</STRONG> (Thumb, 270 bytes, Stack size 96 bytes, net_cellular.o(i.net_cellular_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = net_cellular_ping &rArr; com_ping_process &rArr; com_ping_process_ip_modem &rArr; osCDS_ping &rArr; CDS_ping &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closeping
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[131]"></a>net_cellular_recv</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, net_cellular.o(i.net_cellular_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_cellular_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[133]"></a>net_cellular_recvfrom</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, net_cellular.o(i.net_cellular_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = net_cellular_recvfrom &rArr; com_recvfrom &rArr; com_recvfrom_ip_modem &rArr; osCDS_socket_receivefrom &rArr; CDS_socket_receivefrom &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[130]"></a>net_cellular_send</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, net_cellular.o(i.net_cellular_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = net_cellular_send &rArr; com_send &rArr; com_send_ip_modem &rArr; com_sendto_ip_modem &rArr;  com_send_ip_modem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[132]"></a>net_cellular_sendto</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, net_cellular.o(i.net_cellular_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = net_cellular_sendto &rArr; com_sendto &rArr; com_sendto_ip_modem &rArr;  com_send_ip_modem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[134]"></a>net_cellular_setsockopt</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, net_cellular.o(i.net_cellular_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_cellular_setsockopt &rArr; com_setsockopt &rArr; com_setsockopt_ip_modem &rArr; com_ip_modem_find_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_setsockopt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[139]"></a>net_cellular_shutdown</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, net_cellular.o(i.net_cellular_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_cellular_shutdown &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[12b]"></a>net_cellular_socket</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, net_cellular.o(i.net_cellular_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = net_cellular_socket &rArr; com_socket &rArr; com_socket_ip_modem &rArr; com_closesocket_ip_modem &rArr; osCDS_socket_close &rArr; CDS_socket_close &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_cellular.o(i.net_cellular_init_class)
</UL>
<P><STRONG><a name="[223]"></a>ATCoreTaskBody</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, at_core.o(i.ATCoreTaskBody))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ATCoreTaskBody &rArr; osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_action_result
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_receive
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_parse_rsp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_urc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_abort_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_core.o(.constdata)
</UL>
<P><STRONG><a name="[26e]"></a>analyze_action_result</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at_core.o(i.analyze_action_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = analyze_action_result
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_select
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_get_other_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCoreTaskBody
</UL>

<P><STRONG><a name="[72b]"></a>find_index</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at_core.o(i.find_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = find_index &rArr; ERROR_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgSentCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgReceivedCallback
</UL>

<P><STRONG><a name="[b6]"></a>msgReceivedCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_core.o(i.msgReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = msgReceivedCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_core.o(i.AT_open)
</UL>
<P><STRONG><a name="[b5]"></a>msgSentCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_core.o(i.msgSentCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = msgSentCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_core.o(i.AT_open)
</UL>
<P><STRONG><a name="[2b6]"></a>process_AT_transaction</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, at_core.o(i.process_AT_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_ATcmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>

<P><STRONG><a name="[62a]"></a>analyze_CmeError</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, at_modem_signalling.o(i.analyze_CmeError))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = analyze_CmeError &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcc_extractElement
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertStringToUpperCase
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_report
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CmeErr
</UL>

<P><STRONG><a name="[71e]"></a>convert_NetworkState</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, at_modem_signalling.o(i.convert_NetworkState))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CREG
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CGREG
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CEREG
</UL>

<P><STRONG><a name="[62d]"></a>set_error_report</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_modem_signalling.o(i.set_error_report))
<BR><BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fRspAnalyze_CPIN
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyze_CmeError
</UL>

<P><STRONG><a name="[29c]"></a>build_command</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, at_parser.o(i.build_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = build_command &rArr; write_data2buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data2buffer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_ATcmd
</UL>

<P><STRONG><a name="[29d]"></a>display_buffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_parser.o(i.display_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_parse_rsp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_ATcmd
</UL>

<P><STRONG><a name="[29a]"></a>reset_current_command</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at_parser.o(i.reset_current_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_current_command
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_parse_rsp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_ATcmd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_parser_context
</UL>

<P><STRONG><a name="[298]"></a>reset_parser_context</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at_parser.o(i.reset_parser_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reset_parser_context &rArr; reset_current_command
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_current_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_process_request
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_get_rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATParser_abort_request
</UL>

<P><STRONG><a name="[64c]"></a>write_data2buffer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_parser.o(i.write_data2buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_data2buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_command
</UL>

<P><STRONG><a name="[30d]"></a>CELLULAR_analyze_error_report</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cellular_service.o(i.CELLULAR_analyze_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CELLULAR_analyze_error_report &rArr; DATAPACK_readStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readMsgType
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init_modem
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_get_device_info
</UL>

<P><STRONG><a name="[bf]"></a>CELLULAR_idle_event_notif</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cellular_service.o(i.CELLULAR_idle_event_notif))
<BR>[Address Reference Count : 1]<UL><LI> cellular_service.o(i.CS_init)
</UL>
<P><STRONG><a name="[356]"></a>CELLULAR_reset_context</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cellular_service.o(i.CELLULAR_reset_context))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init
</UL>

<P><STRONG><a name="[be]"></a>CELLULAR_urc_notif</STRONG> (Thumb, 842 bytes, Stack size 176 bytes, cellular_service.o(i.CELLULAR_urc_notif))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CELLULAR_urc_notif &rArr; DATAPACK_readStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readStruct
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_readMsgType
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_PDN_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service.o(i.CS_init)
</UL>
<P><STRONG><a name="[30f]"></a>convert_to_PDN_event</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cellular_service.o(i.convert_to_PDN_event))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CELLULAR_urc_notif
</UL>

<P><STRONG><a name="[35e]"></a>perform_HW_reset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cellular_service.o(i.perform_HW_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = perform_HW_reset &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_reset_device
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reset
</UL>

<P><STRONG><a name="[35f]"></a>perform_SW_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cellular_service.o(i.perform_SW_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = perform_SW_reset &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAPACK_writeStruct
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_sendcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reset
</UL>

<P><STRONG><a name="[306]"></a>socket_configure_remote</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cellular_service.o(i.socket_configure_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = socket_configure_remote &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_connect
</UL>

<P><STRONG><a name="[308]"></a>socket_create</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, cellular_service.o(i.socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = socket_create
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_create
</UL>

<P><STRONG><a name="[304]"></a>socket_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cellular_service.o(i.socket_init))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_create
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDS_socket_close
</UL>

<P><STRONG><a name="[316]"></a>CST_attach_modem_mngt</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, cellular_service_task.o(i.CST_attach_modem_mngt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CST_attach_modem_mngt &rArr; osCDS_get_attach_status &rArr; CS_get_attach_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_attach_status
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_net_status
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[229]"></a>CST_cellular_service_task</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, cellular_service_task.o(i.CST_cellular_service_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = CST_cellular_service_task &rArr; CST_init_modem_mngt &rArr; CST_modem_define_pdn &rArr; osCDS_define_pdn &rArr; CS_define_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_waiting_for_network_status_state
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_power_on_modem_mngt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_pdn_event_mngt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_powered_on_state
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_activate_pdn
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_autom_event
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_modem_event
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_power_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(.constdata)
</UL>
<P><STRONG><a name="[32c]"></a>CST_cellular_state_event_mngt</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, cellular_service_task.o(i.CST_cellular_state_event_mngt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CST_cellular_state_event_mngt &rArr; CS_power_off &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_off
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_waiting_for_network_status_state
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_powered_on_state
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[31b]"></a>CST_config_fail_mngt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cellular_service_task.o(i.CST_config_fail_mngt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CST_config_fail_mngt &rArr; CST_data_cache_set &rArr; dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_data_cache_set
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_set_signal_quality
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_power_on_modem_mngt
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_define_pdn
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
</UL>

<P><STRONG><a name="[336]"></a>CST_data_cache_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cellular_service_task.o(i.CST_data_cache_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CST_data_cache_set &rArr; dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
</UL>

<P><STRONG><a name="[337]"></a>CST_fill_nfmc_tempo</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, cellular_service_task.o(i.CST_fill_nfmc_tempo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CST_fill_nfmc_tempo &rArr; dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
</UL>

<P><STRONG><a name="[228]"></a>CST_fota_timer_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_fota_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CST_fota_timer_callback &rArr; ERROR_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(.constdata)
</UL>
<P><STRONG><a name="[327]"></a>CST_get_autom_event</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cellular_service_task.o(i.CST_get_autom_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CST_get_autom_event &rArr; dc_com_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[33a]"></a>CST_get_device_all_infos</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, cellular_service_task.o(i.CST_get_device_all_infos))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CST_get_device_all_infos &rArr; CST_fill_nfmc_tempo &rArr; dc_com_write &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATutil_convertHexaStringToInt64
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_fill_nfmc_tempo
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_device_info
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
</UL>

<P><STRONG><a name="[32e]"></a>CST_init_modem_mngt</STRONG> (Thumb, 316 bytes, Stack size 272 bytes, cellular_service_task.o(i.CST_init_modem_mngt))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = CST_init_modem_mngt &rArr; CST_modem_define_pdn &rArr; osCDS_define_pdn &rArr; CS_define_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_define_pdn
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_device_all_infos
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_sim_select
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_subscribe_net_event
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_init_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[bc]"></a>CST_location_info_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_location_info_callback))
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(i.CST_init_modem_mngt)
</UL>
<P><STRONG><a name="[331]"></a>CST_modem_activate_pdn</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, cellular_service_task.o(i.CST_modem_activate_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CST_modem_activate_pdn &rArr; osCDS_activate_pdn &rArr; CS_activate_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_activate_pdn
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_set_default_pdn
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_pdn_event
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[33e]"></a>CST_modem_define_pdn</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, cellular_service_task.o(i.CST_modem_define_pdn))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = CST_modem_define_pdn &rArr; osCDS_define_pdn &rArr; CS_define_pdn &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crs_strlen
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_define_pdn
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
</UL>

<P><STRONG><a name="[ba]"></a>CST_modem_event_callback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cellular_service_task.o(i.CST_modem_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CST_modem_event_callback &rArr; osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(i.CST_cellular_service_task)
</UL>
<P><STRONG><a name="[332]"></a>CST_modem_pdn_activate_state</STRONG> (Thumb, 138 bytes, Stack size 256 bytes, cellular_service_task.o(i.CST_modem_pdn_activate_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = CST_modem_pdn_activate_state &rArr; CST_pdn_event_mngt &rArr; CST_network_event_mngt &rArr; osCDS_get_net_status &rArr; CS_get_net_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_pdn_event_mngt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_activate_pdn
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_data_cache_set
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[32f]"></a>CST_modem_powered_on_state</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, cellular_service_task.o(i.CST_modem_powered_on_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CST_modem_powered_on_state &rArr; osCDS_register_net &rArr; CS_register_net &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_attach_PS_domain
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_register_net
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[333]"></a>CST_network_event_mngt</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, cellular_service_task.o(i.CST_network_event_mngt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CST_network_event_mngt &rArr; osCDS_get_net_status &rArr; CS_get_net_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_data_cache_set
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_net_status
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_pdn_event_mngt
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[bb]"></a>CST_network_reg_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_network_reg_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CST_network_reg_callback &rArr; CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(i.CST_init_modem_mngt)
</UL>
<P><STRONG><a name="[226]"></a>CST_network_status_timer_callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_network_status_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CST_network_status_timer_callback &rArr; CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>CST_notif_cb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cellular_service_task.o(i.CST_notif_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CST_notif_cb &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(i.CST_cellular_service_start)
</UL>
<P><STRONG><a name="[225]"></a>CST_pdn_activate_retry_timer_callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_pdn_activate_retry_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CST_pdn_activate_retry_timer_callback &rArr; CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>CST_pdn_event_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_pdn_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CST_pdn_event_callback &rArr; CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(i.CST_modem_activate_pdn)
</UL>
<P><STRONG><a name="[334]"></a>CST_pdn_event_mngt</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_pdn_event_mngt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CST_pdn_event_mngt &rArr; CST_network_event_mngt &rArr; osCDS_get_net_status &rArr; CS_get_net_status &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_pdn_activate_state
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[224]"></a>CST_polling_timer_callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_polling_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CST_polling_timer_callback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>CST_power_on_modem_mngt</STRONG> (Thumb, 116 bytes, Stack size 256 bytes, cellular_service_task.o(i.CST_power_on_modem_mngt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = CST_power_on_modem_mngt &rArr; osCDS_power_on &rArr; CS_power_on &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_power_on
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[227]"></a>CST_register_retry_timer_callback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_register_retry_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CST_register_retry_timer_callback &rArr; CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cellular_service_task.o(.constdata)
</UL>
<P><STRONG><a name="[32d]"></a>CST_reset_state</STRONG> (Thumb, 116 bytes, Stack size 256 bytes, cellular_service_task.o(i.CST_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = CST_reset_state &rArr; osCDS_reset &rArr; CS_reset &rArr; perform_SW_reset &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[31c]"></a>CST_send_message</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cellular_service_task.o(i.CST_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CST_send_message &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_radio_on
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_waiting_for_network_status_state
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_reset_state
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_register_retry_timer_callback
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_power_on_modem_mngt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_pdn_event_mngt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_pdn_event_callback
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_pdn_activate_retry_timer_callback
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_status_timer_callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_reg_callback
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_network_event_mngt
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_powered_on_state
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_modem_activate_pdn
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init_modem_mngt
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_attach_modem_mngt
</UL>

<P><STRONG><a name="[34b]"></a>CST_set_signal_quality</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, cellular_service_task.o(i.CST_set_signal_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CST_set_signal_quality &rArr; osCS_get_signal_quality &rArr; CS_get_signal_quality &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCS_get_signal_quality
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_timer_handler
</UL>

<P><STRONG><a name="[328]"></a>CST_timer_handler</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, cellular_service_task.o(i.CST_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CST_timer_handler &rArr; CST_set_signal_quality &rArr; osCS_get_signal_quality &rArr; CS_get_signal_quality &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_set_signal_quality
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_config_fail_mngt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_get_net_status
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[330]"></a>CST_waiting_for_network_status_state</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cellular_service_task.o(i.CST_waiting_for_network_status_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CST_waiting_for_network_status_state &rArr; CST_cellular_state_event_mngt &rArr; CS_power_off &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERROR_Handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_power_off
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_send_message
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_state_event_mngt
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_cellular_service_task
</UL>

<P><STRONG><a name="[685]"></a>com_convert_IPString_to_sockaddr</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, com_sockets_ip_modem.o(i.com_convert_IPString_to_sockaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = com_convert_IPString_to_sockaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gethostbyname_ip_modem
</UL>

<P><STRONG><a name="[699]"></a>com_convert_ipaddr_port_to_sockaddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_sockets_ip_modem.o(i.com_convert_ipaddr_port_to_sockaddr))
<BR><BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
</UL>

<P><STRONG><a name="[102]"></a>com_ip_modem_closing_cb</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, com_sockets_ip_modem.o(i.com_ip_modem_closing_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = com_ip_modem_closing_cb &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_sockets_ip_modem.o(i.com_socket_ip_modem)
</UL>
<P><STRONG><a name="[683]"></a>com_ip_modem_connect_udp_service</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, com_sockets_ip_modem.o(i.com_ip_modem_connect_udp_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = com_ip_modem_connect_udp_service &rArr; osCDS_socket_connect &rArr; CDS_socket_connect &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_new_local_port
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_connect
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCDS_socket_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_connect_ip_modem
</UL>

<P><STRONG><a name="[68b]"></a>com_ip_modem_create_socket_desc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, com_sockets_ip_modem.o(i.com_ip_modem_create_socket_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = com_ip_modem_create_socket_desc &rArr; osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_init_socket_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_provide_socket_desc
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init_ip_modem
</UL>

<P><STRONG><a name="[103]"></a>com_ip_modem_data_ready_cb</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, com_sockets_ip_modem.o(i.com_ip_modem_data_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = com_ip_modem_data_ready_cb &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_sockets_ip_modem.o(i.com_socket_ip_modem)
</UL>
<P><STRONG><a name="[67f]"></a>com_ip_modem_delete_socket_desc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, com_sockets_ip_modem.o(i.com_ip_modem_delete_socket_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = com_ip_modem_delete_socket_desc &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_init_socket_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closesocket_ip_modem
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closeping_ip_modem
</UL>

<P><STRONG><a name="[67b]"></a>com_ip_modem_find_socket</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, com_sockets_ip_modem.o(i.com_ip_modem_find_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = com_ip_modem_find_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_ping_rsp_cb
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_data_ready_cb
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_closing_cb
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_setsockopt_ip_modem
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_ip_modem
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recvfrom_ip_modem
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_ip_modem
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process_ip_modem
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_connect_ip_modem
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closesocket_ip_modem
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_closeping_ip_modem
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bind_ip_modem
</UL>

<P><STRONG><a name="[68d]"></a>com_ip_modem_init_socket_desc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, com_sockets_ip_modem.o(i.com_ip_modem_init_socket_desc))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_delete_socket_desc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_create_socket_desc
</UL>

<P><STRONG><a name="[68c]"></a>com_ip_modem_new_local_port</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, com_sockets_ip_modem.o(i.com_ip_modem_new_local_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = com_ip_modem_new_local_port
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_connect_udp_service
</UL>

<P><STRONG><a name="[101]"></a>com_ip_modem_ping_rsp_cb</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, com_sockets_ip_modem.o(i.com_ip_modem_ping_rsp_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = com_ip_modem_ping_rsp_cb &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_find_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_sockets_ip_modem.o(i.com_ping_process_ip_modem)
</UL>
<P><STRONG><a name="[690]"></a>com_ip_modem_provide_socket_desc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, com_sockets_ip_modem.o(i.com_ip_modem_provide_socket_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = com_ip_modem_provide_socket_desc &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ip_modem_create_socket_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_socket_ip_modem
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_ip_modem
</UL>

<P><STRONG><a name="[104]"></a>com_socket_datacache_cb</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, com_sockets_ip_modem.o(i.com_socket_datacache_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = com_socket_datacache_cb &rArr; dc_com_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_sockets_ip_modem.o(i.com_start_ip_modem)
</UL>
<P><STRONG><a name="[67c]"></a>com_translate_ip_address</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, com_sockets_ip_modem.o(i.com_translate_ip_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = com_translate_ip_address &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sendto_ip_modem
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_ping_process_ip_modem
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_connect_ip_modem
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_bind_ip_modem
</UL>

<P><STRONG><a name="[22b]"></a>dc_CtrlEventStartTask</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dc_control.o(i.dc_CtrlEventStartTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dc_CtrlEventStartTask &rArr; osTimerCreate &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_control.o(.constdata)
</UL>
<P><STRONG><a name="[22a]"></a>dc_ctrl_osTimerDebounceCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dc_control.o(i.dc_ctrl_osTimerDebounceCallback))
<BR>[Address Reference Count : 1]<UL><LI> dc_control.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>nifman_notif_cb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nifman.o(i.nifman_notif_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nifman_notif_cb &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nifman.o(i.nifman_start)
</UL>
<P><STRONG><a name="[22c]"></a>nifman_thread</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, nifman.o(i.nifman_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nifman_thread &rArr; CST_get_dev_IP_address &rArr; CS_get_dev_IP_address &rArr; AT_sendcmd &rArr; process_AT_transaction &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_read
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_get_dev_IP_address
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_get_ip_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nifman.o(.constdata)
</UL>
<P><STRONG><a name="[657]"></a>dc_cellular_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, cellular_init.o(i.dc_cellular_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dc_cellular_init &rArr; dc_com_register_serv
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_com_register_serv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cellular_init
</UL>

<P><STRONG><a name="[58f]"></a>RXFIFO_incrementHead</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, ipc_rxfifo.o(i.RXFIFO_incrementHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RXFIFO_incrementHead
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_getFreeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_writeCharacter
</UL>

<P><STRONG><a name="[591]"></a>RXFIFO_incrementTail</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ipc_rxfifo.o(i.RXFIFO_incrementTail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXFIFO_read
</UL>

<P><STRONG><a name="[4a8]"></a>find_Device</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ipc_uart.o(i.find_Device))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_UART_TxCpltCallback
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_UART_RxCpltCallback
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_UART_ErrorCallback
</UL>

<P><STRONG><a name="[99a]"></a>ITM_Out</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, trace_interface.o(i.ITM_Out))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_itmPrint
</UL>

<P><STRONG><a name="[99b]"></a>traceIF_uartTransmit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace_interface.o(i.traceIF_uartTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = traceIF_uartTransmit &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceIF_uartPrint
</UL>

<P><STRONG><a name="[236]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[237]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[614]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[601]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[616]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[615]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e6]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[e7]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[b3]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[25b]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[261]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
